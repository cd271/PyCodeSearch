{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/backtrack/factor_combinations.py", "fileNameBase": "factor_combinations", "extension": "py", "doc": {"long_description": "8 = 2 x 2 x 2;\n  = 2 x 4.\nWrite a function that takes an integer n\nand return all possible combinations of its factors.\n\nNote:\nYou may assume that n is always positive.\nFactors should be greater than 1 and less than n.\nExamples:\ninput: 1\noutput:\n[]\ninput: 37\noutput:\n[]\ninput: 12\noutput:\n[\n  [2, 6],\n  [2, 2, 3],\n  [3, 4]\n]\ninput: 32\noutput:\n[\n  [2, 16],\n  [2, 2, 8],\n  [2, 2, 2, 4],\n  [2, 2, 2, 2, 2],\n  [2, 4, 4],\n  [4, 8]\n]", "short_description": "Numbers can be regarded as product of its factors. For example,", "full": "Numbers can be regarded as product of its factors. For example,\n\n8 = 2 x 2 x 2;\n  = 2 x 4.\nWrite a function that takes an integer n\nand return all possible combinations of its factors.\n\nNote:\nYou may assume that n is always positive.\nFactors should be greater than 1 and less than n.\nExamples:\ninput: 1\noutput:\n[]\ninput: 37\noutput:\n[]\ninput: 12\noutput:\n[\n  [2, 6],\n  [2, 2, 3],\n  [3, 4]\n]\ninput: 32\noutput:\n[\n  [2, 16],\n  [2, 2, 8],\n  [2, 2, 2, 4],\n  [2, 2, 2, 2, 2],\n  [2, 4, 4],\n  [4, 8]\n]"}}, "functions": {"get_factors": {"args": ["n"], "returns": ["combis"], "min_max_lineno": {"min_lineno": 40, "max_lineno": 50}, "calls": ["todo.pop", "combis.append", "todo.append"], "source_code": "def get_factors(n):\n    (todo, combis) = ([(n, 2, [])], [])\n    while todo:\n        (n, i, combi) = todo.pop()\n        while i * i <= n:\n            if n % i == 0:\n                combis.append(combi + [i, n // i])\n                todo.append((n // i, i, combi + [i]))\n            i += 1\n    return combis"}, "recursive_get_factors": {"args": ["n"], "returns": ["factor(n, 2, [], [])", "combis"], "min_max_lineno": {"min_lineno": 53, "max_lineno": 64}, "calls": ["factor_combinations.recursive_get_factors.factor"], "functions": {"factor": {"args": ["n", "i", "combi", "combis"], "returns": ["combis"], "min_max_lineno": {"min_lineno": 55, "max_lineno": 62}, "calls": ["factor", "combis.append"], "source_code": "def factor(n, i, combi, combis):\n    while i * i <= n:\n        if n % i == 0:\n            (combis.append(combi + [i, n // i]),)\n            factor(n // i, i, combi + [i], combis)\n        i += 1\n    return combis"}}, "source_code": "def recursive_get_factors(n):\n\n    def factor(n, i, combi, combis):\n        while i * i <= n:\n            if n % i == 0:\n                (combis.append(combi + [i, n // i]),)\n                factor(n // i, i, combi + [i], combis)\n            i += 1\n        return combis\n    return factor(n, 2, [], [])"}}, "is_test": false}