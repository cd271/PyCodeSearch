{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/backtrack/letter_combination.py", "fileNameBase": "letter_combination", "extension": "py", "doc": {"long_description": "combinations that the number could represent.\n\nA mapping of digit to letters (just like on the telephone buttons) is given below:\n2: \"abc\"\n3: \"def\"\n4: \"ghi\"\n5: \"jkl\"\n6: \"mno\"\n7: \"pqrs\"\n8: \"tuv\"\n9: \"wxyz\"\n\nInput:Digit string \"23\"\nOutput: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].", "short_description": "Given a digit string, return all possible letter", "full": "Given a digit string, return all possible letter\ncombinations that the number could represent.\n\nA mapping of digit to letters (just like on the telephone buttons) is given below:\n2: \"abc\"\n3: \"def\"\n4: \"ghi\"\n5: \"jkl\"\n6: \"mno\"\n7: \"pqrs\"\n8: \"tuv\"\n9: \"wxyz\"\n\nInput:Digit string \"23\"\nOutput: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]."}}, "functions": {"letter_combinations": {"args": ["digits"], "returns": ["ans", "[]"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 41}, "calls": ["tmp.append"], "source_code": "def letter_combinations(digits):\n    if digits == '':\n        return []\n    kmaps = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n    ans = ['']\n    for num in digits:\n        tmp = []\n        for an in ans:\n            for char in kmaps[num]:\n                tmp.append(an + char)\n        ans = tmp\n    return ans"}}, "is_test": false}