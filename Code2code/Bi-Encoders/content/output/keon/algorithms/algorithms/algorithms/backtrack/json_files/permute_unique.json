{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/backtrack/permute_unique.py", "fileNameBase": "permute_unique", "extension": "py", "doc": {"long_description": "return all possible unique permutations.\n\nFor example,\n[1,1,2] have the following unique permutations:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]", "short_description": "Given a collection of numbers that might contain duplicates,", "full": "Given a collection of numbers that might contain duplicates,\nreturn all possible unique permutations.\n\nFor example,\n[1,1,2] have the following unique permutations:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]"}}, "functions": {"permute_unique": {"args": ["nums"], "returns": ["perms"], "min_max_lineno": {"min_lineno": 15, "max_lineno": 26}, "calls": ["range", "new_perms.append", "len"], "source_code": "def permute_unique(nums):\n    perms = [[]]\n    for n in nums:\n        new_perms = []\n        for l in perms:\n            for i in range(len(l) + 1):\n                new_perms.append(l[:i] + [n] + l[i:])\n                if i < len(l) and l[i] == n:\n                    break\n        perms = new_perms\n    return perms"}}, "is_test": false}