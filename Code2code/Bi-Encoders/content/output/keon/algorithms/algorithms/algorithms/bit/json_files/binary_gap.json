{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/bit/binary_gap.py", "fileNameBase": "binary_gap", "extension": "py", "doc": {"long_description": "consecutive 1' in the binary representation of N.\nIf there are not two consecutive 1's, return 0\n\nFor example:\nInput: 22\nOutput: 2\nExplanation:\n22 in binary is 10110\nIn the binary representation of 22, there are three ones, and two consecutive pairs of 1's.\nThe first consecutive pair of 1's have distance 2.\nThe second consecutive pair of 1's have distance 1.\nThe answer is the largest of these two distances, which is 2", "short_description": "Given a positive integer N, find and return the longest distance between two", "full": "Given a positive integer N, find and return the longest distance between two\nconsecutive 1' in the binary representation of N.\nIf there are not two consecutive 1's, return 0\n\nFor example:\nInput: 22\nOutput: 2\nExplanation:\n22 in binary is 10110\nIn the binary representation of 22, there are three ones, and two consecutive pairs of 1's.\nThe first consecutive pair of 1's have distance 2.\nThe second consecutive pair of 1's have distance 1.\nThe answer is the largest of these two distances, which is 2"}}, "functions": {"binary_gap": {"args": ["N"], "returns": ["ans"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 36}, "calls": ["max"], "store_vars_calls": {"ans": "max"}, "source_code": "def binary_gap(N):\n    last = None\n    ans = 0\n    index = 0\n    while N != 0:\n        if N & 1:\n            if last is not None:\n                ans = max(ans, index - last)\n            last = index\n        index = index + 1\n        N = N >> 1\n    return ans"}, "binary_gap_improved": {"args": ["N"], "returns": ["ans"], "min_max_lineno": {"min_lineno": 38, "max_lineno": 54}, "calls": ["max"], "store_vars_calls": {"ans": "max"}, "source_code": "def binary_gap_improved(N):\n    last = None\n    ans = 0\n    index = 0\n    while N != 0:\n        tes = N & 1\n        if tes:\n            if last is not None:\n                ans = max(ans, index - last + 1)\n            else:\n                last = index\n        else:\n            last = index + 1\n        index = index + 1\n        N = N >> 1\n    return ans"}}, "body": {"calls": ["print", "binary_gap.binary_gap", "binary_gap.binary_gap_improved"], "source_code": ["print(binary_gap(111))", "binary_gap(111)", "print(binary_gap_improved(111))", "binary_gap_improved(111)"]}, "is_test": false}