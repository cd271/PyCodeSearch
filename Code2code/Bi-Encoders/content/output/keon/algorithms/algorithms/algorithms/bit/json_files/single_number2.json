{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/bit/single_number2.py", "fileNameBase": "single_number2", "extension": "py", "doc": {"long_description": "three times except for one, which appears exactly once.\nFind that single one.\n\nNote:\nYour algorithm should have a linear runtime complexity.\nCould you implement it without using extra memory?\n\n\nSolution:\n32 bits for each integer.\nConsider 1 bit in it, the sum of each integer's corresponding bit\n(except for the single number)\nshould be 0 if mod by 3. Hence, we sum the bits of all\nintegers and mod by 3,\nthe remaining should be the exact bit of the single number.\nIn this way, you get the 32 bits of the single number.", "short_description": "Given an array of integers, every element appears", "full": "Given an array of integers, every element appears\nthree times except for one, which appears exactly once.\nFind that single one.\n\nNote:\nYour algorithm should have a linear runtime complexity.\nCould you implement it without using extra memory?\n\n\nSolution:\n32 bits for each integer.\nConsider 1 bit in it, the sum of each integer's corresponding bit\n(except for the single number)\nshould be 0 if mod by 3. Hence, we sum the bits of all\nintegers and mod by 3,\nthe remaining should be the exact bit of the single number.\nIn this way, you get the 32 bits of the single number."}}, "functions": {"single_number2": {"args": ["nums"], "returns": ["ones"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 28}, "calls": ["range", "len"], "source_code": "def single_number2(nums):\n    (ones, twos) = (0, 0)\n    for i in range(len(nums)):\n        ones = (ones ^ nums[i]) & ~twos\n        twos = (twos ^ nums[i]) & ~ones\n    return ones"}}, "is_test": false}