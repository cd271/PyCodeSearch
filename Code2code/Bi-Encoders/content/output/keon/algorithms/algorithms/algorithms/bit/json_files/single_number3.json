{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/bit/single_number3.py", "fileNameBase": "single_number3", "extension": "py", "doc": {"long_description": "in which exactly two elements appear only once\nand all the other elements appear exactly twice.\nFind the two elements that appear only once.\nLimitation: Time Complexity: O(N) and Space Complexity O(1)\n\nFor example:\n\nGiven nums = [1, 2, 1, 3, 2, 5], return [3, 5].\n\nNote:\nThe order of the result is not important.\nSo in the above example, [5, 3] is also correct.\n\n\nSolution:\n1. Use XOR to cancel out the pairs and isolate A^B\n2. It is guaranteed that at least 1 bit exists in A^B since\n   A and B are different numbers. ex) 010 ^ 111 = 101\n3. Single out one bit R (right most bit in this solution) to use it as a pivot\n4. Divide all numbers into two groups.\n   One group with a bit in the position R\n   One group without a bit in the position R\n5. Use the same strategy we used in step 1 to isolate A and B from each group.", "short_description": "Given an array of numbers nums,", "full": "Given an array of numbers nums,\nin which exactly two elements appear only once\nand all the other elements appear exactly twice.\nFind the two elements that appear only once.\nLimitation: Time Complexity: O(N) and Space Complexity O(1)\n\nFor example:\n\nGiven nums = [1, 2, 1, 3, 2, 5], return [3, 5].\n\nNote:\nThe order of the result is not important.\nSo in the above example, [5, 3] is also correct.\n\n\nSolution:\n1. Use XOR to cancel out the pairs and isolate A^B\n2. It is guaranteed that at least 1 bit exists in A^B since\n   A and B are different numbers. ex) 010 ^ 111 = 101\n3. Single out one bit R (right most bit in this solution) to use it as a pivot\n4. Divide all numbers into two groups.\n   One group with a bit in the position R\n   One group without a bit in the position R\n5. Use the same strategy we used in step 1 to isolate A and B from each group."}}, "functions": {"single_number3": {"args": ["nums"], "returns": ["[a, b]"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 50}, "source_code": "def single_number3(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    ab = 0\n    for n in nums:\n        ab ^= n\n    right_most = ab & -ab\n    (a, b) = (0, 0)\n    for n in nums:\n        if n & right_most:\n            a ^= n\n        else:\n            b ^= n\n    return [a, b]"}}, "is_test": false}