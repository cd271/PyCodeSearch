{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/dp/knapsack.py", "fileNameBase": "knapsack", "extension": "py", "doc": {"long_description": "return the maximum summarized value of the items that can be fit in the\nknapsack.\n\nExample:\ncapacity = 5, items(value, weight) = [(60, 5), (50, 3), (70, 4), (30, 2)]\nresult = 80 (items valued 50 and 30 can both be fit in the knapsack)\n\nThe time complexity is O(n * m) and the space complexity is O(m), where n is\nthe total number of items and m is the knapsack's capacity.", "short_description": "Given the capacity of the knapsack and items specified by weights and values,", "full": "Given the capacity of the knapsack and items specified by weights and values,\nreturn the maximum summarized value of the items that can be fit in the\nknapsack.\n\nExample:\ncapacity = 5, items(value, weight) = [(60, 5), (50, 3), (70, 4), (30, 2)]\nresult = 80 (items valued 50 and 30 can both be fit in the knapsack)\n\nThe time complexity is O(n * m) and the space complexity is O(m), where n is\nthe total number of items and m is the knapsack's capacity."}}, "classes": {"Item": {"min_max_lineno": {"min_lineno": 15, "max_lineno": 20}, "methods": {"__init__": {"args": ["self", "value", "weight"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 20}, "source_code": "def __init__(self, value, weight):\n    self.value = value\n    self.weight = weight"}}}}, "functions": {"get_maximum_value": {"args": ["items", "capacity"], "returns": ["dp[capacity]"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 28}, "calls": ["reversed", "range", "max"], "source_code": "def get_maximum_value(items, capacity):\n    dp = [0] * (capacity + 1)\n    for item in items:\n        for cur_weight in reversed(range(item.weight, capacity + 1)):\n            dp[cur_weight] = max(dp[cur_weight], item.value + dp[cur_weight - item.weight])\n    return dp[capacity]"}}, "is_test": false}