{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/dp/longest_common_subsequence.py", "fileNameBase": "longest_common_subsequence", "extension": "py", "doc": {"long_description": "sequence by deleting some or no elements without changing the\norder of the remaining elements.\n\nFor example, 'abd' is a subsequence of 'abcd' whereas 'adc' is not\n\nGiven 2 strings containing lowercase english alphabets, find the length\nof the Longest Common Subsequence (L.C.S.).", "short_description": "A subsequence is a sequence that can be derived from another", "full": "A subsequence is a sequence that can be derived from another\nsequence by deleting some or no elements without changing the\norder of the remaining elements.\n\nFor example, 'abd' is a subsequence of 'abcd' whereas 'adc' is not\n\nGiven 2 strings containing lowercase english alphabets, find the length\nof the Longest Common Subsequence (L.C.S.).\n\nExample:\n    Input:  'abcdgh'\n            'aedfhr'\n    Output: 3\n\n    Explanation: The longest subsequence common to both the string is \"adh\"\n\nTime Complexity : O(M*N)\nSpace Complexity : O(M*N), where M and N are the lengths of the 1st and 2nd string\nrespectively."}}, "functions": {"longest_common_subsequence": {"doc": {"args": {"s1": {"description": "string"}, "s2": {"description": "string"}}, "returns": {"description": "int", "is_generator": false}}, "args": ["s_1", "s_2"], "returns": ["mat[m][n]"], "min_max_lineno": {"min_lineno": 25, "max_lineno": 47}, "calls": ["len", "range", "max"], "store_vars_calls": {"m": "len", "n": "len"}, "source_code": "def longest_common_subsequence(s_1, s_2):\n    \"\"\"\n    :param s1: string\n    :param s2: string\n    :return: int\n    \"\"\"\n    m = len(s_1)\n    n = len(s_2)\n    mat = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                mat[i][j] = 0\n            elif s_1[i - 1] == s_2[j - 1]:\n                mat[i][j] = mat[i - 1][j - 1] + 1\n            else:\n                mat[i][j] = max(mat[i - 1][j], mat[i][j - 1])\n    return mat[m][n]"}}, "is_test": false}