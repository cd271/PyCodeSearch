{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/dp/planting_trees.py", "fileNameBase": "planting_trees", "extension": "py", "doc": {"long_description": "assigned the job to plant these trees at an even interval on both sides of the\nroad. The length and width of the road are variable, and a pair of trees must\nbe planted at the beginning (at 0) and at the end (at length) of the road. Only\none tree can be moved at a time. The goal is to calculate the lowest amount of\ndistance that the trees have to be moved before they are all in a valid\nposition.", "short_description": "An even number of trees are left along one side of a country road. You've been", "full": "An even number of trees are left along one side of a country road. You've been\nassigned the job to plant these trees at an even interval on both sides of the\nroad. The length and width of the road are variable, and a pair of trees must\nbe planted at the beginning (at 0) and at the end (at length) of the road. Only\none tree can be moved at a time. The goal is to calculate the lowest amount of\ndistance that the trees have to be moved before they are all in a valid\nposition."}}, "dependencies": [{"from_module": "math", "import": "sqrt", "type": "external", "type_element": "module"}], "functions": {"planting_trees": {"doc": {"long_description": "are all in a valid state.\n\n    Parameters:\n        tree (list<int>): A sorted list of integers with all trees'\n                          position along the road.\n        length (int): An integer with the length of the road.\n        width (int): An integer with the width of the road.\n\n    Returns:\n        A float number with the total distance trees have been moved.", "short_description": "Returns the minimum distance that trees have to be moved before they"}, "args": ["trees", "length", "width"], "returns": ["cmatrix[n_pairs][n_pairs]"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 50}, "calls": ["int", "range", "len", "math.sqrt", "abs", "min"], "store_vars_calls": {"n_pairs": "int"}, "source_code": "def planting_trees(trees, length, width):\n    \"\"\"\n    Returns the minimum distance that trees have to be moved before they\n    are all in a valid state.\n\n        Parameters:\n            tree (list<int>): A sorted list of integers with all trees'\n                              position along the road.\n            length (int): An integer with the length of the road.\n            width (int): An integer with the width of the road.\n\n        Returns:\n            A float number with the total distance trees have been moved.\n    \"\"\"\n    trees = [0] + trees\n    n_pairs = int(len(trees) / 2)\n    space_between_pairs = length / (n_pairs - 1)\n    target_locations = [location * space_between_pairs for location in range(n_pairs)]\n    cmatrix = [[0 for _ in range(n_pairs + 1)] for _ in range(n_pairs + 1)]\n    for r_i in range(1, n_pairs + 1):\n        cmatrix[r_i][0] = cmatrix[r_i - 1][0] + sqrt(width + abs(trees[r_i] - target_locations[r_i - 1]) ** 2)\n    for l_i in range(1, n_pairs + 1):\n        cmatrix[0][l_i] = cmatrix[0][l_i - 1] + abs(trees[l_i] - target_locations[l_i - 1])\n    for r_i in range(1, n_pairs + 1):\n        for l_i in range(1, n_pairs + 1):\n            cmatrix[r_i][l_i] = min(cmatrix[r_i - 1][l_i] + sqrt(width + (trees[l_i + r_i] - target_locations[r_i - 1]) ** 2), cmatrix[r_i][l_i - 1] + abs(trees[l_i + r_i] - target_locations[l_i - 1]))\n    return cmatrix[n_pairs][n_pairs]"}}, "is_test": false}