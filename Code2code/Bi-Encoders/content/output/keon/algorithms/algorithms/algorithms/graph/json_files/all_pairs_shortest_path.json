{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/graph/all_pairs_shortest_path.py", "fileNameBase": "all_pairs_shortest_path", "extension": "py", "doc": {"long_description": "it will give you all pairs shortest path length.\nuse deepcopy to preserve the original information.\n\nTime complexity : O(E^3)\n\nexample\n\na = [[0    , 0.1  , 0.101, 0.142, 0.277],\n     [0.465, 0    , 0.191, 0.192, 0.587],\n     [0.245, 0.554, 0    , 0.333, 0.931],\n     [1.032, 0.668, 0.656, 0    , 0.151],\n     [0.867, 0.119, 0.352, 0.398, 0]]\n\nresult\n\n[[0    , 0.1  , 0.101, 0.142, 0.277],\n [0.436, 0    , 0.191, 0.192, 0.343],\n [0.245, 0.345, 0    , 0.333, 0.484],\n [0.706, 0.27 , 0.461, 0    , 0.151],\n [0.555, 0.119, 0.31 , 0.311, 0]]", "short_description": "Given a n*n adjacency array.", "full": "Given a n*n adjacency array.\nit will give you all pairs shortest path length.\nuse deepcopy to preserve the original information.\n\nTime complexity : O(E^3)\n\nexample\n\na = [[0    , 0.1  , 0.101, 0.142, 0.277],\n     [0.465, 0    , 0.191, 0.192, 0.587],\n     [0.245, 0.554, 0    , 0.333, 0.931],\n     [1.032, 0.668, 0.656, 0    , 0.151],\n     [0.867, 0.119, 0.352, 0.398, 0]]\n\nresult\n\n[[0    , 0.1  , 0.101, 0.142, 0.277],\n [0.436, 0    , 0.191, 0.192, 0.343],\n [0.245, 0.345, 0    , 0.333, 0.484],\n [0.706, 0.27 , 0.461, 0    , 0.151],\n [0.555, 0.119, 0.31 , 0.311, 0]]"}}, "dependencies": [{"import": "copy", "type": "external", "type_element": "module"}], "functions": {"all_pairs_shortest_path": {"doc": {"long_description": "matrix containing the shortest distance distance between the two nodes.", "short_description": "Given a matrix of the edge weights between respective nodes, returns a"}, "args": ["adjacency_matrix"], "returns": ["new_array"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 43}, "calls": ["copy.deepcopy", "len", "range"], "store_vars_calls": {"new_array": "copy.deepcopy", "size": "len"}, "source_code": "def all_pairs_shortest_path(adjacency_matrix):\n    \"\"\"\n    Given a matrix of the edge weights between respective nodes, returns a\n    matrix containing the shortest distance distance between the two nodes.\n    \"\"\"\n    new_array = copy.deepcopy(adjacency_matrix)\n    size = len(new_array)\n    for k in range(size):\n        for i in range(size):\n            for j in range(size):\n                if new_array[i][j] > new_array[i][k] + new_array[k][j]:\n                    new_array[i][j] = new_array[i][k] + new_array[k][j]\n    return new_array"}}, "is_test": false}