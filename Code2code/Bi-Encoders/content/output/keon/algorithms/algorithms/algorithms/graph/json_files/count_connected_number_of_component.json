{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/graph/count_connected_number_of_component.py", "fileNameBase": "count_connected_number_of_component", "extension": "py", "doc": {"long_description": "of an undirected graph is a subgraph in which any\ntwo vertices are connected to each other by paths.", "short_description": "In graph theory, a component, sometimes called a connected component,", "full": "In graph theory, a component, sometimes called a connected component,\nof an undirected graph is a subgraph in which any\ntwo vertices are connected to each other by paths.\n\nExample:\n\n\n    1                3------------7\n    |\n    |\n    2--------4\n    |        |\n    |        |              output = 2\n    6--------5"}}, "functions": {"dfs": {"doc": {"short_description": "Function that performs DFS "}, "args": ["source", "visited", "adjacency_list"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 29}, "calls": ["count_connected_number_of_component.dfs"], "source_code": "def dfs(source, visited, adjacency_list):\n    \"\"\" Function that performs DFS \"\"\"\n    visited[source] = True\n    for child in adjacency_list[source]:\n        if not visited[child]:\n            dfs(child, visited, adjacency_list)"}, "count_components": {"doc": {"long_description": "return type : int", "short_description": "Function that counts the Connected components on bases of DFS."}, "args": ["adjacency_list", "size"], "returns": ["count"], "min_max_lineno": {"min_lineno": 30, "max_lineno": 43}, "calls": ["range", "count_connected_number_of_component.dfs"], "source_code": "def count_components(adjacency_list, size):\n    \"\"\"\n    Function that counts the Connected components on bases of DFS.\n    return type : int\n    \"\"\"\n    count = 0\n    visited = [False] * (size + 1)\n    for i in range(1, size + 1):\n        if not visited[i]:\n            dfs(i, visited, adjacency_list)\n            count += 1\n    return count"}, "main": {"doc": {"short_description": "Example application"}, "min_max_lineno": {"min_lineno": 44, "max_lineno": 56}, "calls": ["map", "range", "print", "input().split", "adjacency[].append", "count_connected_number_of_component.count_components", "input"], "source_code": "def main():\n    \"\"\"\n    Example application\n    \"\"\"\n    (node_count, edge_count) = map(int, input('Enter the Number of Nodes and Edges \\n').split(' '))\n    adjacency = [[] for _ in range(node_count + 1)]\n    for _ in range(edge_count):\n        print(\"Enter the edge's Nodes in form of `source target`\\n\")\n        (source, target) = map(int, input().split(' '))\n        adjacency[source].append(target)\n        adjacency[target].append(source)\n    print('Total number of Connected Components are : ', count_components(adjacency, node_count))"}}, "body": {"calls": ["count_connected_number_of_component.main"], "source_code": ["main()"]}, "main_info": {"main_flag": 1, "main_function": "count_connected_number_of_component.main", "type": "script"}, "is_test": false}