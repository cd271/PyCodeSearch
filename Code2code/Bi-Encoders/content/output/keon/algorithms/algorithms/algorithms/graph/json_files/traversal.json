{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/graph/traversal.py", "fileNameBase": "traversal", "extension": "py", "doc": {"short_description": "Different ways to traverse a graph", "full": "Different ways to traverse a graph"}}, "functions": {"dfs_traverse": {"doc": {"short_description": "Traversal by depth first search."}, "args": ["graph", "start"], "returns": ["visited"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 23}, "calls": ["set", "stack.pop", "visited.add", "stack.append"], "store_vars_calls": {"node": "stack.pop"}, "source_code": "def dfs_traverse(graph, start):\n    \"\"\"\n    Traversal by depth first search.\n    \"\"\"\n    (visited, stack) = (set(), [start])\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            visited.add(node)\n            for next_node in graph[node]:\n                if next_node not in visited:\n                    stack.append(next_node)\n    return visited"}, "bfs_traverse": {"doc": {"short_description": "Traversal by breadth first search."}, "args": ["graph", "start"], "returns": ["visited"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 37}, "calls": ["set", "queue.pop", "visited.add", "queue.append"], "store_vars_calls": {"node": "queue.pop"}, "source_code": "def bfs_traverse(graph, start):\n    \"\"\"\n    Traversal by breadth first search.\n    \"\"\"\n    (visited, queue) = (set(), [start])\n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            visited.add(node)\n            for next_node in graph[node]:\n                if next_node not in visited:\n                    queue.append(next_node)\n    return visited"}, "dfs_traverse_recursive": {"doc": {"short_description": "Traversal by recursive depth first search."}, "args": ["graph", "start", "visited"], "returns": ["visited"], "min_max_lineno": {"min_lineno": 38, "max_lineno": 49}, "calls": ["set.add", "set", "traversal.dfs_traverse_recursive"], "store_vars_calls": {"visited": "set"}, "source_code": "def dfs_traverse_recursive(graph, start, visited=None):\n    \"\"\"\n    Traversal by recursive depth first search.\n    \"\"\"\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    for next_node in graph[start]:\n        if next_node not in visited:\n            dfs_traverse_recursive(graph, next_node, visited)\n    return visited"}}, "is_test": false}