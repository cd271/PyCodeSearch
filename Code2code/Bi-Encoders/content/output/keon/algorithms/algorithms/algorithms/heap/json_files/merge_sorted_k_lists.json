{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/heap/merge_sorted_k_lists.py", "fileNameBase": "merge_sorted_k_lists", "extension": "py", "doc": {"short_description": "Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.", "full": "Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity."}}, "dependencies": [{"from_module": "heapq", "import": "heappop", "type": "external", "type_element": "module"}, {"from_module": "heapq", "import": "heapreplace", "type": "external", "type_element": "module"}, {"from_module": "heapq", "import": "heapify", "type": "external", "type_element": "module"}, {"from_module": "queue", "import": "PriorityQueue", "type": "external", "type_element": "module"}], "classes": {"ListNode": {"doc": {"short_description": "ListNode Class", "full": "ListNode Class"}, "extend": ["object"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 17}, "methods": {"__init__": {"args": ["self", "val"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 17}, "source_code": "def __init__(self, val):\n    self.val = val\n    self.next = None"}}}}, "functions": {"merge_k_lists": {"doc": {"short_description": "Merge List "}, "args": ["lists"], "returns": ["dummy.next"], "min_max_lineno": {"min_lineno": 36, "max_lineno": 50}, "calls": ["queue.PriorityQueue", "queue.PriorityQueue.empty", "queue.PriorityQueue.put", "queue.PriorityQueue.get"], "store_vars_calls": {"dummy": "ListNode", "q": "PriorityQueue"}, "source_code": "def merge_k_lists(lists):\n    \"\"\" Merge List \"\"\"\n    dummy = ListNode(None)\n    curr = dummy\n    q = PriorityQueue()\n    for node in lists:\n        if node:\n            q.put((node.val, node))\n    while not q.empty():\n        curr.next = q.get()[1]\n        curr = curr.next\n        if curr.next:\n            q.put((curr.next.val, curr.next))\n    return dummy.next"}}, "is_test": false}