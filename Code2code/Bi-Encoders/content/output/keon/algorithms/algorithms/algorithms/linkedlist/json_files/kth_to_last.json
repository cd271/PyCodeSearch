{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/linkedlist/kth_to_last.py", "fileNameBase": "kth_to_last", "extension": "py"}, "classes": {"Node": {"min_max_lineno": {"min_lineno": 1, "max_lineno": 5}, "methods": {"__init__": {"args": ["self", "val"], "min_max_lineno": {"min_lineno": 2, "max_lineno": 5}, "source_code": "def __init__(self, val=None):\n    self.val = val\n    self.next = None"}}}}, "functions": {"kth_to_last_eval": {"doc": {"long_description": "safe for user input. We guard against danger by ensuring k in an int", "short_description": "This is a suboptimal, hacky method using eval(), which is not"}, "args": ["head", "k"], "returns": ["False", "False", "head"], "min_max_lineno": {"min_lineno": 7, "max_lineno": 25}, "calls": ["str", "isinstance", "eval", "range"], "store_vars_calls": {"seeker": "str"}, "source_code": "def kth_to_last_eval(head, k):\n    \"\"\"\n    This is a suboptimal, hacky method using eval(), which is not\n     safe for user input. We guard against danger by ensuring k in an int\n    \"\"\"\n    if not isinstance(k, int) or not head.val:\n        return False\n    nexts = '.'.join(['next' for n in range(1, k + 1)])\n    seeker = str('.'.join(['head', nexts]))\n    while head:\n        if eval(seeker) is None:\n            return head\n        else:\n            head = head.next\n    return False"}, "kth_to_last_dict": {"doc": {"long_description": "Then we check it for the value we need. If the key is not in the dict,\nour and statement will short circuit and return False", "short_description": "This is a brute force method where we keep a dict the size of the list"}, "args": ["head", "k"], "returns": ["len(d) - k in d and d[len(d) - k]", "False"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 42}, "calls": ["dict", "len"], "store_vars_calls": {"d": "dict"}, "source_code": "def kth_to_last_dict(head, k):\n    \"\"\"\n    This is a brute force method where we keep a dict the size of the list\n    Then we check it for the value we need. If the key is not in the dict,\n    our and statement will short circuit and return False\n    \"\"\"\n    if not (head and k > -1):\n        return False\n    d = dict()\n    count = 0\n    while head:\n        d[count] = head\n        head = head.next\n        count += 1\n    return len(d) - k in d and d[len(d) - k]"}, "kth_to_last": {"doc": {"long_description": "We move p1 k steps ahead into the list.\nThen we move p1 and p2 together until p1 hits the end.", "short_description": "This is an optimal method using iteration."}, "args": ["head", "k"], "returns": ["p2", "False"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 63}, "calls": ["range"], "source_code": "def kth_to_last(head, k):\n    \"\"\"\n    This is an optimal method using iteration.\n    We move p1 k steps ahead into the list.\n    Then we move p1 and p2 together until p1 hits the end.\n    \"\"\"\n    if not (head or k > -1):\n        return False\n    p1 = head\n    p2 = head\n    for i in range(1, k + 1):\n        if p1 is None:\n            raise IndexError\n        p1 = p1.next\n    while p1:\n        p1 = p1.next\n        p2 = p2.next\n    return p2"}, "print_linked_list": {"args": ["head"], "min_max_lineno": {"min_lineno": 65, "max_lineno": 72}, "calls": ["print"], "source_code": "def print_linked_list(head):\n    string = ''\n    while head.next:\n        string += head.val + ' -> '\n        head = head.next\n    string += head.val\n    print(string)"}, "test": {"min_max_lineno": {"min_lineno": 74, "max_lineno": 118}, "calls": ["kth_to_last.Node", "kth_to_last.print_linked_list", "kth_to_last.kth_to_last_eval", "kth_to_last.kth_to_last_dict", "kth_to_last.kth_to_last", "print"], "store_vars_calls": {"a1": "Node", "a2": "Node", "b": "Node", "c1": "Node", "d": "Node", "c2": "Node", "f": "Node", "g": "Node", "kth": "kth_to_last"}, "source_code": "def test():\n    a1 = Node('A')\n    a2 = Node('A')\n    b = Node('B')\n    c1 = Node('C')\n    d = Node('D')\n    c2 = Node('C')\n    f = Node('F')\n    g = Node('G')\n    a1.next = a2\n    a2.next = b\n    b.next = c1\n    c1.next = d\n    d.next = c2\n    c2.next = f\n    f.next = g\n    print_linked_list(a1)\n    kth = kth_to_last_eval(a1, 4)\n    try:\n        assert kth.val == 'D'\n    except AssertionError as e:\n        e.args += ('Expecting D, got %s' % kth.val,)\n        raise\n    kth = kth_to_last_dict(a1, 4)\n    try:\n        assert kth.val == 'D'\n    except AssertionError as e:\n        e.args += ('Expecting D, got %s' % kth.val,)\n        raise\n    kth = kth_to_last(a1, 4)\n    try:\n        assert kth.val == 'D'\n    except AssertionError as e:\n        e.args += ('Expecting D, got %s' % kth.val,)\n        raise\n    print('all passed.')"}}, "body": {"calls": ["kth_to_last.test"], "source_code": ["test()"]}, "main_info": {"main_flag": 1, "main_function": "kth_to_last.test", "type": "script"}, "is_test": false}