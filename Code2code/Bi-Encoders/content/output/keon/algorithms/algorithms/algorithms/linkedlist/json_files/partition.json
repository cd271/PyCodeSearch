{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/linkedlist/partition.py", "fileNameBase": "partition", "extension": "py", "doc": {"long_description": "than x come before all nodes greater than or equal to x.  If x is contained\nwithin the list, the values of x only need to be after the elements less than x.\nThe partition element x can appear anywhere in the \"right partition\";\nit does not need to appear between the left and right partitions.\n\n3 -> 5 -> 8 -> 5 -> 10 -> 2 -> 1 [partition=5]\n3 -> 1 -> 2 -> 10 -> 5 -> 5 -> 8\n\nWe assume the values of all linked list nodes are int and that x in an int.", "short_description": "Write code to partition a linked list around a value x, such that all nodes less", "full": "Write code to partition a linked list around a value x, such that all nodes less\nthan x come before all nodes greater than or equal to x.  If x is contained\nwithin the list, the values of x only need to be after the elements less than x.\nThe partition element x can appear anywhere in the \"right partition\";\nit does not need to appear between the left and right partitions.\n\n3 -> 5 -> 8 -> 5 -> 10 -> 2 -> 1 [partition=5]\n3 -> 1 -> 2 -> 10 -> 5 -> 5 -> 8\n\nWe assume the values of all linked list nodes are int and that x in an int."}}, "classes": {"Node": {"min_max_lineno": {"min_lineno": 15, "max_lineno": 19}, "methods": {"__init__": {"args": ["self", "val"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 19}, "calls": ["int"], "store_vars_calls": {"self.val": "int"}, "source_code": "def __init__(self, val=None):\n    self.val = int(val)\n    self.next = None"}}}}, "functions": {"print_linked_list": {"args": ["head"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 28}, "calls": ["str", "print"], "source_code": "def print_linked_list(head):\n    string = ''\n    while head.next:\n        string += str(head.val) + ' -> '\n        head = head.next\n    string += str(head.val)\n    print(string)"}, "partition": {"args": ["head", "x"], "min_max_lineno": {"min_lineno": 30, "max_lineno": 52}, "calls": ["int"], "source_code": "def partition(head, x):\n    left = None\n    right = None\n    prev = None\n    current = head\n    while current:\n        if int(current.val) >= x:\n            if not right:\n                right = current\n        elif not left:\n            left = current\n        else:\n            prev.next = current.next\n            left.next = current\n            left = current\n            left.next = right\n        if prev and prev.next is None:\n            break\n        prev = current\n        current = current.next"}, "test": {"min_max_lineno": {"min_lineno": 54, "max_lineno": 73}, "calls": ["partition.Node", "partition.print_linked_list", "partition.partition"], "store_vars_calls": {"a": "Node", "b": "Node", "c": "Node", "d": "Node", "e": "Node", "f": "Node", "g": "Node"}, "source_code": "def test():\n    a = Node('3')\n    b = Node('5')\n    c = Node('8')\n    d = Node('5')\n    e = Node('10')\n    f = Node('2')\n    g = Node('1')\n    a.next = b\n    b.next = c\n    c.next = d\n    d.next = e\n    e.next = f\n    f.next = g\n    print_linked_list(a)\n    partition(a, 5)\n    print_linked_list(a)"}}, "body": {"calls": ["partition.test"], "source_code": ["test()"]}, "main_info": {"main_flag": 1, "main_function": "partition.test", "type": "script"}, "is_test": false}