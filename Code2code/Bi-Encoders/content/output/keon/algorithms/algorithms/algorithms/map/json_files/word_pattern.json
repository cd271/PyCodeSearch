{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/map/word_pattern.py", "fileNameBase": "word_pattern", "extension": "py", "doc": {"long_description": "Here follow means a full match, such that there is a bijection between a\nletter in pattern and a non-empty word in str.\n\nExample 1:\nInput: pattern = \"abba\", str = \"dog cat cat dog\"\nOutput: true\n\nExample 2:\nInput:pattern = \"abba\", str = \"dog cat cat fish\"\nOutput: false\n\nExample 3:\nInput: pattern = \"aaaa\", str = \"dog cat cat dog\"\nOutput: false\n\nExample 4:\nInput: pattern = \"abba\", str = \"dog dog dog dog\"\nOutput: false\nNotes:\nYou may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.\nReference: https://leetcode.com/problems/word-pattern/description/", "short_description": "Given a pattern and a string str, find if str follows the same pattern.", "full": "Given a pattern and a string str, find if str follows the same pattern.\nHere follow means a full match, such that there is a bijection between a\nletter in pattern and a non-empty word in str.\n\nExample 1:\nInput: pattern = \"abba\", str = \"dog cat cat dog\"\nOutput: true\n\nExample 2:\nInput:pattern = \"abba\", str = \"dog cat cat fish\"\nOutput: false\n\nExample 3:\nInput: pattern = \"aaaa\", str = \"dog cat cat dog\"\nOutput: false\n\nExample 4:\nInput: pattern = \"abba\", str = \"dog dog dog dog\"\nOutput: false\nNotes:\nYou may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.\nReference: https://leetcode.com/problems/word-pattern/description/"}}, "functions": {"word_pattern": {"args": ["pattern", "str"], "returns": ["True", "False", "False", "False"], "min_max_lineno": {"min_lineno": 25, "max_lineno": 41}, "calls": ["set", "str.split", "range", "len", "set.add"], "store_vars_calls": {"set_value": "set", "list_str": "str.split"}, "source_code": "def word_pattern(pattern, str):\n    dict = {}\n    set_value = set()\n    list_str = str.split()\n    if len(list_str) != len(pattern):\n        return False\n    for i in range(len(pattern)):\n        if pattern[i] not in dict:\n            if list_str[i] in set_value:\n                return False\n            dict[pattern[i]] = list_str[i]\n            set_value.add(list_str[i])\n        elif dict[pattern[i]] != list_str[i]:\n            return False\n    return True"}}, "is_test": false}