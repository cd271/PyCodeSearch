{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/maths/combination.py", "fileNameBase": "combination", "extension": "py", "doc": {"short_description": "Functions to calculate nCr (ie how many ways to choose r items from n items)", "full": "Functions to calculate nCr (ie how many ways to choose r items from n items)"}}, "functions": {"combination": {"doc": {"short_description": "This function calculates nCr."}, "args": ["n", "r"], "returns": ["combination(n - 1, r - 1) + combination(n - 1, r)", "1"], "min_max_lineno": {"min_lineno": 4, "max_lineno": 9}, "calls": ["combination.combination"], "source_code": "def combination(n, r):\n    \"\"\"This function calculates nCr.\"\"\"\n    if n == r or r == 0:\n        return 1\n    return combination(n - 1, r - 1) + combination(n - 1, r)"}, "combination_memo": {"doc": {"short_description": "This function calculates nCr using memoization method."}, "args": ["n", "r"], "returns": ["recur(n, r)", "memo[n, r]", "1"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 20}, "calls": ["combination.combination_memo.recur"], "functions": {"recur": {"args": ["n", "r"], "returns": ["memo[n, r]", "1"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 19}, "calls": ["recur"], "source_code": "def recur(n, r):\n    if n == r or r == 0:\n        return 1\n    if (n, r) not in memo:\n        memo[n, r] = recur(n - 1, r - 1) + recur(n - 1, r)\n    return memo[n, r]"}}, "source_code": "def combination_memo(n, r):\n    \"\"\"This function calculates nCr using memoization method.\"\"\"\n    memo = {}\n\n    def recur(n, r):\n        if n == r or r == 0:\n            return 1\n        if (n, r) not in memo:\n            memo[n, r] = recur(n - 1, r - 1) + recur(n - 1, r)\n        return memo[n, r]\n    return recur(n, r)"}}, "is_test": false}