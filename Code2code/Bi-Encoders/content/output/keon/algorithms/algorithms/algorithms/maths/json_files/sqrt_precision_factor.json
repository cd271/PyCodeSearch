{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/maths/sqrt_precision_factor.py", "fileNameBase": "sqrt_precision_factor", "extension": "py", "doc": {"long_description": "it produces an output\nwith a maximum error P from the actual square root of N.\n\nExample:\nGiven N = 5 and P = 0.001, can produce output x such that\n2.235 < x < 2.237. Actual square root of 5 being 2.236.", "short_description": "Given a positive integer N and a precision factor P,", "full": "Given a positive integer N and a precision factor P,\nit produces an output\nwith a maximum error P from the actual square root of N.\n\nExample:\nGiven N = 5 and P = 0.001, can produce output x such that\n2.235 < x < 2.237. Actual square root of 5 being 2.236."}}, "functions": {"square_root": {"doc": {"short_description": "Return square root of n, with maximum absolute error epsilon"}, "args": ["n", "epsilon"], "returns": ["guess"], "min_max_lineno": {"min_lineno": 12, "max_lineno": 20}, "calls": ["abs"], "source_code": "def square_root(n, epsilon=0.001):\n    \"\"\"Return square root of n, with maximum absolute error epsilon\"\"\"\n    guess = n / 2\n    while abs(guess * guess - n) > epsilon:\n        guess = (guess + n / guess) / 2\n    return guess"}}, "is_test": false}