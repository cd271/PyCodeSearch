{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/matrix/multiply.py", "fileNameBase": "multiply", "extension": "py", "doc": {"long_description": "and return their product\nSpace complexity: O(n^2)\nPossible edge case: the number of columns of multiplicand not consistent with\nthe number of rows of multiplier, will raise exception", "short_description": "This algorithm takes two compatible two dimensional matrix", "full": "This algorithm takes two compatible two dimensional matrix\nand return their product\nSpace complexity: O(n^2)\nPossible edge case: the number of columns of multiplicand not consistent with\nthe number of rows of multiplier, will raise exception"}}, "functions": {"multiply": {"args": ["multiplicand", "multiplier"], "annotated_arg_types": {"multiplicand": "list", "multiplier": "list"}, "annotated_return_type": "list", "returns": ["result"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 29}, "calls": ["range", "len", "Exception"], "source_code": "def multiply(multiplicand: list, multiplier: list) -> list:\n    \"\"\"\n    :type A: List[List[int]]\n    :type B: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    (multiplicand_row, multiplicand_col) = (len(multiplicand), len(multiplicand[0]))\n    (multiplier_row, multiplier_col) = (len(multiplier), len(multiplier[0]))\n    if multiplicand_col != multiplier_row:\n        raise Exception('Multiplicand matrix not compatible with Multiplier matrix.')\n    result = [[0] * multiplier_col for i in range(multiplicand_row)]\n    for i in range(multiplicand_row):\n        for j in range(multiplier_col):\n            for k in range(len(multiplier)):\n                result[i][j] += multiplicand[i][k] * multiplier[k][j]\n    return result"}}, "is_test": false}