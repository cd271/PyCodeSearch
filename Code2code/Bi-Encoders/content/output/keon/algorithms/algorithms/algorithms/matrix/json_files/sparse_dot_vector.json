{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/matrix/sparse_dot_vector.py", "fileNameBase": "sparse_dot_vector", "extension": "py", "doc": {"long_description": "zeros and double .\n\nfind a data structure to store them\nget the dot product of them", "short_description": "Suppose we have very large sparse vectors, which contains a lot of", "full": "Suppose we have very large sparse vectors, which contains a lot of\nzeros and double .\n\nfind a data structure to store them\nget the dot product of them"}}, "functions": {"vector_to_index_value_list": {"args": ["vector"], "returns": ["[(i, v) for (i, v) in enumerate(vector) if v != 0.0]"], "min_max_lineno": {"min_lineno": 12, "max_lineno": 14}, "calls": ["enumerate"], "source_code": "def vector_to_index_value_list(vector):\n    return [(i, v) for (i, v) in enumerate(vector) if v != 0.0]"}, "dot_product": {"args": ["iv_list1", "iv_list2"], "returns": ["product"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 36}, "calls": ["len"], "source_code": "def dot_product(iv_list1, iv_list2):\n    product = 0\n    p1 = len(iv_list1) - 1\n    p2 = len(iv_list2) - 1\n    while p1 >= 0 and p2 >= 0:\n        (i1, v1) = iv_list1[p1]\n        (i2, v2) = iv_list2[p2]\n        if i1 < i2:\n            p1 -= 1\n        elif i2 < i1:\n            p2 -= 1\n        else:\n            product += v1 * v2\n            p1 -= 1\n            p2 -= 1\n    return product"}, "__test_simple": {"min_max_lineno": {"min_lineno": 38, "max_lineno": 41}, "calls": ["print", "sparse_dot_vector.dot_product", "sparse_dot_vector.vector_to_index_value_list"], "source_code": "def __test_simple():\n    print(dot_product(vector_to_index_value_list([1.0, 2.0, 3.0]), vector_to_index_value_list([0.0, 2.0, 2.0])))"}, "__test_time": {"returns": ["vector"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 68}, "calls": ["time.time", "range", "print", "random.sample", "sparse_dot_vector.__test_time.random_vector"], "store_vars_calls": {"time_start": "time.time", "time_end": "time.time"}, "functions": {"random_vector": {"returns": ["vector"], "min_max_lineno": {"min_lineno": 49, "max_lineno": 55}, "calls": ["random.sample", "range", "random.random"], "source_code": "def random_vector():\n    import random\n    vector = [0 for _ in range(vector_length)]\n    for i in random.sample(range(vector_length), nozero_counut):\n        vector[i] = random.random()\n    return vector"}}, "source_code": "def __test_time():\n    vector_length = 1024\n    vector_count = 1024\n    nozero_counut = 10\n\n    def random_vector():\n        import random\n        vector = [0 for _ in range(vector_length)]\n        for i in random.sample(range(vector_length), nozero_counut):\n            vector[i] = random.random()\n        return vector\n    vectors = [random_vector() for _ in range(vector_count)]\n    iv_lists = [vector_to_index_value_list(vector) for vector in vectors]\n    import time\n    time_start = time.time()\n    for i in range(vector_count):\n        for j in range(i):\n            dot_product(iv_lists[i], iv_lists[j])\n    time_end = time.time()\n    print(time_end - time_start, 'seconds')"}}, "body": {"calls": ["sparse_dot_vector.__test_simple", "sparse_dot_vector.__test_time"], "source_code": ["__test_simple()", "__test_time()"]}, "main_info": {"main_flag": 1, "main_function": "sparse_dot_vector.__test_simple", "type": "script"}, "is_test": false}