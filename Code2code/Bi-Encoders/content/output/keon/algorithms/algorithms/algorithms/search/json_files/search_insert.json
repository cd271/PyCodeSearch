{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/search/search_insert.py", "fileNameBase": "search_insert", "extension": "py", "doc": {"short_description": "Helper methods for implementing insertion sort.", "full": "Helper methods for implementing insertion sort."}}, "functions": {"search_insert": {"doc": {"long_description": "found. If not, return the index where it would be if it were inserted in order.\n\nFor example:\n[1,3,5,6], 5 -> 2\n[1,3,5,6], 2 -> 1\n[1,3,5,6], 7 -> 4\n[1,3,5,6], 0 -> 0", "short_description": "Given a sorted array and a target value, return the index if the target is"}, "args": ["array", "val"], "returns": ["low"], "min_max_lineno": {"min_lineno": 5, "max_lineno": 25}, "calls": ["len"], "source_code": "def search_insert(array, val):\n    \"\"\"\n    Given a sorted array and a target value, return the index if the target is\n    found. If not, return the index where it would be if it were inserted in order.\n\n    For example:\n    [1,3,5,6], 5 -> 2\n    [1,3,5,6], 2 -> 1\n    [1,3,5,6], 7 -> 4\n    [1,3,5,6], 0 -> 0\n    \"\"\"\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if val > array[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low"}}, "is_test": false}