{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/set/find_keyboard_row.py", "fileNameBase": "find_keyboard_row", "extension": "py", "doc": {"long_description": "alphabet on only one row's of American keyboard.\n\nFor example:\nInput: [\"Hello\", \"Alaska\", \"Dad\", \"Peace\"]\nOutput: [\"Alaska\", \"Dad\"]\n\nReference: https://leetcode.com/problems/keyboard-row/description/", "short_description": "Given a List of words, return the words that can be typed using letters of", "full": "Given a List of words, return the words that can be typed using letters of\nalphabet on only one row's of American keyboard.\n\nFor example:\nInput: [\"Hello\", \"Alaska\", \"Dad\", \"Peace\"]\nOutput: [\"Alaska\", \"Dad\"]\n\nReference: https://leetcode.com/problems/keyboard-row/description/"}}, "functions": {"find_keyboard_row": {"args": ["words"], "returns": ["result"], "min_max_lineno": {"min_lineno": 12, "max_lineno": 28}, "calls": ["set", "set().issubset", "result.append", "word.lower"], "source_code": "def find_keyboard_row(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: List[str]\n    \"\"\"\n    keyboard = [set('qwertyuiop'), set('asdfghjkl'), set('zxcvbnm')]\n    result = []\n    for word in words:\n        for key in keyboard:\n            if set(word.lower()).issubset(key):\n                result.append(word)\n    return result"}}, "is_test": false}