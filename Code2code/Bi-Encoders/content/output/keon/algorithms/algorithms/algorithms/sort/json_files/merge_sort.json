{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/sort/merge_sort.py", "fileNameBase": "merge_sort", "extension": "py"}, "functions": {"merge_sort": {"doc": {"long_description": "Complexity: O(n log(n))", "short_description": "Merge Sort"}, "args": ["arr"], "returns": ["arr", "arr"], "min_max_lineno": {"min_lineno": 1, "max_lineno": 16}, "calls": ["merge_sort.merge", "len", "merge_sort.merge_sort"], "source_code": "def merge_sort(arr):\n    \"\"\" Merge Sort\n        Complexity: O(n log(n))\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    (left, right) = (merge_sort(arr[:mid]), merge_sort(arr[mid:]))\n    merge(left, right, arr)\n    return arr"}, "merge": {"doc": {"long_description": "Complexity: O(n)", "short_description": "Merge helper"}, "args": ["left", "right", "merged"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 38}, "calls": ["range", "len"], "source_code": "def merge(left, right, merged):\n    \"\"\" Merge helper\n        Complexity: O(n)\n    \"\"\"\n    (left_cursor, right_cursor) = (0, 0)\n    while left_cursor < len(left) and right_cursor < len(right):\n        if left[left_cursor] <= right[right_cursor]:\n            merged[left_cursor + right_cursor] = left[left_cursor]\n            left_cursor += 1\n        else:\n            merged[left_cursor + right_cursor] = right[right_cursor]\n            right_cursor += 1\n    for left_cursor in range(left_cursor, len(left)):\n        merged[left_cursor + right_cursor] = left[left_cursor]\n    for right_cursor in range(right_cursor, len(right)):\n        merged[left_cursor + right_cursor] = right[right_cursor]"}}, "is_test": false}