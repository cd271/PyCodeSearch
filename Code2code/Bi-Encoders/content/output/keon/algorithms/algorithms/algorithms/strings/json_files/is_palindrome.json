{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/strings/is_palindrome.py", "fileNameBase": "is_palindrome", "extension": "py", "doc": {"long_description": "considering only alphanumeric characters and ignoring cases.\nFor example,\n\"A man, a plan, a canal: Panama\" is a palindrome.\n\"race a car\" is not a palindrome.\nNote:\nHave you consider that the string might be empty?\nThis is a good question to ask during an interview.\nFor the purpose of this problem,\nwe define empty string as valid palindrome.", "short_description": "Given a string, determine if it is a palindrome,", "full": "Given a string, determine if it is a palindrome,\nconsidering only alphanumeric characters and ignoring cases.\nFor example,\n\"A man, a plan, a canal: Panama\" is a palindrome.\n\"race a car\" is not a palindrome.\nNote:\nHave you consider that the string might be empty?\nThis is a good question to ask during an interview.\nFor the purpose of this problem,\nwe define empty string as valid palindrome."}}, "dependencies": [{"from_module": "string", "import": "ascii_letters", "type": "external", "type_element": "module"}, {"from_module": "collections", "import": "deque", "type": "external", "type_element": "module"}], "functions": {"is_palindrome": {"args": ["s"], "returns": ["True", "False"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 33}, "calls": ["len", "s[].isalnum", "s[].lower"], "source_code": "def is_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        while not s[i].isalnum():\n            i += 1\n        while not s[j].isalnum():\n            j -= 1\n        if s[i].lower() != s[j].lower():\n            return False\n        (i, j) = (i + 1, j - 1)\n    return True"}, "remove_punctuation": {"doc": {"short_description": "Remove punctuation, case sensitivity and spaces"}, "args": ["s"], "returns": ["''.join((i.lower() for i in s if i in ascii_letters))"], "min_max_lineno": {"min_lineno": 49, "max_lineno": 54}, "calls": ["i.lower"], "source_code": "def remove_punctuation(s):\n    \"\"\"\n    Remove punctuation, case sensitivity and spaces\n    \"\"\"\n    return ''.join((i.lower() for i in s if i in ascii_letters))"}, "string_reverse": {"args": ["s"], "returns": ["s[::-1]"], "min_max_lineno": {"min_lineno": 56, "max_lineno": 58}, "source_code": "def string_reverse(s):\n    return s[::-1]"}, "is_palindrome_reverse": {"args": ["s"], "returns": ["False", "True"], "min_max_lineno": {"min_lineno": 59, "max_lineno": 66}, "calls": ["is_palindrome.remove_punctuation", "is_palindrome.string_reverse"], "store_vars_calls": {"s": "remove_punctuation"}, "source_code": "def is_palindrome_reverse(s):\n    s = remove_punctuation(s)\n    if s == string_reverse(s):\n        return True\n    return False"}, "is_palindrome_two_pointer": {"args": ["s"], "returns": ["True", "False"], "min_max_lineno": {"min_lineno": 69, "max_lineno": 76}, "calls": ["is_palindrome.remove_punctuation", "range", "len"], "store_vars_calls": {"s": "remove_punctuation"}, "source_code": "def is_palindrome_two_pointer(s):\n    s = remove_punctuation(s)\n    for i in range(0, len(s) // 2):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True"}, "is_palindrome_stack": {"args": ["s"], "returns": ["True", "False"], "min_max_lineno": {"min_lineno": 79, "max_lineno": 89}, "calls": ["is_palindrome.remove_punctuation", "range", "len", "stack.append", "stack.pop"], "store_vars_calls": {"s": "remove_punctuation"}, "source_code": "def is_palindrome_stack(s):\n    stack = []\n    s = remove_punctuation(s)\n    for i in range(len(s) // 2, len(s)):\n        stack.append(s[i])\n    for i in range(0, len(s) // 2):\n        if s[i] != stack.pop():\n            return False\n    return True"}, "is_palindrome_deque": {"args": ["s"], "returns": ["equal"], "min_max_lineno": {"min_lineno": 91, "max_lineno": 106}, "calls": ["is_palindrome.remove_punctuation", "collections.deque", "collections.deque.appendleft", "collections.deque.pop", "collections.deque.popleft", "len"], "store_vars_calls": {"s": "remove_punctuation", "deq": "deque", "first": "deq.pop", "last": "deq.popleft"}, "source_code": "def is_palindrome_deque(s):\n    s = remove_punctuation(s)\n    deq = deque()\n    for char in s:\n        deq.appendleft(char)\n    equal = True\n    while len(deq) > 1 and equal:\n        first = deq.pop()\n        last = deq.popleft()\n        if first != last:\n            equal = False\n    return equal"}}, "is_test": false}