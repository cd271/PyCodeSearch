{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/strings/longest_palindromic_substring.py", "fileNameBase": "longest_palindromic_substring", "extension": "py", "doc": {"long_description": "Example1:\n\n* input: \"dasdasdasdasdasdadsa\"\n* output: \"asdadsa\"\n\nExample2:\n\n* input: \"acdbbdaa\"\n* output: \"dbbd\"\n\nManacher's algorithm", "short_description": "Given string s, find the longest palindromic substring.", "full": "Given string s, find the longest palindromic substring.\n\nExample1:\n\n* input: \"dasdasdasdasdasdadsa\"\n* output: \"asdadsa\"\n\nExample2:\n\n* input: \"acdbbdaa\"\n* output: \"dbbd\"\n\nManacher's algorithm"}}, "functions": {"longest_palindrome": {"args": ["s"], "returns": ["s.replace('#', '')", "s"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 45}, "calls": ["range", "s.replace", "len", "min"], "source_code": "def longest_palindrome(s):\n    if len(s) < 2:\n        return s\n    n_str = '#' + '#'.join(s) + '#'\n    p = [0] * len(n_str)\n    (mx, loc) = (0, 0)\n    (index, maxlen) = (0, 0)\n    for i in range(len(n_str)):\n        if i < mx and 2 * loc - i < len(n_str):\n            p[i] = min(mx - i, p[2 * loc - i])\n        else:\n            p[i] = 1\n        while p[i] + i < len(n_str) and i - p[i] >= 0 and (n_str[i - p[i]] == n_str[i + p[i]]):\n            p[i] += 1\n        if i + p[i] > mx:\n            mx = i + p[i]\n            loc = i\n        if p[i] > maxlen:\n            index = i\n            maxlen = p[i]\n    s = n_str[index - p[index] + 1:index + p[index]]\n    return s.replace('#', '')"}}, "is_test": false}