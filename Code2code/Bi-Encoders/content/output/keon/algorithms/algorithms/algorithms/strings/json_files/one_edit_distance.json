{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/strings/one_edit_distance.py", "fileNameBase": "one_edit_distance", "extension": "py", "doc": {"short_description": "Given two strings S and T, determine if they are both one edit distance apart.", "full": "Given two strings S and T, determine if they are both one edit distance apart."}}, "functions": {"is_one_edit": {"args": ["s", "t"], "returns": ["True", "is_one_edit(t, s)", "False", "s[i + 1:] == t[i + 1:] or s[i:] == t[i + 1:]"], "min_max_lineno": {"min_lineno": 6, "max_lineno": 20}, "calls": ["range", "len", "one_edit_distance.is_one_edit"], "source_code": "def is_one_edit(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: bool\n    \"\"\"\n    if len(s) > len(t):\n        return is_one_edit(t, s)\n    if len(t) - len(s) > 1 or t == s:\n        return False\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            return s[i + 1:] == t[i + 1:] or s[i:] == t[i + 1:]\n    return True"}, "is_one_edit2": {"args": ["s", "t"], "returns": ["s == t or s == t[:-1]", "is_one_edit2(t, s)", "False"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 36}, "calls": ["range", "len", "one_edit_distance.is_one_edit2"], "source_code": "def is_one_edit2(s, t):\n    (l1, l2) = (len(s), len(t))\n    if l1 > l2:\n        return is_one_edit2(t, s)\n    if len(t) - len(s) > 1 or t == s:\n        return False\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            if l1 == l2:\n                s = s[:i] + t[i] + s[i + 1:]\n            else:\n                s = s[:i] + t[i] + s[i:]\n            break\n    return s == t or s == t[:-1]"}}, "is_test": false}