{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/strings/repeat_string.py", "fileNameBase": "repeat_string", "extension": "py", "doc": {"long_description": "For example, with A = \"abcd\" and B = \"cdabcdab\".\n\nReturn 3, because by repeating A three times (\u201cabcdabcdabcd\u201d), B is a substring of it; and B is not a substring of A repeated two times (\"abcdabcd\").\n\nNote:\nThe length of A and B will be between 1 and 10000.\n\nReference: https://leetcode.com/problems/repeated-string-match/description/", "short_description": "Given two strings A and B, find the minimum number of times A has to be repeated such that B is a substring of it. If no such solution, return -1.", "full": "Given two strings A and B, find the minimum number of times A has to be repeated such that B is a substring of it. If no such solution, return -1.\n\nFor example, with A = \"abcd\" and B = \"cdabcdab\".\n\nReturn 3, because by repeating A three times (\u201cabcdabcdabcd\u201d), B is a substring of it; and B is not a substring of A repeated two times (\"abcdabcd\").\n\nNote:\nThe length of A and B will be between 1 and 10000.\n\nReference: https://leetcode.com/problems/repeated-string-match/description/"}}, "functions": {"repeat_string": {"args": ["A", "B"], "returns": ["count"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 25}, "calls": ["len"], "source_code": "def repeat_string(A, B):\n    count = 1\n    tmp = A\n    max_count = len(B) / len(A) + 1\n    while not B in tmp:\n        tmp = tmp + A\n        if count > max_count:\n            count = -1\n            break\n        count = count + 1\n    return count"}}, "is_test": false}