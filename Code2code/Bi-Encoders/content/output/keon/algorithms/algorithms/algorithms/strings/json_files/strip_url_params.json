{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/strings/strip_url_params.py", "fileNameBase": "strip_url_params", "extension": "py", "doc": {"long_description": "Removes any duplicate query string parameters from the url\nRemoves any query string parameters specified within the 2nd argument (optional array)\n\nAn example:\nwww.saadbenn.com?a=1&b=2&a=2') // returns 'www.saadbenn.com?a=1&b=2'", "short_description": "Write a function that does the following:", "full": "Write a function that does the following:\nRemoves any duplicate query string parameters from the url\nRemoves any query string parameters specified within the 2nd argument (optional array)\n\nAn example:\nwww.saadbenn.com?a=1&b=2&a=2') // returns 'www.saadbenn.com?a=1&b=2'"}}, "dependencies": [{"from_module": "collections", "import": "defaultdict", "type": "external", "type_element": "module"}, {"import": "urllib", "type": "external", "type_element": "module"}, {"import": "urllib", "type": "external", "type_element": "module"}], "functions": {"strip_url_params1": {"args": ["url", "params_to_strip"], "returns": ["result", "url"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 69}, "calls": ["url.split", "len", "collections.defaultdict", "char.isdigit", "i.split", "key_value_string.append"], "store_vars_calls": {"tokens": "url.split", "dict": "defaultdict", "_token": "i.split", "length": "len"}, "source_code": "def strip_url_params1(url, params_to_strip=None):\n    if not params_to_strip:\n        params_to_strip = []\n    if url:\n        result = ''\n        tokens = url.split('?')\n        domain = tokens[0]\n        query_string = tokens[-1]\n        result += domain\n        if len(tokens) > 1:\n            result += '?'\n        if not query_string:\n            return url\n        else:\n            key_value_string = []\n            string = ''\n            for char in query_string:\n                if char.isdigit():\n                    key_value_string.append(string + char)\n                    string = ''\n                else:\n                    string += char\n            dict = defaultdict(int)\n            for i in key_value_string:\n                _token = i.split('=')\n                if _token[0]:\n                    length = len(_token[0])\n                    if length == 1:\n                        if _token and (not _token[0] in dict):\n                            if params_to_strip:\n                                if _token[0] != params_to_strip[0]:\n                                    dict[_token[0]] = _token[1]\n                                    result = result + _token[0] + '=' + _token[1]\n                            elif not _token[0] in dict:\n                                dict[_token[0]] = _token[1]\n                                result = result + _token[0] + '=' + _token[1]\n                    else:\n                        check = _token[0]\n                        letter = check[1]\n                        if _token and (not letter in dict):\n                            if params_to_strip:\n                                if letter != params_to_strip[0]:\n                                    dict[letter] = _token[1]\n                                    result = result + _token[0] + '=' + _token[1]\n                            elif not letter in dict:\n                                dict[letter] = _token[1]\n                                result = result + _token[0] + '=' + _token[1]\n    return result"}, "strip_url_params2": {"args": ["url", "param_to_strip"], "returns": ["url.split('?')[0] + '?' + '&'.join(queries)", "url"], "min_max_lineno": {"min_lineno": 71, "max_lineno": 82}, "calls": ["[].split", "range", "len", "[].split.pop", "url.split"], "store_vars_calls": {"queries": "[].split"}, "source_code": "def strip_url_params2(url, param_to_strip=[]):\n    if '?' not in url:\n        return url\n    queries = url.split('?')[1].split('&')\n    queries_obj = [query[0] for query in queries]\n    for i in range(len(queries_obj) - 1, 0, -1):\n        if queries_obj[i] in param_to_strip or queries_obj[i] in queries_obj[0:i]:\n            queries.pop(i)\n    return url.split('?')[0] + '?' + '&'.join(queries)"}, "strip_url_params3": {"args": ["url", "strip"], "returns": ["new.geturl()"], "min_max_lineno": {"min_lineno": 85, "max_lineno": 96}, "calls": ["urllib.parse.urlparse", "urllib.parse.urlparse", "urllib.parse.parse_qs", "urllib.parse.parse_qs", "urllib.parse.urlencode", "urllib.parse.urlencode", "urllib.parse.urlparse._replace", "parse._replace.geturl", "urllib.parse.urlencode.items"], "store_vars_calls": {"parse": "urllib.parse.urlparse", "query": "urllib.parse.urlencode", "new": "parse._replace"}, "source_code": "def strip_url_params3(url, strip=None):\n    if not strip:\n        strip = []\n    parse = urllib.parse.urlparse(url)\n    query = urllib.parse.parse_qs(parse.query)\n    query = {k: v[0] for (k, v) in query.items() if k not in strip}\n    query = urllib.parse.urlencode(query)\n    new = parse._replace(query=query)\n    return new.geturl()"}}, "is_test": false}