{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/strings/text_justification.py", "fileNameBase": "text_justification", "extension": "py", "doc": {"long_description": "has exactly maxWidth characters and is fully (left and right) justified.\n\nYou should pack your words in a greedy approach; that is, pack as many words as\nyou can in each line. Pad extra spaces ' ' when necessary so that each line has\nexactly maxWidth characters.\n\nExtra spaces between words should be distributed as evenly as possible. If the\nnumber of spaces on a line do not divide evenly between words, the empty slots\non the left will be assigned more spaces than the slots on the right.\n\nFor the last line of text, it should be left justified and no extra space is\ninserted between words.\n\nNote:\nA word is defined as a character sequence consisting of non-space characters only.\nEach word's length is guaranteed to be greater than 0 and not exceed maxWidth.\nThe input array words contains at least one word.\n\nExample:\nInput:\nwords = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\nmaxWidth = 16\nOutput:\n[\n  \"What   must   be\",\n  \"acknowledgment  \",\n  \"shall be        \"\n]", "short_description": "Given an array of words and a width maxWidth, format the text such that each line", "full": "Given an array of words and a width maxWidth, format the text such that each line\nhas exactly maxWidth characters and is fully (left and right) justified.\n\nYou should pack your words in a greedy approach; that is, pack as many words as\nyou can in each line. Pad extra spaces ' ' when necessary so that each line has\nexactly maxWidth characters.\n\nExtra spaces between words should be distributed as evenly as possible. If the\nnumber of spaces on a line do not divide evenly between words, the empty slots\non the left will be assigned more spaces than the slots on the right.\n\nFor the last line of text, it should be left justified and no extra space is\ninserted between words.\n\nNote:\nA word is defined as a character sequence consisting of non-space characters only.\nEach word's length is guaranteed to be greater than 0 and not exceed maxWidth.\nThe input array words contains at least one word.\n\nExample:\nInput:\nwords = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\nmaxWidth = 16\nOutput:\n[\n  \"What   must   be\",\n  \"acknowledgment  \",\n  \"shall be        \"\n]"}}, "functions": {"text_justification": {"args": ["words", "max_width"], "returns": ["ret"], "min_max_lineno": {"min_lineno": 34, "max_lineno": 90}, "calls": ["len", "ret.append", "row_words.append", "ValueError", "row_words.pop", "range"], "source_code": "def text_justification(words, max_width):\n    \"\"\"\n    :type words: list\n    :type max_width: int\n    :rtype: list\n    \"\"\"\n    ret = []\n    row_len = 0\n    row_words = []\n    index = 0\n    is_first_word = True\n    while index < len(words):\n        while row_len <= max_width and index < len(words):\n            if len(words[index]) > max_width:\n                raise ValueError('there exists word whose length is larger than max_width')\n            tmp = row_len\n            row_words.append(words[index])\n            tmp += len(words[index])\n            if not is_first_word:\n                tmp += 1\n            if tmp > max_width:\n                row_words.pop()\n                break\n            row_len = tmp\n            index += 1\n            is_first_word = False\n        row = ''\n        if index == len(words):\n            for word in row_words:\n                row += word + ' '\n            row = row[:-1]\n            row += ' ' * (max_width - len(row))\n        elif len(row_words) != 1:\n            space_num = max_width - row_len\n            space_num_of_each_interval = space_num // (len(row_words) - 1)\n            space_num_rest = space_num - space_num_of_each_interval * (len(row_words) - 1)\n            for j in range(len(row_words)):\n                row += row_words[j]\n                if j != len(row_words) - 1:\n                    row += ' ' * (1 + space_num_of_each_interval)\n                if space_num_rest > 0:\n                    row += ' '\n                    space_num_rest -= 1\n        else:\n            row += row_words[0]\n            row += ' ' * (max_width - len(row))\n        ret.append(row)\n        row_len = 0\n        row_words = []\n        is_first_word = True\n    return ret"}}, "is_test": false}