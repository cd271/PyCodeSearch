{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/strings/unique_morse.py", "fileNameBase": "unique_morse", "extension": "py", "doc": {"long_description": "a series of dots and dashes, as follows: \"a\" maps to \".-\", \"b\" maps to \"-...\", \"c\"\nmaps to \"-.-.\", and so on.\n\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\n        'a':\".-\",\n        'b':\"-...\",\n        'c':\"-.-.\",\n        'd': \"-..\",\n        'e':\".\",\n        'f':\"..-.\",\n        'g':\"--.\",\n        'h':\"....\",\n        'i':\"..\",\n        'j':\".---\",\n        'k':\"-.-\",\n        'l':\".-..\",\n        'm':\"--\",\n        'n':\"-.\",\n        'o':\"---\",\n        'p':\".--.\",\n        'q':\"--.-\",\n        'r':\".-.\",\n        's':\"...\",\n        't':\"-\",\n        'u':\"..-\",\n        'v':\"...-\",\n        'w':\".--\",\n        'x':\"-..-\",\n        'y':\"-.--\",\n        'z':\"--..\"\n\nNow, given a list of words, each word can be written as a concatenation of the\nMorse code of each letter. For example, \"cab\" can be written as \"-.-.-....-\",\n(which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We'll call such a\nconcatenation, the transformation of a word.\n\nReturn the number of different transformations among all words we have.\nExample:\nInput: words = [\"gin\", \"zen\", \"gig\", \"msg\"]\nOutput: 2\nExplanation:\nThe transformation of each word is:\n\"gin\" -> \"--...-.\"\n\"zen\" -> \"--...-.\"\n\"gig\" -> \"--...--.\"\n\"msg\" -> \"--...--.\"\n\nThere are 2 different transformations, \"--...-.\" and \"--...--.\".", "short_description": "International Morse Code defines a standard encoding where each letter is mapped to", "full": "International Morse Code defines a standard encoding where each letter is mapped to\na series of dots and dashes, as follows: \"a\" maps to \".-\", \"b\" maps to \"-...\", \"c\"\nmaps to \"-.-.\", and so on.\n\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\n        'a':\".-\",\n        'b':\"-...\",\n        'c':\"-.-.\",\n        'd': \"-..\",\n        'e':\".\",\n        'f':\"..-.\",\n        'g':\"--.\",\n        'h':\"....\",\n        'i':\"..\",\n        'j':\".---\",\n        'k':\"-.-\",\n        'l':\".-..\",\n        'm':\"--\",\n        'n':\"-.\",\n        'o':\"---\",\n        'p':\".--.\",\n        'q':\"--.-\",\n        'r':\".-.\",\n        's':\"...\",\n        't':\"-\",\n        'u':\"..-\",\n        'v':\"...-\",\n        'w':\".--\",\n        'x':\"-..-\",\n        'y':\"-.--\",\n        'z':\"--..\"\n\nNow, given a list of words, each word can be written as a concatenation of the\nMorse code of each letter. For example, \"cab\" can be written as \"-.-.-....-\",\n(which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We'll call such a\nconcatenation, the transformation of a word.\n\nReturn the number of different transformations among all words we have.\nExample:\nInput: words = [\"gin\", \"zen\", \"gig\", \"msg\"]\nOutput: 2\nExplanation:\nThe transformation of each word is:\n\"gin\" -> \"--...-.\"\n\"zen\" -> \"--...-.\"\n\"gig\" -> \"--...--.\"\n\"msg\" -> \"--...--.\"\n\nThere are 2 different transformations, \"--...-.\" and \"--...--.\"."}}, "functions": {"convert_morse_word": {"args": ["word"], "returns": ["morse_word"], "min_max_lineno": {"min_lineno": 81, "max_lineno": 87}, "calls": ["word.lower.lower"], "store_vars_calls": {"word": "word.lower"}, "source_code": "def convert_morse_word(word):\n    morse_word = ''\n    word = word.lower()\n    for char in word:\n        morse_word = morse_word + morse_code[char]\n    return morse_word"}, "unique_morse": {"args": ["words"], "returns": ["len(unique_morse_word)"], "min_max_lineno": {"min_lineno": 88, "max_lineno": 95}, "calls": ["len", "unique_morse.convert_morse_word", "unique_morse_word.append"], "store_vars_calls": {"morse_word": "convert_morse_word"}, "source_code": "def unique_morse(words):\n    unique_morse_word = []\n    for word in words:\n        morse_word = convert_morse_word(word)\n        if morse_word not in unique_morse_word:\n            unique_morse_word.append(morse_word)\n    return len(unique_morse_word)"}}, "is_test": false}