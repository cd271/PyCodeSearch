{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/tree/bst/count_left_node.py", "fileNameBase": "count_left_node", "extension": "py", "doc": {"long_description": "tree. For example: the following tree has four left children (the nodes\nstoring the values 6, 3, 7, and 10):\n\n                    9\n                 /                     6         12\n              / \\       /               3     8   10      15\n                 /                              7                18\n\n    count_left_node = 4", "short_description": "Write a function count_left_node returns the number of left children in the", "full": "Write a function count_left_node returns the number of left children in the\ntree. For example: the following tree has four left children (the nodes\nstoring the values 6, 3, 7, and 10):\n\n                    9\n                 /                     6         12\n              / \\       /               3     8   10      15\n                 /                              7                18\n\n    count_left_node = 4"}}, "dependencies": [{"import": "unittest", "type": "external", "type_element": "module"}, {"from_module": "bst", "import": "Node", "type": "internal", "type_element": "module"}, {"from_module": "bst", "import": "bst", "type": "internal", "type_element": "module"}], "classes": {"TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 59}, "methods": {"setUp": {"args": ["self"], "min_max_lineno": {"min_lineno": 45, "max_lineno": 56}, "calls": ["bst.bst.bst", "count_left_node.TestSuite.tree.insert"], "store_vars_calls": {"self.tree": "bst"}, "source_code": "def setUp(self):\n    self.tree = bst()\n    self.tree.insert(9)\n    self.tree.insert(6)\n    self.tree.insert(12)\n    self.tree.insert(3)\n    self.tree.insert(8)\n    self.tree.insert(10)\n    self.tree.insert(15)\n    self.tree.insert(7)\n    self.tree.insert(18)"}, "test_count_left_node": {"args": ["self"], "min_max_lineno": {"min_lineno": 57, "max_lineno": 59}, "calls": ["count_left_node.TestSuite.assertEqual", "count_left_node.count_left_node"], "source_code": "def test_count_left_node(self):\n    self.assertEqual(4, count_left_node(self.tree.root))"}}}}, "functions": {"count_left_node": {"args": ["root"], "returns": ["0", "count_left_node(root.right)", "1 + count_left_node(root.left) + count_left_node(root.right)"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 28}, "calls": ["count_left_node.count_left_node"], "source_code": "def count_left_node(root):\n    if root is None:\n        return 0\n    elif root.left is None:\n        return count_left_node(root.right)\n    else:\n        return 1 + count_left_node(root.left) + count_left_node(root.right)"}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "count_left_node.unittest.main", "type": "script"}, "is_test": true}