{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/tree/bst/num_empty.py", "fileNameBase": "num_empty", "extension": "py", "doc": {"long_description": "tree. Function should count the total number of empty branches among the nodes\nof the tree. A leaf node has two empty branches. In the case, if root is None,\nit considered as a 1 empty branch\nFor example: the following tree has 10 empty branch (* is empty branch)\n\n                    9 __\n                 /      \\___\n               6            12\n              / \\          /               3     8       10      15\n          /  \\   / \\     /  \\    /            *    * 7   *   *    *  *    18\n               / \\                   /                *   *                 *    *\n\n    empty_branch = 10", "short_description": "Write a function num_empty returns returns the number of empty branches in a", "full": "Write a function num_empty returns returns the number of empty branches in a\ntree. Function should count the total number of empty branches among the nodes\nof the tree. A leaf node has two empty branches. In the case, if root is None,\nit considered as a 1 empty branch\nFor example: the following tree has 10 empty branch (* is empty branch)\n\n                    9 __\n                 /      \\___\n               6            12\n              / \\          /               3     8       10      15\n          /  \\   / \\     /  \\    /            *    * 7   *   *    *  *    18\n               / \\                   /                *   *                 *    *\n\n    empty_branch = 10"}}, "dependencies": [{"import": "unittest", "type": "external", "type_element": "module"}, {"from_module": "bst", "import": "Node", "type": "internal", "type_element": "module"}, {"from_module": "bst", "import": "bst", "type": "internal", "type_element": "module"}], "classes": {"TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 50, "max_lineno": 65}, "methods": {"setUp": {"args": ["self"], "min_max_lineno": {"min_lineno": 51, "max_lineno": 62}, "calls": ["bst.bst.bst", "num_empty.TestSuite.tree.insert"], "store_vars_calls": {"self.tree": "bst"}, "source_code": "def setUp(self):\n    self.tree = bst()\n    self.tree.insert(9)\n    self.tree.insert(6)\n    self.tree.insert(12)\n    self.tree.insert(3)\n    self.tree.insert(8)\n    self.tree.insert(10)\n    self.tree.insert(15)\n    self.tree.insert(7)\n    self.tree.insert(18)"}, "test_num_empty": {"args": ["self"], "min_max_lineno": {"min_lineno": 63, "max_lineno": 65}, "calls": ["num_empty.TestSuite.assertEqual", "num_empty.num_empty"], "source_code": "def test_num_empty(self):\n    self.assertEqual(10, num_empty(self.tree.root))"}}}}, "functions": {"num_empty": {"args": ["root"], "returns": ["1", "1 + num_empty(root.right)", "1 + num_empty(root.left)", "num_empty(root.left) + num_empty(root.right)"], "min_max_lineno": {"min_lineno": 25, "max_lineno": 34}, "calls": ["num_empty.num_empty"], "source_code": "def num_empty(root):\n    if root is None:\n        return 1\n    elif root.left is None and root.right:\n        return 1 + num_empty(root.right)\n    elif root.right is None and root.left:\n        return 1 + num_empty(root.left)\n    else:\n        return num_empty(root.left) + num_empty(root.right)"}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "num_empty.unittest.main", "type": "script"}, "is_test": true}