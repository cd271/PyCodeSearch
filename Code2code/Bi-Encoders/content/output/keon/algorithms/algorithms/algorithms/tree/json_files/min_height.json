{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/tree/min_height.py", "fileNameBase": "min_height", "extension": "py"}, "dependencies": [{"from_module": "tree", "import": "TreeNode", "type": "internal", "type_element": "module"}], "functions": {"min_depth": {"args": ["self", "root"], "returns": ["min(self.minDepth(root.left), self.minDepth(root.right)) + 1", "0", "max(self.minDepth(root.left), self.minDepth(root.right)) + 1"], "min_max_lineno": {"min_lineno": 4, "max_lineno": 14}, "calls": ["min", "max", "min_height..minDepth"], "source_code": "def min_depth(self, root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: int\n    \"\"\"\n    if root is None:\n        return 0\n    if root.left is not None or root.right is not None:\n        return max(self.minDepth(root.left), self.minDepth(root.right)) + 1\n    return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}, "min_height": {"args": ["root"], "returns": ["height", "0", "height"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 34}, "calls": ["new_level.append"], "source_code": "def min_height(root):\n    if root is None:\n        return 0\n    height = 0\n    level = [root]\n    while level:\n        height += 1\n        new_level = []\n        for node in level:\n            if node.left is None and node.right is None:\n                return height\n            if node.left is not None:\n                new_level.append(node.left)\n            if node.right is not None:\n                new_level.append(node.right)\n        level = new_level\n    return height"}, "print_tree": {"args": ["root"], "min_max_lineno": {"min_lineno": 36, "max_lineno": 41}, "calls": ["print", "min_height.print_tree"], "source_code": "def print_tree(root):\n    if root is not None:\n        print(root.val)\n        print_tree(root.left)\n        print_tree(root.right)"}}, "body": {"calls": ["tree.TreeNode", "min_height.min_height", "min_height.print_tree", "print"], "store_vars_calls": {"tree": "TreeNode", "tree.left": "TreeNode", "tree.right": "TreeNode", "tree.left.left": "TreeNode", "tree.left.left.right": "TreeNode", "tree.left.right": "TreeNode", "tree.right.left": "TreeNode", "height": "min_height"}, "source_code": ["TreeNode(10)", "TreeNode(12)", "TreeNode(15)", "TreeNode(25)", "TreeNode(100)", "TreeNode(30)", "TreeNode(36)", "min_height(tree)", "print_tree(tree)", "print('height:', height)"]}, "main_info": {"main_flag": 1, "main_function": "min_height.TreeNode", "type": "script"}, "is_test": false}