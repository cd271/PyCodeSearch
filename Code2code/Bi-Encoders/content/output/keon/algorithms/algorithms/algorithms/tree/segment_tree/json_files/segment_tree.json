{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/tree/segment_tree/segment_tree.py", "fileNameBase": "segment_tree", "extension": "py", "doc": {"long_description": "allowing queries to be done later in log(N) time\nfunction takes 2 values and returns a same type value", "short_description": "Segment_tree creates a segment tree with a given array and function,", "full": "Segment_tree creates a segment tree with a given array and function,\nallowing queries to be done later in log(N) time\nfunction takes 2 values and returns a same type value"}}, "classes": {"SegmentTree": {"min_max_lineno": {"min_lineno": 6, "max_lineno": 38}, "methods": {"__init__": {"args": ["self", "arr", "function"], "min_max_lineno": {"min_lineno": 7, "max_lineno": 12}, "calls": ["segment_tree.SegmentTree.make_tree", "range", "len"], "source_code": "def __init__(self, arr, function):\n    self.segment = [0 for x in range(3 * len(arr) + 3)]\n    self.arr = arr\n    self.fn = function\n    self.make_tree(0, 0, len(arr) - 1)"}, "make_tree": {"args": ["self", "i", "l", "r"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 20}, "calls": ["segment_tree.SegmentTree.make_tree", "segment_tree.SegmentTree.fn", "int"], "source_code": "def make_tree(self, i, l, r):\n    if l == r:\n        self.segment[i] = self.arr[l]\n    elif l < r:\n        self.make_tree(2 * i + 1, l, int((l + r) / 2))\n        self.make_tree(2 * i + 2, int((l + r) / 2) + 1, r)\n        self.segment[i] = self.fn(self.segment[2 * i + 1], self.segment[2 * i + 2])"}, "__query": {"args": ["self", "i", "L", "R", "l", "r"], "returns": ["val2", "None", "self.segment[i]", "val1", "self.fn(val1, val2)"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 34}, "calls": ["segment_tree.SegmentTree.__query", "print", "int", "segment_tree.SegmentTree.fn"], "store_vars_calls": {"val1": "self.__query", "val2": "self.__query"}, "source_code": "def __query(self, i, L, R, l, r):\n    if l > R or r < L or L > R or (l > r):\n        return None\n    if L >= l and R <= r:\n        return self.segment[i]\n    val1 = self.__query(2 * i + 1, L, int((L + R) / 2), l, r)\n    val2 = self.__query(2 * i + 2, int((L + R + 2) / 2), R, l, r)\n    print(L, R, ' returned ', val1, val2)\n    if val1 != None:\n        if val2 != None:\n            return self.fn(val1, val2)\n        return val1\n    return val2"}, "query": {"args": ["self", "L", "R"], "returns": ["self.__query(0, 0, len(self.arr) - 1, L, R)"], "min_max_lineno": {"min_lineno": 36, "max_lineno": 38}, "calls": ["segment_tree.SegmentTree.__query", "len"], "source_code": "def query(self, L, R):\n    return self.__query(0, 0, len(self.arr) - 1, L, R)"}}}}, "is_test": false}