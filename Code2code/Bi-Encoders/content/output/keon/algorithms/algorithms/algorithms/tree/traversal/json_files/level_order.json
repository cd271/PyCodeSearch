{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/tree/traversal/level_order.py", "fileNameBase": "level_order", "extension": "py", "doc": {"long_description": "its nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   /   9  20\n    /     15   7\nreturn its level order traversal as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]", "short_description": "Given a binary tree, return the level order traversal of", "full": "Given a binary tree, return the level order traversal of\nits nodes' values. (ie, from left to right, level by level).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   /   9  20\n    /     15   7\nreturn its level order traversal as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]"}}, "functions": {"level_order": {"args": ["root"], "returns": ["ans", "ans"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 38}, "calls": ["ans.append", "current.append", "new_level.append"], "source_code": "def level_order(root):\n    ans = []\n    if not root:\n        return ans\n    level = [root]\n    while level:\n        current = []\n        new_level = []\n        for node in level:\n            current.append(node.val)\n            if node.left:\n                new_level.append(node.left)\n            if node.right:\n                new_level.append(node.right)\n        level = new_level\n        ans.append(current)\n    return ans"}}, "is_test": false}