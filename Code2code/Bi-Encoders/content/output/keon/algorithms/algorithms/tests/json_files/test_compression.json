{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/tests/test_compression.py", "fileNameBase": "test_compression", "extension": "py"}, "dependencies": [{"from_module": "algorithms.compression.huffman_coding", "import": "HuffmanCoding", "type": "external", "type_element": "module"}, {"from_module": "algorithms.compression.rle_compression", "import": "decode_rle", "type": "external", "type_element": "module"}, {"from_module": "algorithms.compression.rle_compression", "import": "encode_rle", "type": "external", "type_element": "module"}, {"from_module": "algorithms.compression.elias", "import": "elias_gamma", "type": "external", "type_element": "module"}, {"from_module": "algorithms.compression.elias", "import": "elias_delta", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestHuffmanCoding": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 8, "max_lineno": 37}, "methods": {"setUpClass": {"args": ["cls"], "min_max_lineno": {"min_lineno": 9, "max_lineno": 14}, "source_code": "@classmethod\ndef setUpClass(cls):\n    cls.file_in_name = 'huffman_coding_in.txt'\n    cls.file_out_bin_name = 'huffman_coding_out.bin'\n    cls.file_out_name = 'huffman_coding_out.txt'"}, "setUp": {"args": ["self"], "min_max_lineno": {"min_lineno": 15, "max_lineno": 21}, "calls": ["random.seed", "open", "range", "file_in.write", "bytes", "random.randrange"], "source_code": "def setUp(self):\n    import random\n    random.seed(1951)\n    with open(self.file_in_name, 'wb') as file_in:\n        for i in range(10000):\n            file_in.write(bytes([random.randrange(0, 256)]))"}, "test_huffman_coding": {"args": ["self"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 31}, "calls": ["algorithms.compression.huffman_coding.HuffmanCoding.encode_file", "algorithms.compression.huffman_coding.HuffmanCoding.decode_file", "open", "file_1.read", "file_2.read", "test_compression.TestHuffmanCoding.assertEqual"], "store_vars_calls": {"content_1": "file_1.read", "content_2": "file_2.read"}, "source_code": "def test_huffman_coding(self):\n    HuffmanCoding.encode_file(self.file_in_name, self.file_out_bin_name)\n    HuffmanCoding.decode_file(self.file_out_bin_name, self.file_out_name)\n    with open(self.file_in_name, 'rb') as file_1, open(self.file_out_name, 'rb') as file_2:\n        content_1 = file_1.read()\n        content_2 = file_2.read()\n        self.assertEqual(content_1, content_2)"}, "tearDown": {"args": ["self"], "min_max_lineno": {"min_lineno": 32, "max_lineno": 37}, "calls": ["os.remove"], "source_code": "def tearDown(self):\n    import os\n    os.remove(self.file_in_name)\n    os.remove(self.file_out_bin_name)\n    os.remove(self.file_out_name)"}}}, "TestRLECompression": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 48}, "methods": {"test_encode_rle": {"args": ["self"], "min_max_lineno": {"min_lineno": 41, "max_lineno": 44}, "calls": ["test_compression.TestRLECompression.assertEqual", "algorithms.compression.rle_compression.encode_rle"], "source_code": "def test_encode_rle(self):\n    self.assertEqual('12W1B12W3B24W1B14W', encode_rle('WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW'))"}, "test_decode_rle": {"args": ["self"], "min_max_lineno": {"min_lineno": 45, "max_lineno": 48}, "calls": ["test_compression.TestRLECompression.assertEqual", "algorithms.compression.rle_compression.decode_rle"], "source_code": "def test_decode_rle(self):\n    self.assertEqual('WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW', decode_rle('12W1B12W3B24W1B14W'))"}}}, "TestEliasCoding": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 50, "max_lineno": 71}, "methods": {"test_elias_gamma": {"args": ["self"], "min_max_lineno": {"min_lineno": 52, "max_lineno": 61}, "calls": ["range", "test_compression.TestEliasCoding.assertEqual", "result.append", "algorithms.compression.elias.elias_gamma"], "source_code": "def test_elias_gamma(self):\n    correct_result = ['0', '00', '100', '101', '11000', '11001', '11010', '11011', '1110000', '1110001', '1110010']\n    result = []\n    for i in range(11):\n        result.append(elias_gamma(i))\n    self.assertEqual(correct_result, result)"}, "test_elias_delta": {"args": ["self"], "min_max_lineno": {"min_lineno": 62, "max_lineno": 71}, "calls": ["range", "test_compression.TestEliasCoding.assertEqual", "result.append", "algorithms.compression.elias.elias_delta"], "source_code": "def test_elias_delta(self):\n    correct_result = ['0', '000', '1000', '1001', '10100', '10101', '10110', '10111', '11000000', '11000001', '11000010']\n    result = []\n    for i in range(11):\n        result.append(elias_delta(i))\n    self.assertEqual(correct_result, result)"}}}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_compression.unittest.main", "type": "script"}, "is_test": true}