{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/tests/test_linkedlist.py", "fileNameBase": "test_linkedlist", "extension": "py"}, "dependencies": [{"import": "unittest", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "reverse_list", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "reverse_list_recursive", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "is_sorted", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "remove_range", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "swap_pairs", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "rotate_right", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "is_cyclic", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "merge_two_list", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "merge_two_list_recur", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "is_palindrome", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "is_palindrome_stack", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "is_palindrome_dict", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "RandomListNode", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "copy_random_pointer_v1", "type": "external", "type_element": "module"}, {"from_module": "algorithms.linkedlist", "import": "copy_random_pointer_v2", "type": "external", "type_element": "module"}], "classes": {"Node": {"extend": ["object"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 20}, "methods": {"__init__": {"args": ["self", "x"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 20}, "source_code": "def __init__(self, x):\n    self.val = x\n    self.next = None"}}}, "TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 33, "max_lineno": 212}, "methods": {"setUp": {"args": ["self"], "min_max_lineno": {"min_lineno": 34, "max_lineno": 46}, "calls": ["test_linkedlist.Node"], "store_vars_calls": {"self.l": "Node", "self.l.next": "Node", "self.l.next.next": "Node", "self.l.next.next.next": "Node", "self.l.next.next.next.next": "Node", "self.l1": "Node", "self.l1.next": "Node", "self.l1.next.next": "Node", "self.l1.next.next.next": "Node"}, "source_code": "def setUp(self):\n    self.l = Node('A')\n    self.l.next = Node('B')\n    self.l.next.next = Node('C')\n    self.l.next.next.next = Node('B')\n    self.l.next.next.next.next = Node('A')\n    self.l1 = Node('A')\n    self.l1.next = Node('B')\n    self.l1.next.next = Node('C')\n    self.l1.next.next.next = Node('B')"}, "test_reverse_list": {"args": ["self"], "min_max_lineno": {"min_lineno": 47, "max_lineno": 58}, "calls": ["test_linkedlist.Node", "test_linkedlist.TestSuite.assertEqual", "test_linkedlist.convert", "algorithms.linkedlist.reverse_list", "algorithms.linkedlist.reverse_list_recursive"], "store_vars_calls": {"head": "Node", "head.next": "Node", "head.next.next": "Node", "head.next.next.next": "Node"}, "source_code": "def test_reverse_list(self):\n    head = Node(1)\n    head.next = Node(2)\n    head.next.next = Node(3)\n    head.next.next.next = Node(4)\n    self.assertEqual([4, 3, 2, 1], convert(reverse_list(head)))\n    head = Node(1)\n    head.next = Node(2)\n    head.next.next = Node(3)\n    head.next.next.next = Node(4)\n    self.assertEqual([4, 3, 2, 1], convert(reverse_list_recursive(head)))"}, "test_is_sorted": {"args": ["self"], "min_max_lineno": {"min_lineno": 59, "max_lineno": 74}, "calls": ["test_linkedlist.Node", "test_linkedlist.TestSuite.assertTrue", "test_linkedlist.TestSuite.assertFalse", "algorithms.linkedlist.is_sorted"], "store_vars_calls": {"head": "Node", "head.next": "Node", "head.next.next": "Node", "head.next.next.next": "Node", "head.next.next.next.next": "Node"}, "source_code": "def test_is_sorted(self):\n    head = Node(-2)\n    head.next = Node(2)\n    head.next.next = Node(2)\n    head.next.next.next = Node(4)\n    head.next.next.next.next = Node(9)\n    self.assertTrue(is_sorted(head))\n    head = Node(1)\n    head.next = Node(2)\n    head.next.next = Node(8)\n    head.next.next.next = Node(4)\n    head.next.next.next.next = Node(6)\n    self.assertFalse(is_sorted(head))"}, "test_remove_range": {"args": ["self"], "min_max_lineno": {"min_lineno": 75, "max_lineno": 101}, "calls": ["test_linkedlist.Node", "test_linkedlist.TestSuite.assertEqual", "test_linkedlist.convert", "algorithms.linkedlist.remove_range"], "store_vars_calls": {"head": "Node", "head.next": "Node", "head.next.next": "Node", "head.next.next.next": "Node", "head.next.next.next.next": "Node"}, "source_code": "def test_remove_range(self):\n    head = Node(0)\n    head.next = Node(1)\n    head.next.next = Node(2)\n    head.next.next.next = Node(3)\n    head.next.next.next.next = Node(4)\n    self.assertEqual([0, 4], convert(remove_range(head, 1, 3)))\n    head = Node(0)\n    head.next = Node(1)\n    head.next.next = Node(2)\n    head.next.next.next = Node(3)\n    head.next.next.next.next = Node(4)\n    self.assertEqual([2, 3, 4], convert(remove_range(head, 0, 1)))\n    head = Node(0)\n    head.next = Node(1)\n    head.next.next = Node(2)\n    head.next.next.next = Node(3)\n    head.next.next.next.next = Node(4)\n    self.assertEqual([], convert(remove_range(head, 0, 7)))"}, "test_swap_in_pairs": {"args": ["self"], "min_max_lineno": {"min_lineno": 102, "max_lineno": 109}, "calls": ["test_linkedlist.Node", "test_linkedlist.TestSuite.assertEqual", "test_linkedlist.convert", "algorithms.linkedlist.swap_pairs"], "store_vars_calls": {"head": "Node", "head.next": "Node", "head.next.next": "Node", "head.next.next.next": "Node"}, "source_code": "def test_swap_in_pairs(self):\n    head = Node(1)\n    head.next = Node(2)\n    head.next.next = Node(3)\n    head.next.next.next = Node(4)\n    self.assertEqual([2, 1, 4, 3], convert(swap_pairs(head)))"}, "test_rotate_right": {"args": ["self"], "min_max_lineno": {"min_lineno": 110, "max_lineno": 119}, "calls": ["test_linkedlist.Node", "test_linkedlist.TestSuite.assertEqual", "test_linkedlist.convert", "algorithms.linkedlist.rotate_right"], "store_vars_calls": {"head": "Node", "head.next": "Node", "head.next.next": "Node", "head.next.next.next": "Node", "head.next.next.next.next": "Node"}, "source_code": "def test_rotate_right(self):\n    head = Node(1)\n    head.next = Node(2)\n    head.next.next = Node(3)\n    head.next.next.next = Node(4)\n    head.next.next.next.next = Node(5)\n    self.assertEqual([4, 5, 1, 2, 3], convert(rotate_right(head, 2)))"}, "test_is_cyclic": {"args": ["self"], "min_max_lineno": {"min_lineno": 120, "max_lineno": 142}, "calls": ["test_linkedlist.Node", "test_linkedlist.TestSuite.assertTrue", "range", "test_linkedlist.TestSuite.assertFalse", "algorithms.linkedlist.is_cyclic"], "store_vars_calls": {"head": "Node", "head.next": "Node", "cyclic_node": "Node", "curr.next": "Node"}, "source_code": "def test_is_cyclic(self):\n    head = Node('A')\n    head.next = Node('B')\n    curr = head.next\n    cyclic_node = Node('C')\n    curr.next = cyclic_node\n    curr = curr.next\n    curr.next = Node('D')\n    curr = curr.next\n    curr.next = Node('E')\n    curr = curr.next\n    curr.next = cyclic_node\n    self.assertTrue(is_cyclic(head))\n    head = Node(1)\n    curr = head\n    for i in range(2, 6):\n        curr.next = Node(i)\n        curr = curr.next\n    self.assertFalse(is_cyclic(head))"}, "test_merge_two_list": {"doc": {"long_description": "Output: 1->1->2->3->4->4", "short_description": "Input: head1:1->2->4, head2: 1->3->4"}, "args": ["self"], "min_max_lineno": {"min_lineno": 143, "max_lineno": 165}, "calls": ["test_linkedlist.Node", "test_linkedlist.TestSuite.assertEqual", "test_linkedlist.convert", "algorithms.linkedlist.merge_two_list", "algorithms.linkedlist.merge_two_list_recur"], "store_vars_calls": {"head1": "Node", "head1.next": "Node", "head1.next.next": "Node", "head2": "Node", "head2.next": "Node", "head2.next.next": "Node"}, "source_code": "def test_merge_two_list(self):\n    \"\"\"\n        Input: head1:1->2->4, head2: 1->3->4\n        Output: 1->1->2->3->4->4\n        \"\"\"\n    head1 = Node(1)\n    head1.next = Node(2)\n    head1.next.next = Node(4)\n    head2 = Node(1)\n    head2.next = Node(3)\n    head2.next.next = Node(4)\n    self.assertEqual([1, 1, 2, 3, 4, 4], convert(merge_two_list(head1, head2)))\n    head1 = Node(1)\n    head1.next = Node(2)\n    head1.next.next = Node(4)\n    head2 = Node(1)\n    head2.next = Node(3)\n    head2.next.next = Node(4)\n    self.assertEqual([1, 1, 2, 3, 4, 4], convert(merge_two_list_recur(head1, head2)))"}, "test_is_palindrome": {"args": ["self"], "min_max_lineno": {"min_lineno": 166, "max_lineno": 169}, "calls": ["test_linkedlist.TestSuite.assertTrue", "test_linkedlist.TestSuite.assertFalse", "algorithms.linkedlist.is_palindrome"], "source_code": "def test_is_palindrome(self):\n    self.assertTrue(is_palindrome(self.l))\n    self.assertFalse(is_palindrome(self.l1))"}, "test_is_palindrome_stack": {"args": ["self"], "min_max_lineno": {"min_lineno": 170, "max_lineno": 173}, "calls": ["test_linkedlist.TestSuite.assertTrue", "test_linkedlist.TestSuite.assertFalse", "algorithms.linkedlist.is_palindrome_stack"], "source_code": "def test_is_palindrome_stack(self):\n    self.assertTrue(is_palindrome_stack(self.l))\n    self.assertFalse(is_palindrome_stack(self.l1))"}, "test_is_palindrome_dict": {"args": ["self"], "min_max_lineno": {"min_lineno": 174, "max_lineno": 177}, "calls": ["test_linkedlist.TestSuite.assertTrue", "test_linkedlist.TestSuite.assertFalse", "algorithms.linkedlist.is_palindrome_dict"], "source_code": "def test_is_palindrome_dict(self):\n    self.assertTrue(is_palindrome_dict(self.l))\n    self.assertFalse(is_palindrome_dict(self.l1))"}, "test_solution_0": {"args": ["self"], "min_max_lineno": {"min_lineno": 178, "max_lineno": 182}, "calls": ["test_linkedlist.TestSuite._init_random_list_nodes", "algorithms.linkedlist.copy_random_pointer_v1", "test_linkedlist.TestSuite._assert_is_a_copy"], "store_vars_calls": {"result": "copy_random_pointer_v1"}, "source_code": "def test_solution_0(self):\n    self._init_random_list_nodes()\n    result = copy_random_pointer_v1(self.random_list_node1)\n    self._assert_is_a_copy(result)"}, "test_solution_1": {"args": ["self"], "min_max_lineno": {"min_lineno": 183, "max_lineno": 187}, "calls": ["test_linkedlist.TestSuite._init_random_list_nodes", "algorithms.linkedlist.copy_random_pointer_v2", "test_linkedlist.TestSuite._assert_is_a_copy"], "store_vars_calls": {"result": "copy_random_pointer_v2"}, "source_code": "def test_solution_1(self):\n    self._init_random_list_nodes()\n    result = copy_random_pointer_v2(self.random_list_node1)\n    self._assert_is_a_copy(result)"}, "_assert_is_a_copy": {"args": ["self", "result"], "min_max_lineno": {"min_lineno": 188, "max_lineno": 199}, "calls": ["test_linkedlist.TestSuite.assertEqual", "test_linkedlist.TestSuite.assertIsNone"], "source_code": "def _assert_is_a_copy(self, result):\n    self.assertEqual(5, result.next.next.next.next.label)\n    self.assertEqual(4, result.next.next.next.label)\n    self.assertEqual(3, result.next.next.label)\n    self.assertEqual(2, result.next.label)\n    self.assertEqual(1, result.label)\n    self.assertEqual(3, result.next.next.next.next.random.label)\n    self.assertIsNone(result.next.next.next.random)\n    self.assertEqual(2, result.next.next.random.label)\n    self.assertEqual(5, result.next.random.label)\n    self.assertEqual(4, result.random.label)"}, "_init_random_list_nodes": {"args": ["self"], "min_max_lineno": {"min_lineno": 200, "max_lineno": 212}, "calls": ["algorithms.linkedlist.RandomListNode"], "store_vars_calls": {"self.random_list_node1": "RandomListNode", "random_list_node2": "RandomListNode", "random_list_node3": "RandomListNode", "random_list_node4": "RandomListNode", "random_list_node5": "RandomListNode"}, "source_code": "def _init_random_list_nodes(self):\n    self.random_list_node1 = RandomListNode(1)\n    random_list_node2 = RandomListNode(2)\n    random_list_node3 = RandomListNode(3)\n    random_list_node4 = RandomListNode(4)\n    random_list_node5 = RandomListNode(5)\n    (self.random_list_node1.next, self.random_list_node1.random) = (random_list_node2, random_list_node4)\n    (random_list_node2.next, random_list_node2.random) = (random_list_node3, random_list_node5)\n    (random_list_node3.next, random_list_node3.random) = (random_list_node4, random_list_node2)\n    random_list_node4.next = random_list_node5\n    random_list_node5.random = random_list_node3"}}}}, "functions": {"convert": {"args": ["head"], "returns": ["ret"], "min_max_lineno": {"min_lineno": 23, "max_lineno": 31}, "calls": ["ret.append"], "source_code": "def convert(head):\n    ret = []\n    if head:\n        current = head\n        while current:\n            ret.append(current.val)\n            current = current.next\n    return ret"}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_linkedlist.unittest.main", "type": "script"}, "is_test": true}