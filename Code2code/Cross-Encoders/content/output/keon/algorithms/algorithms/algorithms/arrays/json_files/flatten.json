{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/arrays/flatten.py", "fileNameBase": "flatten", "extension": "py", "doc": {"long_description": "Given an array that may contain nested arrays,\nproduce a single resultant array.", "short_description": "Implement Flatten Arrays.", "full": "Implement Flatten Arrays.\nGiven an array that may contain nested arrays,\nproduce a single resultant array."}}, "dependencies": [{"from_module": "collections.abc", "import": "Iterable", "type": "external", "type_element": "module"}], "functions": {"flatten": {"args": ["input_arr", "output_arr"], "returns": ["output_arr"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 19}, "calls": ["isinstance", "flatten.flatten", "output_arr.append"], "source_code": "def flatten(input_arr, output_arr=None):\n    if output_arr is None:\n        output_arr = []\n    for ele in input_arr:\n        if not isinstance(ele, str) and isinstance(ele, Iterable):\n            flatten(ele, output_arr)\n        else:\n            output_arr.append(ele)\n    return output_arr"}, "flatten_iter": {"doc": {"long_description": "returns generator which produces one dimensional output.", "short_description": "Takes as input multi dimensional iterable and"}, "args": ["iterable"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 32}, "calls": ["isinstance", "flatten.flatten_iter"], "source_code": "def flatten_iter(iterable):\n    \"\"\"\n    Takes as input multi dimensional iterable and\n    returns generator which produces one dimensional output.\n    \"\"\"\n    for element in iterable:\n        if not isinstance(element, str) and isinstance(element, Iterable):\n            yield from flatten_iter(element)\n        else:\n            yield element"}}, "is_test": false}