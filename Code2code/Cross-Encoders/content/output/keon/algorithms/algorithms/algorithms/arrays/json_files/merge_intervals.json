{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/arrays/merge_intervals.py", "fileNameBase": "merge_intervals", "extension": "py", "doc": {"long_description": "numbers with the property that any number that lies\nbetween two numbers in the set is also included in the set.", "short_description": "In mathematics, a (real) interval is a set of real", "full": "In mathematics, a (real) interval is a set of real\n numbers with the property that any number that lies\n between two numbers in the set is also included in the set."}}, "classes": {"Interval": {"doc": {"long_description": "numbers are included in the set.\nIncludes related methods to merge and print interval sets.", "short_description": "A set of real numbers with methods to determine if other", "full": "A set of real numbers with methods to determine if other\n numbers are included in the set.\nIncludes related methods to merge and print interval sets."}, "min_max_lineno": {"min_lineno": 8, "max_lineno": 64}, "methods": {"__init__": {"args": ["self", "start", "end"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 17}, "source_code": "def __init__(self, start=0, end=0):\n    self.start = start\n    self.end = end"}, "__repr__": {"args": ["self"], "returns": ["'Interval ({}, {})'.format(self.start, self.end)"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 20}, "source_code": "def __repr__(self):\n    return 'Interval ({}, {})'.format(self.start, self.end)"}, "__iter__": {"args": ["self"], "returns": ["iter(range(self.start, self.end))"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 23}, "calls": ["iter", "range"], "source_code": "def __iter__(self):\n    return iter(range(self.start, self.end))"}, "__getitem__": {"args": ["self", "index"], "returns": ["self.start + index", "self.end + index"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 28}, "source_code": "def __getitem__(self, index):\n    if index < 0:\n        return self.end + index\n    return self.start + index"}, "__len__": {"args": ["self"], "returns": ["self.end - self.start"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 31}, "source_code": "def __len__(self):\n    return self.end - self.start"}, "__contains__": {"args": ["self", "item"], "returns": ["False", "True"], "min_max_lineno": {"min_lineno": 32, "max_lineno": 36}, "source_code": "def __contains__(self, item):\n    if self.start >= item >= self.end:\n        return True\n    return False"}, "__eq__": {"args": ["self", "other"], "returns": ["False", "True"], "min_max_lineno": {"min_lineno": 37, "max_lineno": 41}, "source_code": "def __eq__(self, other):\n    if self.start == other.start and self.end == other.end:\n        return True\n    return False"}, "as_list": {"doc": {"short_description": "Return interval as list. "}, "args": ["self"], "returns": ["list(self)"], "min_max_lineno": {"min_lineno": 42, "max_lineno": 45}, "calls": ["list"], "source_code": "def as_list(self):\n    \"\"\" Return interval as list. \"\"\"\n    return list(self)"}, "merge": {"doc": {"short_description": "Merge two intervals into one. "}, "args": ["intervals"], "returns": ["out"], "min_max_lineno": {"min_lineno": 46, "max_lineno": 56}, "calls": ["sorted", "max"], "store_vars_calls": {"out[].end": "max"}, "source_code": "@staticmethod\ndef merge(intervals):\n    \"\"\" Merge two intervals into one. \"\"\"\n    out = []\n    for i in sorted(intervals, key=lambda i: i.start):\n        if out and i.start <= out[-1].end:\n            out[-1].end = max(out[-1].end, i.end)\n        else:\n            out += (i,)\n    return out"}, "print_intervals": {"doc": {"short_description": "Print out the intervals. "}, "args": ["intervals"], "min_max_lineno": {"min_lineno": 57, "max_lineno": 64}, "calls": ["print", "res.append", "repr"], "source_code": "@staticmethod\ndef print_intervals(intervals):\n    \"\"\" Print out the intervals. \"\"\"\n    res = []\n    for i in intervals:\n        res.append(repr(i))\n    print(''.join(res))"}}}}, "functions": {"merge_intervals": {"doc": {"short_description": "Merge intervals in the form of a list. "}, "args": ["intervals"], "returns": ["out", "None"], "min_max_lineno": {"min_lineno": 66, "max_lineno": 78}, "calls": ["intervals.sort", "intervals.pop", "max", "out.append"], "source_code": "def merge_intervals(intervals):\n    \"\"\" Merge intervals in the form of a list. \"\"\"\n    if intervals is None:\n        return None\n    intervals.sort(key=lambda i: i[0])\n    out = [intervals.pop(0)]\n    for i in intervals:\n        if out[-1][-1] >= i[0]:\n            out[-1][-1] = max(out[-1][-1], i[-1])\n        else:\n            out.append(i)\n    return out"}}, "is_test": false}