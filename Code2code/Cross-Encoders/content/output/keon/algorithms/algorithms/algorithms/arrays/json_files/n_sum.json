{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/arrays/n_sum.py", "fileNameBase": "n_sum", "extension": "py", "doc": {"long_description": "such that a + b + .. + n = target?\n\nFind all unique n-tuplets in the array which gives the sum of target.", "short_description": "Given an array of n integers, are there elements a, b, .. , n in nums", "full": "Given an array of n integers, are there elements a, b, .. , n in nums\nsuch that a + b + .. + n = target?\n\nFind all unique n-tuplets in the array which gives the sum of target.\n\nExample:\n    basic:\n        Given:\n            n = 4\n            nums = [1, 0, -1, 0, -2, 2]\n            target = 0,\n        return [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]\n\n    advanced:\n        Given:\n            n = 2\n            nums = [[-3, 0], [-2, 1], [2, 2], [3, 3], [8, 4], [-9, 5]]\n            target = -5\n            def sum(a, b):\n                return [a[0] + b[1], a[1] + b[0]]\n            def compare(num, target):\n                if num[0] < target:\n                    return -1\n                elif if num[0] > target:\n                    return 1\n                else:\n                    return 0\n        return [[-9, 5], [8, 4]]\n(TL:DR) because -9 + 4 = -5"}}, "functions": {"n_sum": {"doc": {"long_description": "nums: list[object]\ntarget: object\nsum_closure: function, optional\n    Given two elements of nums, return sum of both.\ncompare_closure: function, optional\n    Given one object of nums and target, return -1, 1, or 0.\nsame_closure: function, optional\n    Given two object of nums, return bool.\nreturn: list[list[object]]\n\nNote:\n1. type of sum_closure's return should be same \n   as type of compare_closure's first param", "short_description": "n: int"}, "args": ["n", "nums", "target"], "returns": ["n_sum(n, nums, target)", "a + b", "a == b", "union(results)", "results", "results", "results", "-1", "1", "0"], "min_max_lineno": {"min_lineno": 34, "max_lineno": 141}, "calls": ["kv.get", "nums.sort", "n_sum.n_sum", "n_sum.n_sum.union"], "store_vars_calls": {"sum_closure": "kv.get", "same_closure": "kv.get", "compare_closure": "kv.get", "results": "two_sum", "sum_": "sum_closure", "flag": "compare_closure", "n_minus1_results": "append_elem_to_each_list"}, "functions": {"sum_closure_default": {"args": ["a", "b"], "returns": ["a + b"], "min_max_lineno": {"min_lineno": 52, "max_lineno": 54}, "source_code": "def sum_closure_default(a, b):\n    return a + b"}, "compare_closure_default": {"doc": {"short_description": "above, below, or right on? "}, "args": ["num", "target"], "returns": ["-1", "1", "0"], "min_max_lineno": {"min_lineno": 55, "max_lineno": 63}, "source_code": "def compare_closure_default(num, target):\n    \"\"\" above, below, or right on? \"\"\"\n    if num < target:\n        return -1\n    elif num > target:\n        return 1\n    else:\n        return 0"}, "same_closure_default": {"args": ["a", "b"], "returns": ["a == b"], "min_max_lineno": {"min_lineno": 64, "max_lineno": 66}, "source_code": "def same_closure_default(a, b):\n    return a == b"}, "two_sum": {"args": ["nums", "target"], "returns": ["results"], "min_max_lineno": {"min_lineno": 93, "max_lineno": 116}, "calls": ["nums.sort", "len", "sum_closure", "compare_closure", "results.append", "sorted", "same_closure"], "store_vars_calls": {"sum_": "sum_closure", "flag": "compare_closure"}, "source_code": "def two_sum(nums, target):\n    nums.sort()\n    lt = 0\n    rt = len(nums) - 1\n    results = []\n    while lt < rt:\n        sum_ = sum_closure(nums[lt], nums[rt])\n        flag = compare_closure(sum_, target)\n        if flag == -1:\n            lt += 1\n        elif flag == 1:\n            rt -= 1\n        else:\n            results.append(sorted([nums[lt], nums[rt]]))\n            lt += 1\n            rt -= 1\n            while lt < len(nums) and same_closure(nums[lt - 1], nums[lt]):\n                lt += 1\n            while 0 <= rt and same_closure(nums[rt], nums[rt + 1]):\n                rt -= 1\n    return results"}, "append_elem_to_each_list": {"args": ["elem", "container"], "returns": ["results"], "min_max_lineno": {"min_lineno": 117, "max_lineno": 123}, "calls": ["elems.append", "results.append", "sorted"], "source_code": "def append_elem_to_each_list(elem, container):\n    results = []\n    for elems in container:\n        elems.append(elem)\n        results.append(sorted(elems))\n    return results"}, "union": {"args": ["duplicate_results"], "returns": ["results"], "min_max_lineno": {"min_lineno": 124, "max_lineno": 135}, "calls": ["len", "duplicate_results.sort", "results.append"], "source_code": "def union(duplicate_results):\n    results = []\n    if len(duplicate_results) != 0:\n        duplicate_results.sort()\n        results.append(duplicate_results[0])\n        for result in duplicate_results[1:]:\n            if results[-1] != result:\n                results.append(result)\n    return results"}}, "source_code": "def n_sum(n, nums, target, **kv):\n    \"\"\"\n    n: int\n    nums: list[object]\n    target: object\n    sum_closure: function, optional\n        Given two elements of nums, return sum of both.\n    compare_closure: function, optional\n        Given one object of nums and target, return -1, 1, or 0.\n    same_closure: function, optional\n        Given two object of nums, return bool.\n    return: list[list[object]]\n\n    Note:\n    1. type of sum_closure's return should be same \n       as type of compare_closure's first param\n    \"\"\"\n\n    def sum_closure_default(a, b):\n        return a + b\n\n    def compare_closure_default(num, target):\n        \"\"\" above, below, or right on? \"\"\"\n        if num < target:\n            return -1\n        elif num > target:\n            return 1\n        else:\n            return 0\n\n    def same_closure_default(a, b):\n        return a == b\n\n    def n_sum(n, nums, target):\n        if n == 2:\n            results = two_sum(nums, target)\n        else:\n            results = []\n            prev_num = None\n            for (index, num) in enumerate(nums):\n                if prev_num is not None and same_closure(prev_num, num):\n                    continue\n                prev_num = num\n                n_minus1_results = n_sum(n - 1, nums[index + 1:], target - num)\n                n_minus1_results = append_elem_to_each_list(num, n_minus1_results)\n                results += n_minus1_results\n        return union(results)\n\n    def two_sum(nums, target):\n        nums.sort()\n        lt = 0\n        rt = len(nums) - 1\n        results = []\n        while lt < rt:\n            sum_ = sum_closure(nums[lt], nums[rt])\n            flag = compare_closure(sum_, target)\n            if flag == -1:\n                lt += 1\n            elif flag == 1:\n                rt -= 1\n            else:\n                results.append(sorted([nums[lt], nums[rt]]))\n                lt += 1\n                rt -= 1\n                while lt < len(nums) and same_closure(nums[lt - 1], nums[lt]):\n                    lt += 1\n                while 0 <= rt and same_closure(nums[rt], nums[rt + 1]):\n                    rt -= 1\n        return results\n\n    def append_elem_to_each_list(elem, container):\n        results = []\n        for elems in container:\n            elems.append(elem)\n            results.append(sorted(elems))\n        return results\n\n    def union(duplicate_results):\n        results = []\n        if len(duplicate_results) != 0:\n            duplicate_results.sort()\n            results.append(duplicate_results[0])\n            for result in duplicate_results[1:]:\n                if results[-1] != result:\n                    results.append(result)\n        return results\n    sum_closure = kv.get('sum_closure', sum_closure_default)\n    same_closure = kv.get('same_closure', same_closure_default)\n    compare_closure = kv.get('compare_closure', compare_closure_default)\n    nums.sort()\n    return n_sum(n, nums, target)"}}, "is_test": false}