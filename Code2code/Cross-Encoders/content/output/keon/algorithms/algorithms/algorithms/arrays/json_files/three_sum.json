{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/arrays/three_sum.py", "fileNameBase": "three_sum", "extension": "py", "doc": {"long_description": "a, b, c in S such that a + b + c = 0?\nFind all unique triplets in the array which gives the sum of zero.\n\nNote: The solution set must not contain duplicate triplets.\n\nFor example, given array S = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n{\n  (-1, 0, 1),\n  (-1, -1, 2)\n}", "short_description": "Given an array S of n integers, are there three distinct elements", "full": "Given an array S of n integers, are there three distinct elements\na, b, c in S such that a + b + c = 0?\nFind all unique triplets in the array which gives the sum of zero.\n\nNote: The solution set must not contain duplicate triplets.\n\nFor example, given array S = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n{\n  (-1, 0, 1),\n  (-1, -1, 2)\n}"}}, "functions": {"three_sum": {"doc": {"args": {"array": {"description": "List[int]"}}, "returns": {"description": "Set[ Tuple[int, int, int] ]", "is_generator": false}}, "args": ["array"], "returns": ["res"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 49}, "calls": ["set", "array.sort", "range", "len", "set.add"], "store_vars_calls": {"res": "set"}, "source_code": "def three_sum(array):\n    \"\"\"\n    :param array: List[int]\n    :return: Set[ Tuple[int, int, int] ]\n    \"\"\"\n    res = set()\n    array.sort()\n    for i in range(len(array) - 2):\n        if i > 0 and array[i] == array[i - 1]:\n            continue\n        (l, r) = (i + 1, len(array) - 1)\n        while l < r:\n            s = array[i] + array[l] + array[r]\n            if s > 0:\n                r -= 1\n            elif s < 0:\n                l += 1\n            else:\n                res.add((array[i], array[l], array[r]))\n                while l < r and array[l] == array[l + 1]:\n                    l += 1\n                while l < r and array[r] == array[r - 1]:\n                    r -= 1\n                l += 1\n                r -= 1\n    return res"}}, "is_test": false}