{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/arrays/top_1.py", "fileNameBase": "top_1", "extension": "py", "doc": {"long_description": "Also, sometimes it is possible to have multiple 'most_frequent_value's,\nso this function returns a list. This result can be used to find a \nrepresentative value in an array.\n\nThis algorithm gets an array, makes a dictionary of it,\n finds the most frequent count, and makes the result list.\n\nFor example: top_1([1, 1, 2, 2, 3, 4]) will return [1, 2]\n\n(TL:DR) Get mathematical Mode\nComplexity: O(n)", "short_description": "This algorithm receives an array and returns most_frequent_value", "full": "This algorithm receives an array and returns most_frequent_value\nAlso, sometimes it is possible to have multiple 'most_frequent_value's,\nso this function returns a list. This result can be used to find a \nrepresentative value in an array.\n\nThis algorithm gets an array, makes a dictionary of it,\n finds the most frequent count, and makes the result list.\n\nFor example: top_1([1, 1, 2, 2, 3, 4]) will return [1, 2]\n\n(TL:DR) Get mathematical Mode\nComplexity: O(n)"}}, "functions": {"top_1": {"args": ["arr"], "returns": ["result"], "min_max_lineno": {"min_lineno": 15, "max_lineno": 37}, "calls": ["max", "values.keys", "values.values", "result.append"], "store_vars_calls": {"f_val": "max"}, "source_code": "def top_1(arr):\n    values = {}\n    result = []\n    f_val = 0\n    for i in arr:\n        if i in values:\n            values[i] += 1\n        else:\n            values[i] = 1\n    f_val = max(values.values())\n    for i in values.keys():\n        if values[i] == f_val:\n            result.append(i)\n        else:\n            continue\n    return result"}}, "is_test": false}