{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/backtrack/permute.py", "fileNameBase": "permute", "extension": "py", "doc": {"long_description": "For example,\n[1,2,3] have the following permutations:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]", "short_description": "Given a collection of distinct numbers, return all possible permutations.", "full": "Given a collection of distinct numbers, return all possible permutations.\n\nFor example,\n[1,2,3] have the following permutations:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]"}}, "functions": {"permute": {"doc": {"short_description": "returns a list with the permuations."}, "args": ["elements"], "returns": ["[elements]", "tmp"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 29}, "calls": ["len", "permute.permute", "range", "tmp.append"], "source_code": "def permute(elements):\n    \"\"\"\n        returns a list with the permuations.\n    \"\"\"\n    if len(elements) <= 1:\n        return [elements]\n    else:\n        tmp = []\n        for perm in permute(elements[1:]):\n            for i in range(len(elements)):\n                tmp.append(perm[:i] + elements[0:1] + perm[i:])\n        return tmp"}, "permute_iter": {"doc": {"short_description": "iterator: returns a perumation by each call."}, "args": ["elements"], "min_max_lineno": {"min_lineno": 31, "max_lineno": 41}, "calls": ["len", "permute.permute_iter", "range"], "source_code": "def permute_iter(elements):\n    \"\"\"\n        iterator: returns a perumation by each call.\n    \"\"\"\n    if len(elements) <= 1:\n        yield elements\n    else:\n        for perm in permute_iter(elements[1:]):\n            for i in range(len(elements)):\n                yield (perm[:i] + elements[0:1] + perm[i:])"}, "permute_recursive": {"args": ["nums"], "returns": ["res"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 55}, "calls": ["permute.permute_recursive.dfs"], "functions": {"dfs": {"args": ["res", "nums", "path"], "min_max_lineno": {"min_lineno": 45, "max_lineno": 51}, "calls": ["range", "res.append", "len", "print", "dfs"], "source_code": "def dfs(res, nums, path):\n    if not nums:\n        res.append(path)\n    for i in range(len(nums)):\n        print(nums[:i] + nums[i + 1:])\n        dfs(res, nums[:i] + nums[i + 1:], path + [nums[i]])"}}, "source_code": "def permute_recursive(nums):\n\n    def dfs(res, nums, path):\n        if not nums:\n            res.append(path)\n        for i in range(len(nums)):\n            print(nums[:i] + nums[i + 1:])\n            dfs(res, nums[:i] + nums[i + 1:], path + [nums[i]])\n    res = []\n    dfs(res, nums, [])\n    return res"}}, "is_test": false}