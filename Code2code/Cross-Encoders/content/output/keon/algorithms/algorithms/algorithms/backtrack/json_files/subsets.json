{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/backtrack/subsets.py", "fileNameBase": "subsets", "extension": "py", "doc": {"long_description": "Note: The solution set must not contain duplicate subsets.\n\nFor example,\nIf nums = [1,2,3], a solution is:\n\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]", "short_description": "Given a set of distinct integers, nums, return all possible subsets.", "full": "Given a set of distinct integers, nums, return all possible subsets.\n\nNote: The solution set must not contain duplicate subsets.\n\nFor example,\nIf nums = [1,2,3], a solution is:\n\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]"}}, "functions": {"subsets": {"doc": {"short_description": "O(2**n)"}, "args": ["nums"], "returns": ["res"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 40}, "calls": ["subsets.subsets.backtrack"], "functions": {"backtrack": {"args": ["res", "nums", "stack", "pos"], "min_max_lineno": {"min_lineno": 26, "max_lineno": 36}, "calls": ["len", "res.append", "stack.append", "backtrack", "stack.pop", "list"], "source_code": "def backtrack(res, nums, stack, pos):\n    if pos == len(nums):\n        res.append(list(stack))\n    else:\n        stack.append(nums[pos])\n        backtrack(res, nums, stack, pos + 1)\n        stack.pop()\n        backtrack(res, nums, stack, pos + 1)"}}, "source_code": "def subsets(nums):\n    \"\"\"\n    O(2**n)\n    \"\"\"\n\n    def backtrack(res, nums, stack, pos):\n        if pos == len(nums):\n            res.append(list(stack))\n        else:\n            stack.append(nums[pos])\n            backtrack(res, nums, stack, pos + 1)\n            stack.pop()\n            backtrack(res, nums, stack, pos + 1)\n    res = []\n    backtrack(res, nums, [], 0)\n    return res"}, "subsets_v2": {"args": ["nums"], "returns": ["res"], "min_max_lineno": {"min_lineno": 55, "max_lineno": 60}, "calls": ["sorted"], "source_code": "def subsets_v2(nums):\n    res = [[]]\n    for num in sorted(nums):\n        res += [item + [num] for item in res]\n    return res"}}, "is_test": false}