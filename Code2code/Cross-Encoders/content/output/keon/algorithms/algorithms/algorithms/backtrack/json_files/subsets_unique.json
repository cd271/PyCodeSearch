{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/backtrack/subsets_unique.py", "fileNameBase": "subsets_unique", "extension": "py", "doc": {"long_description": "return all possible subsets.\n\nNote: The solution set must not contain duplicate subsets.\n\nFor example,\nIf nums = [1,2,2], a solution is:\n\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]", "short_description": "Given a collection of integers that might contain duplicates, nums,", "full": "Given a collection of integers that might contain duplicates, nums,\nreturn all possible subsets.\n\nNote: The solution set must not contain duplicate subsets.\n\nFor example,\nIf nums = [1,2,2], a solution is:\n\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]"}}, "functions": {"subsets_unique": {"args": ["nums"], "returns": ["list(res)"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 38}, "calls": ["set", "subsets_unique.subsets_unique.backtrack"], "store_vars_calls": {"res": "set"}, "functions": {"backtrack": {"args": ["res", "nums", "stack", "pos"], "min_max_lineno": {"min_lineno": 23, "max_lineno": 34}, "calls": ["len", "res.add", "stack.append", "backtrack", "stack.pop", "tuple"], "source_code": "def backtrack(res, nums, stack, pos):\n    if pos == len(nums):\n        res.add(tuple(stack))\n    else:\n        stack.append(nums[pos])\n        backtrack(res, nums, stack, pos + 1)\n        stack.pop()\n        backtrack(res, nums, stack, pos + 1)"}}, "source_code": "def subsets_unique(nums):\n\n    def backtrack(res, nums, stack, pos):\n        if pos == len(nums):\n            res.add(tuple(stack))\n        else:\n            stack.append(nums[pos])\n            backtrack(res, nums, stack, pos + 1)\n            stack.pop()\n            backtrack(res, nums, stack, pos + 1)\n    res = set()\n    backtrack(res, nums, [], 0)\n    return list(res)"}}, "is_test": false}