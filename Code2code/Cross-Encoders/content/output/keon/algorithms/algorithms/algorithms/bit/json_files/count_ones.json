{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/bit/count_ones.py", "fileNameBase": "count_ones", "extension": "py", "doc": {"long_description": "returns the number of '1' bits it has\n(also known as the Hamming weight).\n\nFor example, the 32-bit integer '11' has binary\nrepresentation 00000000000000000000000000001011,\nso the function should return 3.\n\nT(n)- O(k)   : k is the number of 1s present in binary representation.\nNOTE: this complexity is better than O(log n).\ne.g. for n = 00010100000000000000000000000000\nonly 2 iterations are required.\n\nNumber of loops is\nequal to the number of 1s in the binary representation.", "short_description": "Write a function that takes an unsigned integer and", "full": "Write a function that takes an unsigned integer and\nreturns the number of '1' bits it has\n(also known as the Hamming weight).\n\nFor example, the 32-bit integer '11' has binary\nrepresentation 00000000000000000000000000001011,\nso the function should return 3.\n\nT(n)- O(k)   : k is the number of 1s present in binary representation.\nNOTE: this complexity is better than O(log n).\ne.g. for n = 00010100000000000000000000000000\nonly 2 iterations are required.\n\nNumber of loops is\nequal to the number of 1s in the binary representation."}}, "functions": {"count_ones_recur": {"doc": {"short_description": "Using Brian Kernighan's Algorithm. (Recursive Approach)"}, "args": ["n"], "returns": ["1 + count_ones_recur(n & n - 1)", "0"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 23}, "calls": ["count_ones.count_ones_recur"], "source_code": "def count_ones_recur(n):\n    \"\"\"Using Brian Kernighan's Algorithm. (Recursive Approach)\"\"\"\n    if not n:\n        return 0\n    return 1 + count_ones_recur(n & n - 1)"}, "count_ones_iter": {"doc": {"short_description": "Using Brian Kernighan's Algorithm. (Iterative Approach)"}, "args": ["n"], "returns": ["count"], "min_max_lineno": {"min_lineno": 25, "max_lineno": 33}, "source_code": "def count_ones_iter(n):\n    \"\"\"Using Brian Kernighan's Algorithm. (Iterative Approach)\"\"\"\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count"}}, "is_test": false}