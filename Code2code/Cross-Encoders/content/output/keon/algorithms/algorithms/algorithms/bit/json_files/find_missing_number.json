{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/bit/find_missing_number.py", "fileNameBase": "find_missing_number", "extension": "py", "doc": {"long_description": "in range [0..n] in O(n) time and space. The difference between\nconsecutive integers cannot be more than 1. If the sequence is\nalready complete, the next integer in the sequence will be returned.\n\nFor example:\nInput: nums = [4, 1, 3, 0, 6, 5, 2]\nOutput: 7", "short_description": "Returns the missing number from a sequence of unique integers", "full": "Returns the missing number from a sequence of unique integers\nin range [0..n] in O(n) time and space. The difference between\nconsecutive integers cannot be more than 1. If the sequence is\nalready complete, the next integer in the sequence will be returned.\n\nFor example:\nInput: nums = [4, 1, 3, 0, 6, 5, 2]\nOutput: 7"}}, "functions": {"find_missing_number": {"args": ["nums"], "returns": ["missing"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 19}, "calls": ["enumerate"], "source_code": "def find_missing_number(nums):\n    missing = 0\n    for (i, num) in enumerate(nums):\n        missing ^= num\n        missing ^= i + 1\n    return missing"}, "find_missing_number2": {"args": ["nums"], "returns": ["missing"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 28}, "calls": ["sum", "len"], "store_vars_calls": {"num_sum": "sum", "n": "len"}, "source_code": "def find_missing_number2(nums):\n    num_sum = sum(nums)\n    n = len(nums)\n    total_sum = n * (n + 1) // 2\n    missing = total_sum - num_sum\n    return missing"}}, "is_test": false}