{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/dp/combination_sum.py", "fileNameBase": "combination_sum", "extension": "py", "doc": {"long_description": "find the number of possible combinations that\nadd up to a positive integer target.\n\nExample:\n\nnums = [1, 2, 3]\ntarget = 4\n\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n\nNote that different sequences are counted as different combinations.\n\nTherefore the output is 7.\nFollow up:\nWhat if negative numbers are allowed in the given array?\nHow does it change the problem?\nWhat limitation we need to add to the question to allow negative numbers?", "short_description": "Given an integer array with all positive numbers and no duplicates,", "full": "Given an integer array with all positive numbers and no duplicates,\nfind the number of possible combinations that\nadd up to a positive integer target.\n\nExample:\n\nnums = [1, 2, 3]\ntarget = 4\n\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n\nNote that different sequences are counted as different combinations.\n\nTherefore the output is 7.\nFollow up:\nWhat if negative numbers are allowed in the given array?\nHow does it change the problem?\nWhat limitation we need to add to the question to allow negative numbers?"}}, "functions": {"helper_topdown": {"doc": {"long_description": "Keyword arguments:\nnums -- positive integer array without duplicates\ntarget -- integer describing what a valid combination should add to", "short_description": "Generates DP and finds result."}, "args": ["nums", "target"], "returns": ["res", "DP[target]"], "min_max_lineno": {"min_lineno": 32, "max_lineno": 47}, "calls": ["combination_sum.helper_topdown"], "source_code": "def helper_topdown(nums, target):\n    \"\"\"Generates DP and finds result.\n\n    Keyword arguments:\n    nums -- positive integer array without duplicates\n    target -- integer describing what a valid combination should add to\n    \"\"\"\n    if DP[target] != -1:\n        return DP[target]\n    res = 0\n    for num in nums:\n        if target >= num:\n            res += helper_topdown(nums, target - num)\n    DP[target] = res\n    return res"}, "combination_sum_topdown": {"doc": {"long_description": "Keyword arguments:\nnums -- positive integer array without duplicates\ntarget -- integer describing what a valid combination should add to", "short_description": "Find number of possible combinations in nums that add up to target, in top-down manner."}, "args": ["nums", "target"], "returns": ["helper_topdown(nums, target)"], "min_max_lineno": {"min_lineno": 49, "max_lineno": 60}, "calls": ["combination_sum.helper_topdown"], "source_code": "def combination_sum_topdown(nums, target):\n    \"\"\"Find number of possible combinations in nums that add up to target, in top-down manner.\n\n    Keyword arguments:\n    nums -- positive integer array without duplicates\n    target -- integer describing what a valid combination should add to\n    \"\"\"\n    global DP\n    DP = [-1] * (target + 1)\n    DP[0] = 1\n    return helper_topdown(nums, target)"}, "combination_sum_bottom_up": {"doc": {"long_description": "Keyword arguments:\nnums -- positive integer array without duplicates\ntarget -- integer describing what a valid combination should add to", "short_description": "Find number of possible combinations in nums that add up to target, in bottom-up manner."}, "args": ["nums", "target"], "returns": ["combs[target]"], "min_max_lineno": {"min_lineno": 61, "max_lineno": 75}, "calls": ["range", "len"], "source_code": "def combination_sum_bottom_up(nums, target):\n    \"\"\"Find number of possible combinations in nums that add up to target, in bottom-up manner.\n\n    Keyword arguments:\n    nums -- positive integer array without duplicates\n    target -- integer describing what a valid combination should add to\n    \"\"\"\n    combs = [0] * (target + 1)\n    combs[0] = 1\n    for i in range(0, len(combs)):\n        for num in nums:\n            if i - num >= 0:\n                combs[i] += combs[i - num]\n    return combs[target]"}}, "is_test": false}