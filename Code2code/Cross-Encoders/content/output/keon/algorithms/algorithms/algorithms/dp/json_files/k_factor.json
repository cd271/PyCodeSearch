{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/dp/k_factor.py", "fileNameBase": "k_factor", "extension": "py", "doc": {"long_description": "substring. Given two numbers `length` and `k_factor`, find the number of\nstrings of length `length` with 'K factor' = `k_factor`.\n\nThe algorithms is as follows:\n\ndp[length][k_factor] will be a 4 element array, wherein each element can be the\nnumber of strings of length `length` and 'K factor' = `k_factor` which belong\nto the criteria represented by that index:\n\n    - dp[length][k_factor][0] can be the number of strings of length `length`\n      and K-factor = `k_factor` which end with substring 'a'\n\n    - dp[length][k_factor][1] can be the number of strings of length `length`\n      and K-factor = `k_factor` which end with substring 'ab'\n\n    - dp[length][k_factor][2] can be the number of strings of length `length`\n      and K-factor = `k_factor` which end with substring 'abb'\n\n    - dp[length][k_factor][3] can be the number of strings of `length` and\n      K-factor = `k_factor` which end with anything other than the above\n      substrings (anything other than 'a' 'ab' 'abb')\n\nExample inputs\n\nlength=4 k_factor=1  no of strings = 1\nlength=7 k_factor=1 no of strings = 70302\nlength=10 k_factor=2 no of strings = 74357", "short_description": "The K factor of a string is defined as the number of times 'abba' appears as a", "full": "The K factor of a string is defined as the number of times 'abba' appears as a\nsubstring. Given two numbers `length` and `k_factor`, find the number of\nstrings of length `length` with 'K factor' = `k_factor`.\n\nThe algorithms is as follows:\n\ndp[length][k_factor] will be a 4 element array, wherein each element can be the\nnumber of strings of length `length` and 'K factor' = `k_factor` which belong\nto the criteria represented by that index:\n\n    - dp[length][k_factor][0] can be the number of strings of length `length`\n      and K-factor = `k_factor` which end with substring 'a'\n\n    - dp[length][k_factor][1] can be the number of strings of length `length`\n      and K-factor = `k_factor` which end with substring 'ab'\n\n    - dp[length][k_factor][2] can be the number of strings of length `length`\n      and K-factor = `k_factor` which end with substring 'abb'\n\n    - dp[length][k_factor][3] can be the number of strings of `length` and\n      K-factor = `k_factor` which end with anything other than the above\n      substrings (anything other than 'a' 'ab' 'abb')\n\nExample inputs\n\nlength=4 k_factor=1  no of strings = 1\nlength=7 k_factor=1 no of strings = 70302\nlength=10 k_factor=2 no of strings = 74357"}}, "functions": {"find_k_factor": {"doc": {"long_description": "Keyword arguments:\nlength -- integer\nk_factor -- integer", "short_description": "Find the number of strings of length `length` with K factor = `k_factor`."}, "args": ["length", "k_factor"], "returns": ["sum(mat[length][k_factor])", "0"], "min_max_lineno": {"min_lineno": 33, "max_lineno": 86}, "calls": ["range", "sum"], "source_code": "def find_k_factor(length, k_factor):\n    \"\"\"Find the number of strings of length `length` with K factor = `k_factor`.\n\n    Keyword arguments:\n    length -- integer\n    k_factor -- integer\n    \"\"\"\n    mat = [[[0 for i in range(4)] for j in range((length - 1) // 3 + 2)] for k in range(length + 1)]\n    if 3 * k_factor + 1 > length:\n        return 0\n    mat[1][0][0] = 1\n    mat[1][0][1] = 0\n    mat[1][0][2] = 0\n    mat[1][0][3] = 25\n    for i in range(2, length + 1):\n        for j in range((length - 1) // 3 + 2):\n            if j == 0:\n                mat[i][j][0] = mat[i - 1][j][0] + mat[i - 1][j][1] + mat[i - 1][j][3]\n                mat[i][j][1] = mat[i - 1][j][0]\n                mat[i][j][2] = mat[i - 1][j][1]\n                mat[i][j][3] = mat[i - 1][j][0] * 24 + mat[i - 1][j][1] * 24 + mat[i - 1][j][2] * 25 + mat[i - 1][j][3] * 25\n            elif 3 * j + 1 < i:\n                mat[i][j][0] = mat[i - 1][j][0] + mat[i - 1][j][1] + mat[i - 1][j][3] + mat[i - 1][j - 1][2]\n                mat[i][j][1] = mat[i - 1][j][0]\n                mat[i][j][2] = mat[i - 1][j][1]\n                mat[i][j][3] = mat[i - 1][j][0] * 24 + mat[i - 1][j][1] * 24 + mat[i - 1][j][2] * 25 + mat[i - 1][j][3] * 25\n            elif 3 * j + 1 == i:\n                mat[i][j][0] = 1\n                mat[i][j][1] = 0\n                mat[i][j][2] = 0\n                mat[i][j][3] = 0\n            else:\n                mat[i][j][0] = 0\n                mat[i][j][1] = 0\n                mat[i][j][2] = 0\n                mat[i][j][3] = 0\n    return sum(mat[length][k_factor])"}}, "is_test": false}