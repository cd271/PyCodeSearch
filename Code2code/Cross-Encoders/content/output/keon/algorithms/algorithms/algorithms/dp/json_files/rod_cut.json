{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/dp/rod_cut.py", "fileNameBase": "rod_cut", "extension": "py", "doc": {"short_description": "A Dynamic Programming solution for Rod cutting problem", "full": "A Dynamic Programming solution for Rod cutting problem"}}, "functions": {"cut_rod": {"doc": {"long_description": "price[] as prices of different pieces", "short_description": "Returns the best obtainable price for a rod of length n and"}, "args": ["price"], "returns": ["val[n]"], "min_max_lineno": {"min_lineno": 6, "max_lineno": 23}, "calls": ["len", "range", "max"], "store_vars_calls": {"n": "len", "max_val": "max"}, "source_code": "def cut_rod(price):\n    \"\"\"\n    Returns the best obtainable price for a rod of length n and\n    price[] as prices of different pieces\n    \"\"\"\n    n = len(price)\n    val = [0] * (n + 1)\n    for i in range(1, n + 1):\n        max_val = INT_MIN\n        for j in range(i):\n            max_val = max(max_val, price[j] + val[i - j - 1])\n        val[i] = max_val\n    return val[n]"}}, "body": {"calls": ["print", "str", "rod_cut.cut_rod"], "source_code": ["print('Maximum Obtainable Value is ' + str(cut_rod(arr)))", "str(cut_rod(arr))", "cut_rod(arr)"]}, "is_test": false}