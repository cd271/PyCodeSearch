{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/graph/bellman_ford.py", "fileNameBase": "bellman_ford", "extension": "py", "doc": {"short_description": "Determination of single-source shortest-path.", "full": "Determination of single-source shortest-path."}}, "functions": {"bellman_ford": {"doc": {"long_description": "shortest path from given graph or not for single-source shortest-paths problem.\nIn other words, if given graph has any negative-weight cycle that is reachable\nfrom the source, then it will give answer False for \"no solution exits\".\nFor argument graph, it should be a dictionary type\nsuch as\ngraph = {\n    'a': {'b': 6, 'e': 7},\n    'b': {'c': 5, 'd': -4, 'e': 8},\n    'c': {'b': -2},\n    'd': {'a': 2, 'c': 7},\n    'e': {'b': -3}\n}", "short_description": "This Bellman-Ford Code is for determination whether we can get"}, "args": ["graph", "source"], "returns": ["True", "False"], "min_max_lineno": {"min_lineno": 5, "max_lineno": 39}, "calls": ["bellman_ford.initialize_single_source", "range", "len"], "source_code": "def bellman_ford(graph, source):\n    \"\"\"\n    This Bellman-Ford Code is for determination whether we can get\n    shortest path from given graph or not for single-source shortest-paths problem.\n    In other words, if given graph has any negative-weight cycle that is reachable\n    from the source, then it will give answer False for \"no solution exits\".\n    For argument graph, it should be a dictionary type\n    such as\n    graph = {\n        'a': {'b': 6, 'e': 7},\n        'b': {'c': 5, 'd': -4, 'e': 8},\n        'c': {'b': -2},\n        'd': {'a': 2, 'c': 7},\n        'e': {'b': -3}\n    }\n    \"\"\"\n    weight = {}\n    pre_node = {}\n    initialize_single_source(graph, source, weight, pre_node)\n    for _ in range(1, len(graph)):\n        for node in graph:\n            for adjacent in graph[node]:\n                if weight[adjacent] > weight[node] + graph[node][adjacent]:\n                    weight[adjacent] = weight[node] + graph[node][adjacent]\n                    pre_node[adjacent] = node\n    for node in graph:\n        for adjacent in graph[node]:\n            if weight[adjacent] > weight[node] + graph[node][adjacent]:\n                return False\n    return True"}, "initialize_single_source": {"doc": {"short_description": "Initialize data structures for Bellman-Ford algorithm."}, "args": ["graph", "source", "weight", "pre_node"], "min_max_lineno": {"min_lineno": 40, "max_lineno": 49}, "calls": ["float"], "source_code": "def initialize_single_source(graph, source, weight, pre_node):\n    \"\"\"\n    Initialize data structures for Bellman-Ford algorithm.\n    \"\"\"\n    for node in graph:\n        weight[node] = float('inf')\n        pre_node[node] = None\n    weight[source] = 0"}}, "is_test": false}