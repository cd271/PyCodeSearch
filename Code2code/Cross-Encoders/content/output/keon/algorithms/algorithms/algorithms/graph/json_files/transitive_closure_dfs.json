{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/graph/transitive_closure_dfs.py", "fileNameBase": "transitive_closure_dfs", "extension": "py", "doc": {"long_description": "reference: https://en.wikipedia.org/wiki/Transitive_closure#In_graph_theory", "short_description": "Finds the transitive closure of a graph.", "full": "Finds the transitive closure of a graph.\n\nreference: https://en.wikipedia.org/wiki/Transitive_closure#In_graph_theory"}}, "classes": {"Graph": {"doc": {"short_description": "This class represents a directed graph using adjacency lists", "full": "This class represents a directed graph using adjacency lists"}, "min_max_lineno": {"min_lineno": 7, "max_lineno": 56}, "methods": {"__init__": {"args": ["self", "vertices"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 20}, "calls": ["range"], "source_code": "def __init__(self, vertices):\n    self.vertex_count = vertices\n    self.graph = {}\n    self.closure = [[0 for j in range(vertices)] for i in range(vertices)]"}, "add_edge": {"doc": {"short_description": "Adds a directed edge to the graph"}, "args": ["self", "source", "target"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 29}, "calls": ["transitive_closure_dfs.Graph.graph[].append"], "source_code": "def add_edge(self, source, target):\n    \"\"\"\n        Adds a directed edge to the graph\n        \"\"\"\n    if source in self.graph:\n        self.graph[source].append(target)\n    else:\n        self.graph[source] = [target]"}, "dfs_util": {"doc": {"long_description": "all reachable vertices for source", "short_description": "A recursive DFS traversal function that finds"}, "args": ["self", "source", "target"], "min_max_lineno": {"min_lineno": 30, "max_lineno": 43}, "calls": ["transitive_closure_dfs.Graph.dfs_util"], "source_code": "def dfs_util(self, source, target):\n    \"\"\"\n        A recursive DFS traversal function that finds\n        all reachable vertices for source\n        \"\"\"\n    self.closure[source][target] = 1\n    for adjacent in self.graph[target]:\n        if self.closure[source][adjacent] == 0:\n            self.dfs_util(source, adjacent)"}, "transitive_closure": {"doc": {"long_description": "recursive dfs_util()", "short_description": "The function to find transitive closure. It uses"}, "args": ["self"], "returns": ["self.closure"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 56}, "calls": ["range", "transitive_closure_dfs.Graph.dfs_util"], "source_code": "def transitive_closure(self):\n    \"\"\"\n        The function to find transitive closure. It uses\n        recursive dfs_util()\n        \"\"\"\n    for i in range(self.vertex_count):\n        self.dfs_util(i, i)\n    return self.closure"}}}}, "is_test": false}