{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/maths/base_conversion.py", "fileNameBase": "base_conversion", "extension": "py", "doc": {"long_description": "int_to_base(5, 2) return '101'.\nbase_to_int('F', 16) return 15.", "short_description": "Integer base conversion algorithm", "full": "Integer base conversion algorithm\n\nint_to_base(5, 2) return '101'.\nbase_to_int('F', 16) return 15."}}, "dependencies": [{"import": "string", "type": "external", "type_element": "module"}], "functions": {"int_to_base": {"args": ["num", "base"], "returns": ["res[::-1]", "'0'", "'-' + res[::-1]"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 31}, "source_code": "def int_to_base(num, base):\n    \"\"\"\n        :type num: int\n        :type base: int\n        :rtype: str\n    \"\"\"\n    is_negative = False\n    if num == 0:\n        return '0'\n    if num < 0:\n        is_negative = True\n        num *= -1\n    digit = string.digits + string.ascii_uppercase\n    res = ''\n    while num > 0:\n        res += digit[num % base]\n        num //= base\n    if is_negative:\n        return '-' + res[::-1]\n    return res[::-1]"}, "base_to_int": {"doc": {"short_description": "Note : You can use int() built-in function instead of this."}, "args": ["str_to_convert", "base"], "returns": ["res"], "min_max_lineno": {"min_lineno": 33, "max_lineno": 50}, "calls": ["enumerate"], "source_code": "def base_to_int(str_to_convert, base):\n    \"\"\"\n        Note : You can use int() built-in function instead of this.\n        :type str_to_convert: str\n        :type base: int\n        :rtype: int\n    \"\"\"\n    digit = {}\n    for (ind, char) in enumerate(string.digits + string.ascii_uppercase):\n        digit[char] = ind\n    multiplier = 1\n    res = 0\n    for char in str_to_convert[::-1]:\n        res += digit[char] * multiplier\n        multiplier *= base\n    return res"}}, "is_test": false}