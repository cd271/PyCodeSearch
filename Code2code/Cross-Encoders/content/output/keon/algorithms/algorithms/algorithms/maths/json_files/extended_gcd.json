{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/maths/extended_gcd.py", "fileNameBase": "extended_gcd", "extension": "py", "doc": {"long_description": "num1 * s + num2 * t = GCD(num1, num2).\nIe the coefficients of B\u00e9zout's identity.", "short_description": "Provides extended GCD functionality for finding co-prime numbers s and t such that:", "full": "Provides extended GCD functionality for finding co-prime numbers s and t such that:\nnum1 * s + num2 * t = GCD(num1, num2).\nIe the coefficients of B\u00e9zout's identity."}}, "functions": {"extended_gcd": {"doc": {"long_description": "Return s, t, g\nsuch that num1 * s + num2 * t = GCD(num1, num2)\nand s and t are co-prime.", "short_description": "Extended GCD algorithm."}, "args": ["num1", "num2"], "returns": [["old_s", "old_t", "old_r"]], "min_max_lineno": {"min_lineno": 6, "max_lineno": 25}, "source_code": "def extended_gcd(num1, num2):\n    \"\"\"Extended GCD algorithm.\n    Return s, t, g\n    such that num1 * s + num2 * t = GCD(num1, num2)\n    and s and t are co-prime.\n    \"\"\"\n    (old_s, s) = (1, 0)\n    (old_t, t) = (0, 1)\n    (old_r, r) = (num1, num2)\n    while r != 0:\n        quotient = old_r / r\n        (old_r, r) = (r, old_r - quotient * r)\n        (old_s, s) = (s, old_s - quotient * s)\n        (old_t, t) = (t, old_t - quotient * t)\n    return (old_s, old_t, old_r)"}}, "is_test": false}