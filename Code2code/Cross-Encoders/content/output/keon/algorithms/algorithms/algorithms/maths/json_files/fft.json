{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/maths/fft.py", "fileNameBase": "fft", "extension": "py", "doc": {"long_description": "Input: an array of complex values which has a size of N, where N is an integer power of 2\nOutput: an array of complex values which is the discrete fourier transform of the input\n\nExample 1\nInput: [2.0+2j, 1.0+3j, 3.0+1j, 2.0+2j]\nOutput: [8+8j, 2j, 2-2j, -2+0j]\n\n\nPseudocode: https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm", "short_description": "Implementation of the Cooley-Tukey, which is the most common FFT algorithm.", "full": "Implementation of the Cooley-Tukey, which is the most common FFT algorithm.\n\nInput: an array of complex values which has a size of N, where N is an integer power of 2\nOutput: an array of complex values which is the discrete fourier transform of the input\n\nExample 1\nInput: [2.0+2j, 1.0+3j, 3.0+1j, 2.0+2j]\nOutput: [8+8j, 2j, 2-2j, -2+0j]\n\n\nPseudocode: https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm"}}, "dependencies": [{"from_module": "cmath", "import": "exp", "type": "external", "type_element": "module"}, {"from_module": "cmath", "import": "pi", "type": "external", "type_element": "module"}], "functions": {"fft": {"doc": {"short_description": "Recursive implementation of the Cooley-Tukey"}, "args": ["x"], "returns": ["y", "x"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 33}, "calls": ["len", "fft.fft", "range", "cmath.exp"], "store_vars_calls": {"N": "len", "even": "fft", "odd": "fft"}, "source_code": "def fft(x):\n    \"\"\" Recursive implementation of the Cooley-Tukey\"\"\"\n    N = len(x)\n    if N == 1:\n        return x\n    even = fft(x[0::2])\n    odd = fft(x[1::2])\n    y = [0 for i in range(N)]\n    for k in range(N // 2):\n        q = exp(-2j * pi * k / N) * odd[k]\n        y[k] = even[k] + q\n        y[k + N // 2] = even[k] - q\n    return y"}}, "is_test": false}