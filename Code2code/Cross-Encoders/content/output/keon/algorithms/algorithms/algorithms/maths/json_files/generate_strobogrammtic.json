{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/maths/generate_strobogrammtic.py", "fileNameBase": "generate_strobogrammtic", "extension": "py", "doc": {"long_description": "the same when rotated 180 degrees (looked at upside down).\n\nFind all strobogrammatic numbers that are of length = n.\n\nFor example,\nGiven n = 2, return [\"11\",\"69\",\"88\",\"96\"].", "short_description": "A strobogrammatic number is a number that looks", "full": "A strobogrammatic number is a number that looks\nthe same when rotated 180 degrees (looked at upside down).\n\nFind all strobogrammatic numbers that are of length = n.\n\nFor example,\nGiven n = 2, return [\"11\",\"69\",\"88\",\"96\"]."}}, "functions": {"gen_strobogrammatic": {"doc": {"short_description": "Given n, generate all strobogrammatic numbers of length n."}, "args": ["n"], "returns": ["helper(n, n)"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 18}, "calls": ["generate_strobogrammtic.helper"], "source_code": "def gen_strobogrammatic(n):\n    \"\"\"\n    Given n, generate all strobogrammatic numbers of length n.\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    return helper(n, n)"}, "helper": {"args": ["n", "length"], "returns": ["result", "['']", "['1', '0', '8']"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 34}, "calls": ["generate_strobogrammtic.helper", "result.append"], "store_vars_calls": {"middles": "helper"}, "source_code": "def helper(n, length):\n    if n == 0:\n        return ['']\n    if n == 1:\n        return ['1', '0', '8']\n    middles = helper(n - 2, length)\n    result = []\n    for middle in middles:\n        if n != length:\n            result.append('0' + middle + '0')\n        result.append('8' + middle + '8')\n        result.append('1' + middle + '1')\n        result.append('9' + middle + '6')\n        result.append('6' + middle + '9')\n    return result"}, "strobogrammatic_in_range": {"args": ["low", "high"], "returns": ["count"], "min_max_lineno": {"min_lineno": 35, "max_lineno": 54}, "calls": ["len", "range", "res.extend", "generate_strobogrammtic.helper2", "int"], "store_vars_calls": {"low_len": "len", "high_len": "len"}, "source_code": "def strobogrammatic_in_range(low, high):\n    \"\"\"\n    :type low: str\n    :type high: str\n    :rtype: int\n    \"\"\"\n    res = []\n    count = 0\n    low_len = len(low)\n    high_len = len(high)\n    for i in range(low_len, high_len + 1):\n        res.extend(helper2(i, i))\n    for perm in res:\n        if len(perm) == low_len and int(perm) < int(low):\n            continue\n        if len(perm) == high_len and int(perm) > int(high):\n            continue\n        count += 1\n    return count"}, "helper2": {"args": ["n", "length"], "returns": ["res", "['']", "['0', '8', '1']"], "min_max_lineno": {"min_lineno": 55, "max_lineno": 70}, "calls": ["generate_strobogrammtic.helper", "res.append"], "store_vars_calls": {"mids": "helper"}, "source_code": "def helper2(n, length):\n    if n == 0:\n        return ['']\n    if n == 1:\n        return ['0', '8', '1']\n    mids = helper(n - 2, length)\n    res = []\n    for mid in mids:\n        if n != length:\n            res.append('0' + mid + '0')\n        res.append('1' + mid + '1')\n        res.append('6' + mid + '9')\n        res.append('9' + mid + '6')\n        res.append('8' + mid + '8')\n    return res"}}, "is_test": false}