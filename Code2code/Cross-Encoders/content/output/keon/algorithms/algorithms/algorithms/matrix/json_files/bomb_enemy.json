{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/matrix/bomb_enemy.py", "fileNameBase": "bomb_enemy", "extension": "py", "doc": {"long_description": "an enemy 'E' or empty '0' (the number zero),\nreturn the maximum enemies you can kill using one bomb.\nThe bomb kills all the enemies in the same row and column from\nthe planted point until it hits the wall since the wall is too strong\nto be destroyed.\nNote that you can only put the bomb at an empty cell.\n\nExample:\nFor the given grid\n\n0 E 0 0\nE 0 W E\n0 E 0 0\n\nreturn 3. (Placing a bomb at (1,1) kills 3 enemies)", "short_description": "Given a 2D grid, each cell is either a wall 'W',", "full": "Given a 2D grid, each cell is either a wall 'W',\nan enemy 'E' or empty '0' (the number zero),\nreturn the maximum enemies you can kill using one bomb.\nThe bomb kills all the enemies in the same row and column from\nthe planted point until it hits the wall since the wall is too strong\nto be destroyed.\nNote that you can only put the bomb at an empty cell.\n\nExample:\nFor the given grid\n\n0 E 0 0\nE 0 W E\n0 E 0 0\n\nreturn 3. (Placing a bomb at (1,1) kills 3 enemies)"}}, "dependencies": [{"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestBombEnemy": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 75, "max_lineno": 95}, "methods": {"test_3x4": {"args": ["self"], "min_max_lineno": {"min_lineno": 76, "max_lineno": 81}, "calls": ["bomb_enemy.TestBombEnemy.assertEqual", "bomb_enemy.max_killed_enemies"], "source_code": "def test_3x4(self):\n    grid1 = [['0', 'E', '0', '0'], ['E', '0', 'W', 'E'], ['0', 'E', '0', '0']]\n    self.assertEqual(3, max_killed_enemies(grid1))"}, "test_4x4": {"args": ["self"], "min_max_lineno": {"min_lineno": 82, "max_lineno": 95}, "calls": ["bomb_enemy.TestBombEnemy.assertEqual", "bomb_enemy.max_killed_enemies"], "source_code": "def test_4x4(self):\n    grid1 = [['0', 'E', '0', 'E'], ['E', 'E', 'E', '0'], ['E', '0', 'W', 'E'], ['0', 'E', '0', '0']]\n    grid2 = [['0', '0', '0', 'E'], ['E', '0', '0', '0'], ['E', '0', 'W', 'E'], ['0', 'E', '0', '0']]\n    self.assertEqual(5, max_killed_enemies(grid1))\n    self.assertEqual(3, max_killed_enemies(grid2))"}}}}, "functions": {"max_killed_enemies": {"args": ["grid"], "returns": ["max_killed", "0"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 42}, "calls": ["range", "len", "bomb_enemy.row_kills", "bomb_enemy.col_kills", "max"], "store_vars_calls": {"row_e": "row_kills", "max_killed": "max"}, "source_code": "def max_killed_enemies(grid):\n    if not grid:\n        return 0\n    (m, n) = (len(grid), len(grid[0]))\n    max_killed = 0\n    (row_e, col_e) = (0, [0] * n)\n    for i in range(m):\n        for j in range(n):\n            if j == 0 or grid[i][j - 1] == 'W':\n                row_e = row_kills(grid, i, j)\n            if i == 0 or grid[i - 1][j] == 'W':\n                col_e[j] = col_kills(grid, i, j)\n            if grid[i][j] == '0':\n                max_killed = max(max_killed, row_e + col_e[j])\n    return max_killed"}, "row_kills": {"args": ["grid", "i", "j"], "returns": ["num"], "min_max_lineno": {"min_lineno": 45, "max_lineno": 53}, "calls": ["len"], "store_vars_calls": {"len_row": "len"}, "source_code": "def row_kills(grid, i, j):\n    num = 0\n    len_row = len(grid[0])\n    while j < len_row and grid[i][j] != 'W':\n        if grid[i][j] == 'E':\n            num += 1\n        j += 1\n    return num"}, "col_kills": {"args": ["grid", "i", "j"], "returns": ["num"], "min_max_lineno": {"min_lineno": 56, "max_lineno": 64}, "calls": ["len"], "store_vars_calls": {"len_col": "len"}, "source_code": "def col_kills(grid, i, j):\n    num = 0\n    len_col = len(grid)\n    while i < len_col and grid[i][j] != 'W':\n        if grid[i][j] == 'E':\n            num += 1\n        i += 1\n    return num"}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "bomb_enemy.unittest.main", "type": "script"}, "is_test": true}