{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/matrix/sort_matrix_diagonally.py", "fileNameBase": "sort_matrix_diagonally", "extension": "py", "doc": {"long_description": "sort it diagonally in ascending order\nfrom the top-left to the bottom-right\nthen return the sorted array.\n\nmat = [\n    [3,3,1,1],\n    [2,2,1,2],\n    [1,1,1,2]\n]\n\nShould return:\n[\n    [1,1,1,1],\n    [1,2,2,2],\n    [1,2,3,3]\n]", "short_description": "Given a m * n matrix mat of integers,", "full": "Given a m * n matrix mat of integers,\nsort it diagonally in ascending order\nfrom the top-left to the bottom-right\nthen return the sorted array.\n\nmat = [\n    [3,3,1,1],\n    [2,2,1,2],\n    [1,1,1,2]\n]\n\nShould return:\n[\n    [1,1,1,1],\n    [1,2,2,2],\n    [1,2,3,3]\n]"}}, "dependencies": [{"from_module": "heapq", "import": "heappush", "type": "external", "type_element": "module"}, {"from_module": "heapq", "import": "heappop", "type": "external", "type_element": "module"}, {"from_module": "typing", "import": "List", "type": "external", "type_element": "module"}], "functions": {"sort_diagonally": {"args": ["mat"], "annotated_arg_types": {"mat": "List[List[int]]"}, "annotated_return_type": "List[List[int]]", "returns": ["mat", "mat"], "min_max_lineno": {"min_lineno": 25, "max_lineno": 78}, "calls": ["range", "len", "heapq.heappush", "heapq.heappop"], "store_vars_calls": {"ele": "heappop"}, "source_code": "def sort_diagonally(mat: List[List[int]]) -> List[List[int]]:\n    if len(mat) == 1 or len(mat[0]) == 1:\n        return mat\n    for i in range(len(mat) + len(mat[0]) - 1):\n        if i + 1 < len(mat):\n            h = []\n            row = len(mat) - (i + 1)\n            col = 0\n            while row < len(mat):\n                heappush(h, mat[row][col])\n                row += 1\n                col += 1\n            row = len(mat) - (i + 1)\n            col = 0\n            while h:\n                ele = heappop(h)\n                mat[row][col] = ele\n                row += 1\n                col += 1\n        else:\n            h = []\n            row = 0\n            col = i - (len(mat) - 1)\n            while col < len(mat[0]) and row < len(mat):\n                heappush(h, mat[row][col])\n                row += 1\n                col += 1\n            row = 0\n            col = i - (len(mat) - 1)\n            while h:\n                ele = heappop(h)\n                mat[row][col] = ele\n                row += 1\n                col += 1\n    return mat"}}, "is_test": false}