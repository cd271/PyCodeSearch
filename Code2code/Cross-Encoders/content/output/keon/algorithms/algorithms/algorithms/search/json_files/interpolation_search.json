{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/search/interpolation_search.py", "fileNameBase": "interpolation_search", "extension": "py", "doc": {"long_description": "Given a sorted array in increasing order, interpolation search calculates\nthe starting point of its search according to the search key.\n\nFORMULA: start_pos = low + [ (x - arr[low])*(high - low) / (arr[high] - arr[low]) ]\n\nDoc: https://en.wikipedia.org/wiki/Interpolation_search\n\nTime Complexity: O(log2(log2 n)) for average cases, O(n) for the worst case.\nThe algorithm performs best with uniformly distributed arrays.", "short_description": "Python implementation of the Interpolation Search algorithm.", "full": "Python implementation of the Interpolation Search algorithm.\nGiven a sorted array in increasing order, interpolation search calculates\nthe starting point of its search according to the search key.\n\nFORMULA: start_pos = low + [ (x - arr[low])*(high - low) / (arr[high] - arr[low]) ]\n\nDoc: https://en.wikipedia.org/wiki/Interpolation_search\n\nTime Complexity: O(log2(log2 n)) for average cases, O(n) for the worst case.\nThe algorithm performs best with uniformly distributed arrays."}}, "dependencies": [{"from_module": "typing", "import": "List", "type": "external", "type_element": "module"}], "functions": {"interpolation_search": {"doc": {"args": {"array": {"description": "The array to be searched."}, "search_key": {"description": "The key to be searched in the array."}}, "returns": {"description": "Index of search_key in array if found, else -1.\nExamples:\n\n>>> interpolation_search([-25, -12, -1, 10, 12, 15, 20, 41, 55], -1)\n2\n>>> interpolation_search([5, 10, 12, 14, 17, 20, 21], 55)\n-1\n>>> interpolation_search([5, 10, 12, 14, 17, 20, 21], -5)\n-1", "is_generator": false}}, "args": ["array", "search_key"], "annotated_arg_types": {"array": "List[int]", "search_key": "int"}, "annotated_return_type": "int", "returns": ["-1", "pos"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 57}, "calls": ["len", "int"], "source_code": "def interpolation_search(array: List[int], search_key: int) -> int:\n    \"\"\"\n    :param array: The array to be searched.\n    :param search_key: The key to be searched in the array.\n\n    :returns: Index of search_key in array if found, else -1.\n\n    Examples:\n\n    >>> interpolation_search([-25, -12, -1, 10, 12, 15, 20, 41, 55], -1)\n    2\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], 55)\n    -1\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], -5)\n    -1\n\n    \"\"\"\n    high = len(array) - 1\n    low = 0\n    while low <= high and array[low] <= search_key <= array[high]:\n        pos = low + int((search_key - array[low]) * (high - low) / (array[high] - array[low]))\n        if array[pos] == search_key:\n            return pos\n        if array[pos] < search_key:\n            low = pos + 1\n        else:\n            high = pos - 1\n    return -1"}}, "body": {"calls": ["doctest.testmod"], "source_code": ["doctest.testmod()"]}, "main_info": {"main_flag": 1, "type": "script"}, "is_test": false}