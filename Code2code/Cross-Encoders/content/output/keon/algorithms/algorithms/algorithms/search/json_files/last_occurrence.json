{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/search/last_occurrence.py", "fileNameBase": "last_occurrence", "extension": "py", "doc": {"long_description": "Approach- Binary Search\nT(n)- O(log n)", "short_description": "Find last occurance of a number in a sorted array (increasing order)", "full": "Find last occurance of a number in a sorted array (increasing order)\nApproach- Binary Search\nT(n)- O(log n)"}}, "functions": {"last_occurrence": {"doc": {"long_description": "The array has to be sorted in increasing order.", "short_description": "Returns the index of the last occurance of the given element in an array."}, "args": ["array", "query"], "returns": ["mid"], "min_max_lineno": {"min_lineno": 6, "max_lineno": 21}, "calls": ["len"], "source_code": "def last_occurrence(array, query):\n    \"\"\"\n    Returns the index of the last occurance of the given element in an array.\n    The array has to be sorted in increasing order.\n    \"\"\"\n    (low, high) = (0, len(array) - 1)\n    while low <= high:\n        mid = (high + low) // 2\n        if array[mid] == query and mid == len(array) - 1 or (array[mid] == query and array[mid + 1] > query):\n            return mid\n        if array[mid] <= query:\n            low = mid + 1\n        else:\n            high = mid - 1"}}, "is_test": false}