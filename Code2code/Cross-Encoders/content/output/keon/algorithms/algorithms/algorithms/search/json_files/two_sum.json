{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/search/two_sum.py", "fileNameBase": "two_sum", "extension": "py", "doc": {"long_description": "numbers such that they add up to a specific target number. The function two_sum\nshould return indices of the two numbers such that they add up to the target,\nwhere index1 must be less than index2. Please note that your returned answers\n(both index1 and index2) are not zero-based.\nYou may assume that each input would have exactly one solution and you\nmay not use the same element twice.\n\nInput: numbers = [2, 7, 11, 15], target=9\nOutput: index1 = 1, index2 = 2\n\nSolution:\ntwo_sum: using binary search\ntwo_sum1: using dictionary as a hash table\ntwo_sum2: using two pointers", "short_description": "Given an array of integers that is already sorted in ascending order, find two", "full": "Given an array of integers that is already sorted in ascending order, find two\nnumbers such that they add up to a specific target number. The function two_sum\nshould return indices of the two numbers such that they add up to the target,\nwhere index1 must be less than index2. Please note that your returned answers\n(both index1 and index2) are not zero-based.\nYou may assume that each input would have exactly one solution and you\nmay not use the same element twice.\n\nInput: numbers = [2, 7, 11, 15], target=9\nOutput: index1 = 1, index2 = 2\n\nSolution:\ntwo_sum: using binary search\ntwo_sum1: using dictionary as a hash table\ntwo_sum2: using two pointers"}}, "functions": {"two_sum": {"doc": {"long_description": "numbers such that their sum is the given target.\n\nUsing binary search.", "short_description": "Given a list of numbers sorted in ascending order, find the indices of two"}, "args": ["numbers", "target"], "returns": ["None", "[i + 1, mid + 1]"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 39}, "calls": ["enumerate", "len"], "source_code": "def two_sum(numbers, target):\n    \"\"\"\n    Given a list of numbers sorted in ascending order, find the indices of two\n    numbers such that their sum is the given target.\n\n    Using binary search.\n    \"\"\"\n    for (i, number) in enumerate(numbers):\n        second_val = target - number\n        (low, high) = (i + 1, len(numbers) - 1)\n        while low <= high:\n            mid = low + (high - low) // 2\n            if second_val == numbers[mid]:\n                return [i + 1, mid + 1]\n            if second_val > numbers[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return None"}, "two_sum1": {"doc": {"long_description": "sum is the given target.\n\nUsing a hash table.", "short_description": "Given a list of numbers, find the indices of two numbers such that their"}, "args": ["numbers", "target"], "returns": ["None", "[dic[target - num] + 1, i + 1]"], "min_max_lineno": {"min_lineno": 40, "max_lineno": 53}, "calls": ["enumerate"], "source_code": "def two_sum1(numbers, target):\n    \"\"\"\n    Given a list of numbers, find the indices of two numbers such that their\n    sum is the given target.\n\n    Using a hash table.\n    \"\"\"\n    dic = {}\n    for (i, num) in enumerate(numbers):\n        if target - num in dic:\n            return [dic[target - num] + 1, i + 1]\n        dic[num] = i\n    return None"}, "two_sum2": {"doc": {"long_description": "numbers such that their sum is the given target.\n\nUsing a bidirectional linear search.", "short_description": "Given a list of numbers sorted in ascending order, find the indices of two"}, "args": ["numbers", "target"], "returns": ["[left + 1, right + 1]"], "min_max_lineno": {"min_lineno": 54, "max_lineno": 72}, "calls": ["len"], "source_code": "def two_sum2(numbers, target):\n    \"\"\"\n    Given a list of numbers sorted in ascending order, find the indices of two\n    numbers such that their sum is the given target.\n\n    Using a bidirectional linear search.\n    \"\"\"\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == target:\n            return [left + 1, right + 1]\n        if current_sum > target:\n            right = right - 1\n        else:\n            left = left + 1"}}, "is_test": false}