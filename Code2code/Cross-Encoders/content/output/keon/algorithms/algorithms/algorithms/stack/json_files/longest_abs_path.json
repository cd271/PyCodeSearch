{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/stack/longest_abs_path.py", "fileNameBase": "longest_abs_path", "extension": "py"}, "functions": {"length_longest_path": {"args": ["input"], "returns": ["max_len"], "min_max_lineno": {"min_lineno": 36, "max_lineno": 59}, "calls": ["input.split", "print", "s.count", "stack.append", "len", "stack.pop", "max", "s.strip"], "store_vars_calls": {"depth": "s.count", "max_len": "max"}, "source_code": "def length_longest_path(input):\n    \"\"\"\n    :type input: str\n    :rtype: int\n    \"\"\"\n    (curr_len, max_len) = (0, 0)\n    stack = []\n    for s in input.split('\\n'):\n        print('---------')\n        print('<path>:', s)\n        depth = s.count('\\t')\n        print('depth: ', depth)\n        print('stack: ', stack)\n        print('curlen: ', curr_len)\n        while len(stack) > depth:\n            curr_len -= stack.pop()\n        stack.append(len(s.strip('\\t')) + 1)\n        curr_len += stack[-1]\n        print('stack: ', stack)\n        print('curlen: ', curr_len)\n        if '.' in s:\n            max_len = max(max_len, curr_len - 1)\n    return max_len"}}, "body": {"calls": ["print", "longest_abs_path.length_longest_path"], "source_code": ["print('path:', st2)", "print('answer:', length_longest_path(st2))", "length_longest_path(st2)"]}, "is_test": false}