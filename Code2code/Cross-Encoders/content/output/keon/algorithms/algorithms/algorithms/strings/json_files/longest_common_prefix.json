{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/strings/longest_common_prefix.py", "fileNameBase": "longest_common_prefix", "extension": "py", "doc": {"long_description": "If there is no common prefix, return an empty string \"\".\n\nExample 1:\nInput: [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\n\nExample 2:\nInput: [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n\nReference: https://leetcode.com/problems/longest-common-prefix/description/", "short_description": "Write a function to find the longest common prefix string amongst an array of strings.", "full": "Write a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".\n\nExample 1:\nInput: [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\n\nExample 2:\nInput: [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n\nReference: https://leetcode.com/problems/longest-common-prefix/description/"}}, "functions": {"common_prefix": {"doc": {"short_description": "Return prefix common of 2 strings"}, "args": ["s1", "s2"], "returns": ["s1[0:k]", "''", "s1[0:k]"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 31}, "calls": ["len"], "source_code": "def common_prefix(s1, s2):\n    \"\"\"Return prefix common of 2 strings\"\"\"\n    if not s1 or not s2:\n        return ''\n    k = 0\n    while s1[k] == s2[k]:\n        k = k + 1\n        if k >= len(s1) or k >= len(s2):\n            return s1[0:k]\n    return s1[0:k]"}, "longest_common_prefix_v1": {"args": ["strs"], "returns": ["result", "''"], "min_max_lineno": {"min_lineno": 32, "max_lineno": 39}, "calls": ["range", "len", "longest_common_prefix.common_prefix"], "store_vars_calls": {"result": "common_prefix"}, "source_code": "def longest_common_prefix_v1(strs):\n    if not strs:\n        return ''\n    result = strs[0]\n    for i in range(len(strs)):\n        result = common_prefix(result, strs[i])\n    return result"}, "longest_common_prefix_v2": {"args": ["strs"], "returns": ["strs[0]", "''", "strs[0][0:i]"], "min_max_lineno": {"min_lineno": 43, "max_lineno": 51}, "calls": ["range", "len"], "source_code": "def longest_common_prefix_v2(strs):\n    if not strs:\n        return ''\n    for i in range(len(strs[0])):\n        for string in strs[1:]:\n            if i == len(string) or string[i] != strs[0][i]:\n                return strs[0][0:i]\n    return strs[0]"}, "longest_common_prefix_v3": {"args": ["strs"], "returns": ["longest_common(strs, 0, len(strs) - 1)", "''"], "min_max_lineno": {"min_lineno": 55, "max_lineno": 59}, "calls": ["longest_common_prefix.longest_common", "len"], "source_code": "def longest_common_prefix_v3(strs):\n    if not strs:\n        return ''\n    return longest_common(strs, 0, len(strs) - 1)"}, "longest_common": {"args": ["strs", "left", "right"], "returns": ["common_prefix(lcp_left, lcp_right)", "strs[left]"], "min_max_lineno": {"min_lineno": 60, "max_lineno": 67}, "calls": ["longest_common_prefix.longest_common", "longest_common_prefix.common_prefix"], "store_vars_calls": {"lcp_left": "longest_common", "lcp_right": "longest_common"}, "source_code": "def longest_common(strs, left, right):\n    if left == right:\n        return strs[left]\n    mid = (left + right) // 2\n    lcp_left = longest_common(strs, left, mid)\n    lcp_right = longest_common(strs, mid + 1, right)\n    return common_prefix(lcp_left, lcp_right)"}}, "is_test": false}