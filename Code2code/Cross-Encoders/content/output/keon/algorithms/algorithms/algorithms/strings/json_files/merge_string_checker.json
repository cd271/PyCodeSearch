{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/strings/merge_string_checker.py", "fileNameBase": "merge_string_checker", "extension": "py", "doc": {"long_description": "given string, s, can be formed from two other strings, part1 and part2.\nThe restriction is that the characters in part1 and part2 are in the same \norder as in s. The interviewer gives you the following example and tells \nyou to figure out the rest from the given test cases.\n'codewars' is a merge from 'cdw' and 'oears':\ns:  c o d e w a r s   = codewars\npart1:  c   d   w         = cdw\npart2:    o   e   a r s   = oears", "short_description": "At a job interview, you are challenged to write an algorithm to check if a ", "full": "At a job interview, you are challenged to write an algorithm to check if a \ngiven string, s, can be formed from two other strings, part1 and part2.\nThe restriction is that the characters in part1 and part2 are in the same \norder as in s. The interviewer gives you the following example and tells \nyou to figure out the rest from the given test cases.\n'codewars' is a merge from 'cdw' and 'oears':\ns:  c o d e w a r s   = codewars\npart1:  c   d   w         = cdw\npart2:    o   e   a r s   = oears"}}, "functions": {"is_merge_recursive": {"args": ["s", "part1", "part2"], "returns": ["False", "s == part2", "s == part1", "part1 + part2 == ''", "True", "True"], "min_max_lineno": {"min_lineno": 15, "max_lineno": 27}, "calls": ["merge_string_checker.is_merge_recursive"], "source_code": "def is_merge_recursive(s, part1, part2):\n    if not part1:\n        return s == part2\n    if not part2:\n        return s == part1\n    if not s:\n        return part1 + part2 == ''\n    if s[0] == part1[0] and is_merge_recursive(s[1:], part1[1:], part2):\n        return True\n    if s[0] == part2[0] and is_merge_recursive(s[1:], part1, part2[1:]):\n        return True\n    return False"}, "is_merge_iterative": {"args": ["s", "part1", "part2"], "returns": ["False", "True"], "min_max_lineno": {"min_lineno": 30, "max_lineno": 43}, "calls": ["tuple_list.pop", "tuple_list.append"], "source_code": "def is_merge_iterative(s, part1, part2):\n    tuple_list = [(s, part1, part2)]\n    while tuple_list:\n        (string, p1, p2) = tuple_list.pop()\n        if string:\n            if p1 and string[0] == p1[0]:\n                tuple_list.append((string[1:], p1[1:], p2))\n            if p2 and string[0] == p2[0]:\n                tuple_list.append((string[1:], p1, p2[1:]))\n        elif not p1 and (not p2):\n            return True\n    return False"}}, "is_test": false}