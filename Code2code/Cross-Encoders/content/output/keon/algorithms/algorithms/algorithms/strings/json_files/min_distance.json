{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/strings/min_distance.py", "fileNameBase": "min_distance", "extension": "py", "doc": {"long_description": "make word1 and word2 the same, where in each step you can delete one character\nin either string.\n\nFor example:\nInput: \"sea\", \"eat\"\nOutput: 2\nExplanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".\n\nReference: https://leetcode.com/problems/delete-operation-for-two-strings/description/", "short_description": "Given two words word1 and word2, find the minimum number of steps required to", "full": "Given two words word1 and word2, find the minimum number of steps required to\nmake word1 and word2 the same, where in each step you can delete one character\nin either string.\n\nFor example:\nInput: \"sea\", \"eat\"\nOutput: 2\nExplanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".\n\nReference: https://leetcode.com/problems/delete-operation-for-two-strings/description/"}}, "functions": {"min_distance": {"doc": {"short_description": "Finds minimum distance by getting longest common subsequence"}, "args": ["word1", "word2"], "returns": ["len(word1) + len(word2) - 2 * lcs(word1, word2, len(word1), len(word2))"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 23}, "calls": ["len", "min_distance.lcs"], "source_code": "def min_distance(word1, word2):\n    \"\"\"\n    Finds minimum distance by getting longest common subsequence\n\n    :type word1: str\n    :type word2: str\n    :rtype: int\n    \"\"\"\n    return len(word1) + len(word2) - 2 * lcs(word1, word2, len(word1), len(word2))"}, "lcs": {"doc": {"short_description": "The length of longest common subsequence among the two given strings word1 and word2"}, "args": ["word1", "word2", "i", "j"], "returns": ["max(lcs(word1, word2, i - 1, j), lcs(word1, word2, i, j - 1))", "0", "1 + lcs(word1, word2, i - 1, j - 1)"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 33}, "calls": ["max", "min_distance.lcs"], "source_code": "def lcs(word1, word2, i, j):\n    \"\"\"\n    The length of longest common subsequence among the two given strings word1 and word2\n    \"\"\"\n    if i == 0 or j == 0:\n        return 0\n    if word1[i - 1] == word2[j - 1]:\n        return 1 + lcs(word1, word2, i - 1, j - 1)\n    return max(lcs(word1, word2, i - 1, j), lcs(word1, word2, i, j - 1))"}, "min_distance_dp": {"doc": {"long_description": "TC: O(length1*length2), SC: O(length1*length2)", "short_description": "Finds minimum distance in a dynamic programming manner"}, "args": ["word1", "word2"], "returns": ["res[len(word1)][len(word2)]"], "min_max_lineno": {"min_lineno": 34, "max_lineno": 63}, "calls": ["range", "len", "min"], "source_code": "def min_distance_dp(word1, word2):\n    \"\"\"\n    Finds minimum distance in a dynamic programming manner\n    TC: O(length1*length2), SC: O(length1*length2)\n\n    :type word1: str\n    :type word2: str\n    :rtype: int\n    \"\"\"\n    (length1, length2) = (len(word1) + 1, len(word2) + 1)\n    res = [[0 for _ in range(length2)] for _ in range(length1)]\n    if length1 == length2:\n        for i in range(1, length1):\n            (res[i][0], res[0][i]) = (i, i)\n    else:\n        for i in range(length1):\n            res[i][0] = i\n        for i in range(length2):\n            res[0][i] = i\n    for i in range(1, length1):\n        for j in range(1, length2):\n            if word1[i - 1] == word2[j - 1]:\n                res[i][j] = res[i - 1][j - 1]\n            else:\n                res[i][j] = min(res[i - 1][j], res[i][j - 1]) + 1\n    return res[len(word1)][len(word2)]"}}, "is_test": false}