{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/strings/validate_coordinates.py", "fileNameBase": "validate_coordinates", "extension": "py", "doc": {"long_description": "Create a function that will validate if given parameters are valid geographical coordinates.\nValid coordinates look like the following: \"23.32353342, -32.543534534\". The return value should be either true or false.\nLatitude (which is first float) can be between 0 and 90, positive or negative. Longitude (which is second float) can be between 0 and 180, positive or negative.\nCoordinates can only contain digits, or one of the following symbols (including space after comma) -, .\nThere should be no space between the minus \"-\" sign and the digit after it.\n\nHere are some valid coordinates:\n-23, 25\n43.91343345, 143\n4, -3\n\nAnd some invalid ones:\n23.234, - 23.4234\nN23.43345, E32.6457\n6.325624, 43.34345.345\n0, 1,2", "short_description": "\"", "full": "\"\nCreate a function that will validate if given parameters are valid geographical coordinates.\nValid coordinates look like the following: \"23.32353342, -32.543534534\". The return value should be either true or false.\nLatitude (which is first float) can be between 0 and 90, positive or negative. Longitude (which is second float) can be between 0 and 180, positive or negative.\nCoordinates can only contain digits, or one of the following symbols (including space after comma) -, .\nThere should be no space between the minus \"-\" sign and the digit after it.\n\nHere are some valid coordinates:\n-23, 25\n43.91343345, 143\n4, -3\n\nAnd some invalid ones:\n23.234, - 23.4234\nN23.43345, E32.6457\n6.325624, 43.34345.345\n0, 1,2"}}, "dependencies": [{"import": "re", "type": "external", "type_element": "module"}], "functions": {"is_valid_coordinates_0": {"args": ["coordinates"], "returns": ["-90 <= latitude <= 90 and -180 <= longitude <= 180", "False", "False", "False"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 37}, "calls": ["coordinates.split", "len", "float", "char.isdigit"], "store_vars_calls": {"l": "coordinates.split", "latitude": "float", "longitude": "float"}, "source_code": "def is_valid_coordinates_0(coordinates):\n    for char in coordinates:\n        if not (char.isdigit() or char in ['-', '.', ',', ' ']):\n            return False\n    l = coordinates.split(', ')\n    if len(l) != 2:\n        return False\n    try:\n        latitude = float(l[0])\n        longitude = float(l[1])\n    except:\n        return False\n    return -90 <= latitude <= 90 and -180 <= longitude <= 180"}, "is_valid_coordinates_1": {"args": ["coordinates"], "returns": ["lat <= 90 and lng <= 180", "False"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 46}, "calls": ["abs", "float", "coordinates.split"], "source_code": "def is_valid_coordinates_1(coordinates):\n    try:\n        (lat, lng) = [abs(float(c)) for c in coordinates.split(',') if 'e' not in c]\n    except ValueError:\n        return False\n    return lat <= 90 and lng <= 180"}, "is_valid_coordinates_regular_expression": {"args": ["coordinates"], "returns": ["bool(re.match('-?(\\\\d|[1-8]\\\\d|90)\\\\.?\\\\d*, -?(\\\\d|[1-9]\\\\d|1[0-7]\\\\d|180)\\\\.?\\\\d*$', coordinates))"], "min_max_lineno": {"min_lineno": 48, "max_lineno": 50}, "calls": ["bool", "re.match"], "source_code": "def is_valid_coordinates_regular_expression(coordinates):\n    return bool(re.match('-?(\\\\d|[1-8]\\\\d|90)\\\\.?\\\\d*, -?(\\\\d|[1-9]\\\\d|1[0-7]\\\\d|180)\\\\.?\\\\d*$', coordinates))"}}, "is_test": false}