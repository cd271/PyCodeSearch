{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/tree/avl/avl.py", "fileNameBase": "avl", "extension": "py", "doc": {"short_description": "Imports TreeNodes", "full": "Imports TreeNodes"}}, "dependencies": [{"from_module": "tree.tree", "import": "TreeNode", "type": "external", "type_element": "module"}], "classes": {"AvlTree": {"doc": {"short_description": "An avl tree.", "full": "An avl tree."}, "extend": ["object"], "min_max_lineno": {"min_lineno": 5, "max_lineno": 127}, "methods": {"__init__": {"args": ["self"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 15}, "source_code": "def __init__(self):\n    self.node = None\n    self.height = -1\n    self.balance = 0"}, "insert": {"doc": {"short_description": "Insert new key into node"}, "args": ["self", "key"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 31}, "calls": ["tree.tree.TreeNode", "avl.AvlTree.re_balance", "avl.AvlTree", "avl.AvlTree.node.left.insert", "avl.AvlTree.node.right.insert"], "store_vars_calls": {"node": "TreeNode", "self.node.left": "AvlTree", "self.node.right": "AvlTree"}, "source_code": "def insert(self, key):\n    \"\"\"\n        Insert new key into node\n        \"\"\"\n    node = TreeNode(key)\n    if not self.node:\n        self.node = node\n        self.node.left = AvlTree()\n        self.node.right = AvlTree()\n    elif key < self.node.val:\n        self.node.left.insert(key)\n    elif key > self.node.val:\n        self.node.right.insert(key)\n    self.re_balance()"}, "re_balance": {"doc": {"short_description": "Re balance tree. After inserting or deleting a node,"}, "args": ["self"], "min_max_lineno": {"min_lineno": 32, "max_lineno": 57}, "calls": ["avl.AvlTree.update_heights", "avl.AvlTree.update_balances", "avl.AvlTree.rotate_right", "avl.AvlTree.rotate_left", "avl.AvlTree.node.left.rotate_left", "avl.AvlTree.node.right.rotate_right"], "source_code": "def re_balance(self):\n    \"\"\"\n        Re balance tree. After inserting or deleting a node,\n        \"\"\"\n    self.update_heights(recursive=False)\n    self.update_balances(False)\n    while self.balance < -1 or self.balance > 1:\n        if self.balance > 1:\n            if self.node.left.balance < 0:\n                self.node.left.rotate_left()\n                self.update_heights()\n                self.update_balances()\n            self.rotate_right()\n            self.update_heights()\n            self.update_balances()\n        if self.balance < -1:\n            if self.node.right.balance > 0:\n                self.node.right.rotate_right()\n                self.update_heights()\n                self.update_balances()\n            self.rotate_left()\n            self.update_heights()\n            self.update_balances()"}, "update_heights": {"doc": {"short_description": "Update tree height"}, "args": ["self", "recursive"], "min_max_lineno": {"min_lineno": 58, "max_lineno": 73}, "calls": ["max", "avl.AvlTree.node.left.update_heights", "avl.AvlTree.node.right.update_heights"], "source_code": "def update_heights(self, recursive=True):\n    \"\"\"\n        Update tree height\n        \"\"\"\n    if self.node:\n        if recursive:\n            if self.node.left:\n                self.node.left.update_heights()\n            if self.node.right:\n                self.node.right.update_heights()\n        self.height = 1 + max(self.node.left.height, self.node.right.height)\n    else:\n        self.height = -1"}, "update_balances": {"doc": {"short_description": "Calculate tree balance factor"}, "args": ["self", "recursive"], "min_max_lineno": {"min_lineno": 74, "max_lineno": 89}, "calls": ["avl.AvlTree.node.left.update_balances", "avl.AvlTree.node.right.update_balances"], "source_code": "def update_balances(self, recursive=True):\n    \"\"\"\n        Calculate tree balance factor\n\n        \"\"\"\n    if self.node:\n        if recursive:\n            if self.node.left:\n                self.node.left.update_balances()\n            if self.node.right:\n                self.node.right.update_balances()\n        self.balance = self.node.left.height - self.node.right.height\n    else:\n        self.balance = 0"}, "rotate_right": {"doc": {"short_description": "Right rotation"}, "args": ["self"], "min_max_lineno": {"min_lineno": 90, "max_lineno": 101}, "source_code": "def rotate_right(self):\n    \"\"\"\n        Right rotation\n        \"\"\"\n    new_root = self.node.left.node\n    new_left_sub = new_root.right.node\n    old_root = self.node\n    self.node = new_root\n    old_root.left.node = new_left_sub\n    new_root.right.node = old_root"}, "rotate_left": {"doc": {"short_description": "Left rotation"}, "args": ["self"], "min_max_lineno": {"min_lineno": 102, "max_lineno": 113}, "source_code": "def rotate_left(self):\n    \"\"\"\n        Left rotation\n        \"\"\"\n    new_root = self.node.right.node\n    new_left_sub = new_root.left.node\n    old_root = self.node\n    self.node = new_root\n    old_root.right.node = new_left_sub\n    new_root.left.node = old_root"}, "in_order_traverse": {"doc": {"short_description": "In-order traversal of the tree"}, "args": ["self"], "returns": ["result", "result"], "min_max_lineno": {"min_lineno": 114, "max_lineno": 127}, "calls": ["result.extend", "result.append", "avl.AvlTree.node.left.in_order_traverse", "avl.AvlTree.node.right.in_order_traverse"], "source_code": "def in_order_traverse(self):\n    \"\"\"\n        In-order traversal of the tree\n        \"\"\"\n    result = []\n    if not self.node:\n        return result\n    result.extend(self.node.left.in_order_traverse())\n    result.append(self.node.key)\n    result.extend(self.node.right.in_order_traverse())\n    return result"}}}}, "is_test": false}