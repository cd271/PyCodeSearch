{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/tree/bst/bst.py", "fileNameBase": "bst", "extension": "py", "doc": {"long_description": "1. Insert\n2. Search\n3. Size\n4. Traversal (Preorder, Inorder, Postorder)", "short_description": "Implement Binary Search Tree. It has method:", "full": "Implement Binary Search Tree. It has method:\n    1. Insert\n    2. Search\n    3. Size\n    4. Traversal (Preorder, Inorder, Postorder)"}}, "dependencies": [{"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"Node": {"extend": ["object"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 16}, "methods": {"__init__": {"args": ["self", "data"], "min_max_lineno": {"min_lineno": 12, "max_lineno": 16}, "source_code": "def __init__(self, data):\n    self.data = data\n    self.left = None\n    self.right = None"}}}, "BST": {"extend": ["object"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 101}, "methods": {"__init__": {"args": ["self"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 20}, "source_code": "def __init__(self):\n    self.root = None"}, "get_root": {"args": ["self"], "returns": ["self.root"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 23}, "source_code": "def get_root(self):\n    return self.root"}, "size": {"args": ["self"], "returns": ["self.recur_size(self.root)"], "min_max_lineno": {"min_lineno": 28, "max_lineno": 30}, "calls": ["bst.BST.recur_size"], "source_code": "def size(self):\n    return self.recur_size(self.root)"}, "recur_size": {"args": ["self", "root"], "returns": ["0", "1 + self.recur_size(root.left) + self.recur_size(root.right)"], "min_max_lineno": {"min_lineno": 31, "max_lineno": 36}, "calls": ["bst.BST.recur_size"], "source_code": "def recur_size(self, root):\n    if root is None:\n        return 0\n    else:\n        return 1 + self.recur_size(root.left) + self.recur_size(root.right)"}, "search": {"args": ["self", "data"], "returns": ["self.recur_search(self.root, data)"], "min_max_lineno": {"min_lineno": 41, "max_lineno": 43}, "calls": ["bst.BST.recur_search"], "source_code": "def search(self, data):\n    return self.recur_search(self.root, data)"}, "recur_search": {"args": ["self", "root", "data"], "returns": ["False", "True", "self.recur_search(root.right, data)", "self.recur_search(root.left, data)"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 53}, "calls": ["bst.BST.recur_search"], "source_code": "def recur_search(self, root, data):\n    if root is None:\n        return False\n    if root.data == data:\n        return True\n    elif data > root.data:\n        return self.recur_search(root.right, data)\n    else:\n        return self.recur_search(root.left, data)"}, "insert": {"args": ["self", "data"], "returns": ["self.recur_insert(self.root, data)", "True"], "min_max_lineno": {"min_lineno": 58, "max_lineno": 64}, "calls": ["bst.BST.recur_insert"], "store_vars_calls": {"self.root": "Node"}, "source_code": "def insert(self, data):\n    if self.root:\n        return self.recur_insert(self.root, data)\n    else:\n        self.root = Node(data)\n        return True"}, "recur_insert": {"args": ["self", "root", "data"], "returns": ["False", "self.recur_insert(root.left, data)", "True", "self.recur_insert(root.right, data)", "True"], "min_max_lineno": {"min_lineno": 65, "max_lineno": 80}, "calls": ["bst.BST.recur_insert", "bst.Node"], "store_vars_calls": {"root.left": "Node", "root.right": "Node"}, "source_code": "def recur_insert(self, root, data):\n    if root.data == data:\n        return False\n    elif data < root.data:\n        if root.left:\n            return self.recur_insert(root.left, data)\n        else:\n            root.left = Node(data)\n            return True\n    elif root.right:\n        return self.recur_insert(root.right, data)\n    else:\n        root.right = Node(data)\n        return True"}, "preorder": {"args": ["self", "root"], "min_max_lineno": {"min_lineno": 84, "max_lineno": 89}, "calls": ["print", "bst.BST.preorder", "str"], "source_code": "def preorder(self, root):\n    if root:\n        print(str(root.data), end=' ')\n        self.preorder(root.left)\n        self.preorder(root.right)"}, "inorder": {"args": ["self", "root"], "min_max_lineno": {"min_lineno": 90, "max_lineno": 95}, "calls": ["bst.BST.inorder", "print", "str"], "source_code": "def inorder(self, root):\n    if root:\n        self.inorder(root.left)\n        print(str(root.data), end=' ')\n        self.inorder(root.right)"}, "postorder": {"args": ["self", "root"], "min_max_lineno": {"min_lineno": 96, "max_lineno": 101}, "calls": ["bst.BST.postorder", "print", "str"], "source_code": "def postorder(self, root):\n    if root:\n        self.postorder(root.left)\n        self.postorder(root.right)\n        print(str(root.data), end=' ')"}}}, "TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 116, "max_lineno": 137}, "methods": {"setUp": {"args": ["self"], "min_max_lineno": {"min_lineno": 117, "max_lineno": 130}, "calls": ["bst.TestSuite.tree.insert"], "store_vars_calls": {"self.tree": "BST"}, "source_code": "def setUp(self):\n    self.tree = BST()\n    self.tree.insert(10)\n    self.tree.insert(15)\n    self.tree.insert(6)\n    self.tree.insert(4)\n    self.tree.insert(9)\n    self.tree.insert(12)\n    self.tree.insert(24)\n    self.tree.insert(7)\n    self.tree.insert(20)\n    self.tree.insert(30)\n    self.tree.insert(18)"}, "test_search": {"args": ["self"], "min_max_lineno": {"min_lineno": 131, "max_lineno": 134}, "calls": ["bst.TestSuite.assertTrue", "bst.TestSuite.assertFalse", "bst.TestSuite.tree.search"], "source_code": "def test_search(self):\n    self.assertTrue(self.tree.search(24))\n    self.assertFalse(self.tree.search(50))"}, "test_size": {"args": ["self"], "min_max_lineno": {"min_lineno": 135, "max_lineno": 137}, "calls": ["bst.TestSuite.assertEqual", "bst.TestSuite.tree.size"], "source_code": "def test_size(self):\n    self.assertEqual(11, self.tree.size())"}}}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "bst.unittest.main", "type": "script"}, "is_test": true}