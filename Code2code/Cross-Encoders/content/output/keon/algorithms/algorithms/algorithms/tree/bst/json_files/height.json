{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/tree/bst/height.py", "fileNameBase": "height", "extension": "py", "doc": {"long_description": "be the number of levels. The empty tree has height 0, a tree of one node has\nheight 1, a root node with one or two leaves as children has height 2, and so on\nFor example: height of tree is 4\n\n                    9\n                 /                     6         12\n              / \\       /               3     8   10      15\n                 /                              7                18\n\n    height = 4", "short_description": "Write a function height returns the height of a tree. The height is defined to", "full": "Write a function height returns the height of a tree. The height is defined to\nbe the number of levels. The empty tree has height 0, a tree of one node has\nheight 1, a root node with one or two leaves as children has height 2, and so on\nFor example: height of tree is 4\n\n                    9\n                 /                     6         12\n              / \\       /               3     8   10      15\n                 /                              7                18\n\n    height = 4"}}, "dependencies": [{"import": "unittest", "type": "external", "type_element": "module"}, {"from_module": "bst", "import": "Node", "type": "internal", "type_element": "module"}, {"from_module": "bst", "import": "bst", "type": "internal", "type_element": "module"}], "classes": {"TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 43, "max_lineno": 58}, "methods": {"setUp": {"args": ["self"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 55}, "calls": ["bst.bst.bst", "height.TestSuite.tree.insert"], "store_vars_calls": {"self.tree": "bst"}, "source_code": "def setUp(self):\n    self.tree = bst()\n    self.tree.insert(9)\n    self.tree.insert(6)\n    self.tree.insert(12)\n    self.tree.insert(3)\n    self.tree.insert(8)\n    self.tree.insert(10)\n    self.tree.insert(15)\n    self.tree.insert(7)\n    self.tree.insert(18)"}, "test_height": {"args": ["self"], "min_max_lineno": {"min_lineno": 56, "max_lineno": 58}, "calls": ["height.TestSuite.assertEqual", "height.height"], "source_code": "def test_height(self):\n    self.assertEqual(4, height(self.tree.root))"}}}}, "functions": {"height": {"args": ["root"], "returns": ["0", "1 + max(height(root.left), height(root.right))"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 27}, "calls": ["max", "height.height"], "source_code": "def height(root):\n    if root is None:\n        return 0\n    else:\n        return 1 + max(height(root.left), height(root.right))"}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "height.unittest.main", "type": "script"}, "is_test": true}