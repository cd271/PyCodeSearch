{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/tree/bst/is_bst.py", "fileNameBase": "is_bst", "extension": "py", "doc": {"long_description": "Assume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes\nwith keys less than the node's key.\nThe right subtree of a node contains only nodes\nwith keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\nExample 1:\n    2\n   /   1   3\nBinary tree [2,1,3], return true.\nExample 2:\n    1\n   /   2   3\nBinary tree [1,2,3], return false.", "short_description": "Given a binary tree, determine if it is a valid binary search tree (BST).", "full": "Given a binary tree, determine if it is a valid binary search tree (BST).\n\nAssume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes\nwith keys less than the node's key.\nThe right subtree of a node contains only nodes\nwith keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\nExample 1:\n    2\n   /   1   3\nBinary tree [2,1,3], return true.\nExample 2:\n    1\n   /   2   3\nBinary tree [1,2,3], return false."}}, "functions": {"is_bst": {"args": ["root"], "returns": ["True", "False"], "min_max_lineno": {"min_lineno": 23, "max_lineno": 43}, "calls": ["stack.pop", "stack.append"], "store_vars_calls": {"root": "stack.pop"}, "source_code": "def is_bst(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: bool\n    \"\"\"\n    stack = []\n    pre = None\n    while root or stack:\n        while root:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        if pre and root.val <= pre.val:\n            return False\n        pre = root\n        root = root.right\n    return True"}}, "is_test": false}