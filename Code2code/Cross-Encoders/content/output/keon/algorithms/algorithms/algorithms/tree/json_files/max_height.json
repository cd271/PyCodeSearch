{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/tree/max_height.py", "fileNameBase": "max_height", "extension": "py", "doc": {"long_description": "The maximum depth is the number of nodes along the\nlongest path from the root node down to the farthest leaf node.", "short_description": "Given a binary tree, find its maximum depth.", "full": "Given a binary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the\nlongest path from the root node down to the farthest leaf node."}}, "dependencies": [{"from_module": "tree", "import": "TreeNode", "type": "internal", "type_element": "module"}], "functions": {"max_height": {"args": ["root"], "returns": ["height", "0"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 34}, "calls": ["queue.pop", "level.append"], "store_vars_calls": {"node": "queue.pop"}, "source_code": "def max_height(root):\n    if root is None:\n        return 0\n    height = 0\n    queue = [root]\n    while queue:\n        height += 1\n        level = []\n        while queue:\n            node = queue.pop(0)\n            if node.left is not None:\n                level.append(node.left)\n            if node.right is not None:\n                level.append(node.right)\n        queue = level\n    return height"}, "print_tree": {"args": ["root"], "min_max_lineno": {"min_lineno": 36, "max_lineno": 41}, "calls": ["print", "max_height.print_tree"], "source_code": "def print_tree(root):\n    if root is not None:\n        print(root.val)\n        print_tree(root.left)\n        print_tree(root.right)"}}, "body": {"calls": ["tree.TreeNode", "max_height.max_height", "max_height.print_tree", "print"], "store_vars_calls": {"tree": "TreeNode", "tree.left": "TreeNode", "tree.right": "TreeNode", "tree.left.left": "TreeNode", "tree.left.left.right": "TreeNode", "tree.left.right": "TreeNode", "tree.right.left": "TreeNode", "height": "max_height"}, "source_code": ["TreeNode(10)", "TreeNode(12)", "TreeNode(15)", "TreeNode(25)", "TreeNode(100)", "TreeNode(30)", "TreeNode(36)", "max_height(tree)", "print_tree(tree)", "print('height:', height)"]}, "main_info": {"main_flag": 1, "main_function": "max_height.TreeNode", "type": "script"}, "is_test": false}