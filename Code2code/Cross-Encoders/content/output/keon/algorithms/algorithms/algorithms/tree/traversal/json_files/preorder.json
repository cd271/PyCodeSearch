{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/algorithms/tree/traversal/preorder.py", "fileNameBase": "preorder", "extension": "py", "doc": {"short_description": "Time complexity : O(n)", "full": "Time complexity : O(n)"}}, "classes": {"Node": {"doc": {"short_description": "This is a class of Node ", "full": "This is a class of Node "}, "min_max_lineno": {"min_lineno": 6, "max_lineno": 13}, "methods": {"__init__": {"args": ["self", "val", "left", "right"], "min_max_lineno": {"min_lineno": 9, "max_lineno": 13}, "source_code": "def __init__(self, val, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right"}}}}, "functions": {"preorder": {"doc": {"short_description": "Function to Preorder "}, "args": ["root"], "returns": ["res", "res"], "min_max_lineno": {"min_lineno": 15, "max_lineno": 30}, "calls": ["stack.append", "stack.pop", "res.append"], "store_vars_calls": {"root": "stack.pop"}, "source_code": "def preorder(root):\n    \"\"\" Function to Preorder \"\"\"\n    res = []\n    if not root:\n        return res\n    stack = []\n    stack.append(root)\n    while stack:\n        root = stack.pop()\n        res.append(root.val)\n        if root.right:\n            stack.append(root.right)\n        if root.left:\n            stack.append(root.left)\n    return res"}, "preorder_rec": {"doc": {"short_description": "Recursive Implementation "}, "args": ["root", "res"], "returns": ["res", "[]"], "min_max_lineno": {"min_lineno": 31, "max_lineno": 41}, "calls": ["res.append", "preorder.preorder_rec"], "source_code": "def preorder_rec(root, res=None):\n    \"\"\" Recursive Implementation \"\"\"\n    if root is None:\n        return []\n    if res is None:\n        res = []\n    res.append(root.val)\n    preorder_rec(root.left, res)\n    preorder_rec(root.right, res)\n    return res"}}, "is_test": false}