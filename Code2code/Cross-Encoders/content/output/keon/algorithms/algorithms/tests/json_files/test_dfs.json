{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/tests/test_dfs.py", "fileNameBase": "test_dfs", "extension": "py"}, "dependencies": [{"from_module": "algorithms.dfs", "import": "get_factors", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dfs", "import": "get_factors_iterative1", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dfs", "import": "get_factors_iterative2", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dfs", "import": "num_islands", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dfs", "import": "pacific_atlantic", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dfs", "import": "Sudoku", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dfs", "import": "walls_and_gates", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dfs", "import": "find_path", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestAllFactors": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 25}, "methods": {"test_get_factors": {"args": ["self"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 17}, "calls": ["test_dfs.TestAllFactors.assertEqual", "algorithms.dfs.get_factors"], "source_code": "def test_get_factors(self):\n    self.assertEqual([[2, 16], [2, 2, 8], [2, 2, 2, 4], [2, 2, 2, 2, 2], [2, 4, 4], [4, 8]], get_factors(32))"}, "test_get_factors_iterative1": {"args": ["self"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 21}, "calls": ["test_dfs.TestAllFactors.assertEqual", "algorithms.dfs.get_factors_iterative1"], "source_code": "def test_get_factors_iterative1(self):\n    self.assertEqual([[2, 16], [4, 8], [2, 2, 8], [2, 4, 4], [2, 2, 2, 4], [2, 2, 2, 2, 2]], get_factors_iterative1(32))"}, "test_get_factors_iterative2": {"args": ["self"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 25}, "calls": ["test_dfs.TestAllFactors.assertEqual", "algorithms.dfs.get_factors_iterative2"], "source_code": "def test_get_factors_iterative2(self):\n    self.assertEqual([[2, 2, 2, 2, 2], [2, 2, 2, 4], [2, 2, 8], [2, 4, 4], [2, 16], [4, 8]], get_factors_iterative2(32))"}}}, "TestCountIslands": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 33}, "methods": {"test_num_islands": {"args": ["self"], "min_max_lineno": {"min_lineno": 28, "max_lineno": 33}, "calls": ["test_dfs.TestCountIslands.assertEqual", "algorithms.dfs.num_islands"], "source_code": "def test_num_islands(self):\n    self.assertEqual(1, num_islands([[1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0]]))\n    self.assertEqual(3, num_islands([[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]]))"}}}, "TestPacificAtlantic": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 35, "max_lineno": 43}, "methods": {"test_pacific_atlantic": {"args": ["self"], "min_max_lineno": {"min_lineno": 36, "max_lineno": 43}, "calls": ["test_dfs.TestPacificAtlantic.assertEqual", "algorithms.dfs.pacific_atlantic"], "source_code": "def test_pacific_atlantic(self):\n    self.assertEqual([[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]], pacific_atlantic([[1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4]]))"}}}, "TestSudoku": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 45, "max_lineno": 52}, "methods": {"test_sudoku_solver": {"args": ["self"], "min_max_lineno": {"min_lineno": 46, "max_lineno": 52}, "calls": ["algorithms.dfs.Sudoku", "algorithms.dfs.Sudoku.solve", "test_dfs.TestSudoku.assertEqual"], "store_vars_calls": {"test_obj": "Sudoku"}, "source_code": "def test_sudoku_solver(self):\n    board = [['5', '3', '.'], ['6', '.', '.'], ['.', '9', '8']]\n    test_obj = Sudoku(board, 3, 3)\n    test_obj.solve()\n    self.assertEqual([['5', '3', '1'], ['6', '1', '2'], ['1', '9', '8']], test_obj.board)"}}}, "TestWallsAndGates": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 54, "max_lineno": 63}, "methods": {"test_walls_and_gates": {"args": ["self"], "min_max_lineno": {"min_lineno": 55, "max_lineno": 63}, "calls": ["algorithms.dfs.walls_and_gates", "test_dfs.TestWallsAndGates.assertEqual", "float"], "source_code": "def test_walls_and_gates(self):\n    rooms = [[float('inf'), -1, 0, float('inf')], [float('inf'), float('inf'), float('inf'), -1], [float('inf'), -1, float('inf'), -1], [0, -1, float('inf'), float('inf')]]\n    walls_and_gates(rooms)\n    self.assertEqual([[3, -1, 0, 1], [2, 2, 1, -1], [1, -1, 2, -1], [0, -1, 3, 4]], rooms)"}}}, "TestMazeSearch": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 65, "max_lineno": 77}, "methods": {"test_maze_search": {"args": ["self"], "min_max_lineno": {"min_lineno": 66, "max_lineno": 77}, "calls": ["test_dfs.TestMazeSearch.assertEqual", "algorithms.dfs.find_path"], "source_code": "def test_maze_search(self):\n    maze_1 = [[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1]]\n    self.assertEqual(37, find_path(maze_1))\n    maze_2 = [[1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1]]\n    self.assertEqual(14, find_path(maze_2))\n    maze_3 = [[1, 0, 0], [0, 1, 1], [0, 1, 1]]\n    self.assertEqual(-1, find_path(maze_3))"}}}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_dfs.unittest.main", "type": "script"}, "is_test": true}