{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/tests/test_dp.py", "fileNameBase": "test_dp", "extension": "py"}, "dependencies": [{"from_module": "algorithms.dp", "import": "max_profit_naive", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "max_profit_optimized", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "climb_stairs", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "climb_stairs_optimized", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "count", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "combination_sum_topdown", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "combination_sum_bottom_up", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "edit_distance", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "egg_drop", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "fib_recursive", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "fib_list", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "fib_iter", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "hosoya_testing", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "house_robber", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "Job", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "schedule", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "Item", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "get_maximum_value", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "longest_increasing_subsequence", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "longest_increasing_subsequence_optimized", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "longest_increasing_subsequence_optimized2", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "int_divide", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "find_k_factor", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "planting_trees", "type": "external", "type_element": "module"}, {"from_module": "algorithms.dp", "import": "regex_matching", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestBuySellStock": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 32}, "methods": {"test_max_profit_naive": {"args": ["self"], "min_max_lineno": {"min_lineno": 25, "max_lineno": 28}, "calls": ["test_dp.TestBuySellStock.assertEqual", "algorithms.dp.max_profit_naive"], "source_code": "def test_max_profit_naive(self):\n    self.assertEqual(max_profit_naive([7, 1, 5, 3, 6, 4]), 5)\n    self.assertEqual(max_profit_naive([7, 6, 4, 3, 1]), 0)"}, "test_max_profit_optimized": {"args": ["self"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 32}, "calls": ["test_dp.TestBuySellStock.assertEqual", "algorithms.dp.max_profit_optimized"], "source_code": "def test_max_profit_optimized(self):\n    self.assertEqual(max_profit_optimized([7, 1, 5, 3, 6, 4]), 5)\n    self.assertEqual(max_profit_optimized([7, 6, 4, 3, 1]), 0)"}}}, "TestClimbingStairs": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 34, "max_lineno": 42}, "methods": {"test_climb_stairs": {"args": ["self"], "min_max_lineno": {"min_lineno": 35, "max_lineno": 38}, "calls": ["test_dp.TestClimbingStairs.assertEqual", "algorithms.dp.climb_stairs"], "source_code": "def test_climb_stairs(self):\n    self.assertEqual(climb_stairs(2), 2)\n    self.assertEqual(climb_stairs(10), 89)"}, "test_climb_stairs_optimized": {"args": ["self"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 42}, "calls": ["test_dp.TestClimbingStairs.assertEqual", "algorithms.dp.climb_stairs_optimized"], "source_code": "def test_climb_stairs_optimized(self):\n    self.assertEqual(climb_stairs_optimized(2), 2)\n    self.assertEqual(climb_stairs_optimized(10), 89)"}}}, "TestCoinChange": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 48}, "methods": {"test_count": {"args": ["self"], "min_max_lineno": {"min_lineno": 45, "max_lineno": 48}, "calls": ["test_dp.TestCoinChange.assertEqual", "algorithms.dp.count"], "source_code": "def test_count(self):\n    self.assertEqual(count([1, 2, 3], 4), 4)\n    self.assertEqual(count([2, 5, 3, 6], 10), 5)"}}}, "TestCombinationSum": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 50, "max_lineno": 56}, "methods": {"test_combination_sum_topdown": {"args": ["self"], "min_max_lineno": {"min_lineno": 51, "max_lineno": 53}, "calls": ["test_dp.TestCombinationSum.assertEqual", "algorithms.dp.combination_sum_topdown"], "source_code": "def test_combination_sum_topdown(self):\n    self.assertEqual(combination_sum_topdown([1, 2, 3], 4), 7)"}, "test_combination_sum_bottom_up": {"args": ["self"], "min_max_lineno": {"min_lineno": 54, "max_lineno": 56}, "calls": ["test_dp.TestCombinationSum.assertEqual", "algorithms.dp.combination_sum_bottom_up"], "source_code": "def test_combination_sum_bottom_up(self):\n    self.assertEqual(combination_sum_bottom_up([1, 2, 3], 4), 7)"}}}, "TestEditDistance": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 58, "max_lineno": 62}, "methods": {"test_edit_distance": {"args": ["self"], "min_max_lineno": {"min_lineno": 59, "max_lineno": 62}, "calls": ["test_dp.TestEditDistance.assertEqual", "algorithms.dp.edit_distance"], "source_code": "def test_edit_distance(self):\n    self.assertEqual(edit_distance('food', 'money'), 4)\n    self.assertEqual(edit_distance('horse', 'ros'), 3)"}}}, "TestEggDrop": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 64, "max_lineno": 69}, "methods": {"test_egg_drop": {"args": ["self"], "min_max_lineno": {"min_lineno": 65, "max_lineno": 69}, "calls": ["test_dp.TestEggDrop.assertEqual", "algorithms.dp.egg_drop"], "source_code": "def test_egg_drop(self):\n    self.assertEqual(egg_drop(1, 2), 2)\n    self.assertEqual(egg_drop(2, 6), 3)\n    self.assertEqual(egg_drop(3, 14), 4)"}}}, "TestFib": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 71, "max_lineno": 83}, "methods": {"test_fib_recursive": {"args": ["self"], "min_max_lineno": {"min_lineno": 72, "max_lineno": 75}, "calls": ["test_dp.TestFib.assertEqual", "algorithms.dp.fib_recursive"], "source_code": "def test_fib_recursive(self):\n    self.assertEqual(fib_recursive(10), 55)\n    self.assertEqual(fib_recursive(30), 832040)"}, "test_fib_list": {"args": ["self"], "min_max_lineno": {"min_lineno": 76, "max_lineno": 79}, "calls": ["test_dp.TestFib.assertEqual", "algorithms.dp.fib_list"], "source_code": "def test_fib_list(self):\n    self.assertEqual(fib_list(10), 55)\n    self.assertEqual(fib_list(30), 832040)"}, "test_fib_iter": {"args": ["self"], "min_max_lineno": {"min_lineno": 80, "max_lineno": 83}, "calls": ["test_dp.TestFib.assertEqual", "algorithms.dp.fib_iter"], "source_code": "def test_fib_iter(self):\n    self.assertEqual(fib_iter(10), 55)\n    self.assertEqual(fib_iter(30), 832040)"}}}, "TestHosoyaTriangle": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 85, "max_lineno": 113}, "methods": {"test_hosoya": {"args": ["self"], "min_max_lineno": {"min_lineno": 93, "max_lineno": 113}, "calls": ["test_dp.TestHosoyaTriangle.assertEqual", "algorithms.dp.hosoya_testing"], "source_code": "def test_hosoya(self):\n    self.assertEqual([1], hosoya_testing(1))\n    self.assertEqual([1, 1, 1, 2, 1, 2, 3, 2, 2, 3, 5, 3, 4, 3, 5, 8, 5, 6, 6, 5, 8], hosoya_testing(6))\n    self.assertEqual([1, 1, 1, 2, 1, 2, 3, 2, 2, 3, 5, 3, 4, 3, 5, 8, 5, 6, 6, 5, 8, 13, 8, 10, 9, 10, 8, 13, 21, 13, 16, 15, 15, 16, 13, 21, 34, 21, 26, 24, 25, 24, 26, 21, 34, 55, 34, 42, 39, 40, 40, 39, 42, 34, 55], hosoya_testing(10))"}}}, "TestHouseRobber": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 115, "max_lineno": 118}, "methods": {"test_house_robber": {"args": ["self"], "min_max_lineno": {"min_lineno": 116, "max_lineno": 118}, "calls": ["test_dp.TestHouseRobber.assertEqual", "algorithms.dp.house_robber"], "source_code": "def test_house_robber(self):\n    self.assertEqual(44, house_robber([1, 2, 16, 3, 15, 3, 12, 1]))"}}}, "TestJobScheduling": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 120, "max_lineno": 124}, "methods": {"test_job_scheduling": {"args": ["self"], "min_max_lineno": {"min_lineno": 121, "max_lineno": 124}, "calls": ["test_dp.TestJobScheduling.assertEqual", "algorithms.dp.Job", "algorithms.dp.schedule"], "source_code": "def test_job_scheduling(self):\n    (job1, job2) = (Job(1, 3, 2), Job(2, 3, 4))\n    self.assertEqual(4, schedule([job1, job2]))"}}}, "TestKnapsack": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 126, "max_lineno": 134}, "methods": {"test_get_maximum_value": {"args": ["self"], "min_max_lineno": {"min_lineno": 127, "max_lineno": 134}, "calls": ["test_dp.TestKnapsack.assertEqual", "algorithms.dp.Item", "algorithms.dp.get_maximum_value"], "source_code": "def test_get_maximum_value(self):\n    (item1, item2, item3) = (Item(60, 10), Item(100, 20), Item(120, 30))\n    self.assertEqual(220, get_maximum_value([item1, item2, item3], 50))\n    (item1, item2, item3, item4) = (Item(60, 5), Item(50, 3), Item(70, 4), Item(30, 2))\n    self.assertEqual(80, get_maximum_value([item1, item2, item3, item4], 5))"}}}, "TestLongestIncreasingSubsequence": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 136, "max_lineno": 140}, "methods": {"test_longest_increasing_subsequence": {"args": ["self"], "min_max_lineno": {"min_lineno": 137, "max_lineno": 140}, "calls": ["test_dp.TestLongestIncreasingSubsequence.assertEqual", "algorithms.dp.longest_increasing_subsequence"], "source_code": "def test_longest_increasing_subsequence(self):\n    sequence = [1, 101, 10, 2, 3, 100, 4, 6, 2]\n    self.assertEqual(5, longest_increasing_subsequence(sequence))"}}}, "TestLongestIncreasingSubsequenceOptimized": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 142, "max_lineno": 146}, "methods": {"test_longest_increasing_subsequence_optimized": {"args": ["self"], "min_max_lineno": {"min_lineno": 143, "max_lineno": 146}, "calls": ["test_dp.TestLongestIncreasingSubsequenceOptimized.assertEqual", "algorithms.dp.longest_increasing_subsequence"], "source_code": "def test_longest_increasing_subsequence_optimized(self):\n    sequence = [1, 101, 10, 2, 3, 100, 4, 6, 2]\n    self.assertEqual(5, longest_increasing_subsequence(sequence))"}}}, "TestLongestIncreasingSubsequenceOptimized2": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 148, "max_lineno": 152}, "methods": {"test_longest_increasing_subsequence_optimized2": {"args": ["self"], "min_max_lineno": {"min_lineno": 149, "max_lineno": 152}, "calls": ["test_dp.TestLongestIncreasingSubsequenceOptimized2.assertEqual", "algorithms.dp.longest_increasing_subsequence"], "source_code": "def test_longest_increasing_subsequence_optimized2(self):\n    sequence = [1, 101, 10, 2, 3, 100, 4, 6, 2]\n    self.assertEqual(5, longest_increasing_subsequence(sequence))"}}}, "TestIntDivide": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 154, "max_lineno": 159}, "methods": {"test_int_divide": {"args": ["self"], "min_max_lineno": {"min_lineno": 155, "max_lineno": 159}, "calls": ["test_dp.TestIntDivide.assertEqual", "algorithms.dp.int_divide"], "source_code": "def test_int_divide(self):\n    self.assertEqual(5, int_divide(4))\n    self.assertEqual(42, int_divide(10))\n    self.assertEqual(204226, int_divide(50))"}}}, "Test_dp_K_Factor": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 161, "max_lineno": 187}, "methods": {"test_kfactor": {"args": ["self"], "min_max_lineno": {"min_lineno": 162, "max_lineno": 187}, "calls": ["test_dp.Test_dp_K_Factor.assertEqual", "algorithms.dp.find_k_factor"], "source_code": "def test_kfactor(self):\n    n1 = 4\n    k1 = 1\n    self.assertEqual(find_k_factor(n1, k1), 1)\n    n2 = 7\n    k2 = 1\n    self.assertEqual(find_k_factor(n2, k2), 70302)\n    n3 = 10\n    k3 = 2\n    self.assertEqual(find_k_factor(n3, k3), 74357)\n    n4 = 8\n    k4 = 2\n    self.assertEqual(find_k_factor(n4, k4), 53)\n    n5 = 9\n    k5 = 1\n    self.assertEqual(find_k_factor(n5, k5), 71284044)"}}}, "TestPlantingTrees": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 189, "max_lineno": 213}, "methods": {"test_simple": {"args": ["self"], "min_max_lineno": {"min_lineno": 190, "max_lineno": 201}, "calls": ["algorithms.dp.planting_trees", "test_dp.TestPlantingTrees.assertEqual"], "store_vars_calls": {"res": "planting_trees"}, "source_code": "def test_simple(self):\n    trees = [0, 1, 10, 10]\n    L = 10\n    W = 1\n    res = planting_trees(trees, L, W)\n    self.assertEqual(res, 2.414213562373095)"}, "test_simple2": {"args": ["self"], "min_max_lineno": {"min_lineno": 202, "max_lineno": 213}, "calls": ["algorithms.dp.planting_trees", "test_dp.TestPlantingTrees.assertEqual"], "store_vars_calls": {"res": "planting_trees"}, "source_code": "def test_simple2(self):\n    trees = [0, 3, 5, 5, 6, 9]\n    L = 10\n    W = 1\n    res = planting_trees(trees, L, W)\n    self.assertEqual(res, 9.28538328578604)"}}}, "TestRegexMatching": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 214, "max_lineno": 260}, "methods": {"test_none_0": {"args": ["self"], "min_max_lineno": {"min_lineno": 215, "max_lineno": 219}, "calls": ["test_dp.TestRegexMatching.assertTrue", "algorithms.dp.regex_matching.is_match"], "source_code": "def test_none_0(self):\n    s = ''\n    p = ''\n    self.assertTrue(regex_matching.is_match(s, p))"}, "test_none_1": {"args": ["self"], "min_max_lineno": {"min_lineno": 220, "max_lineno": 224}, "calls": ["test_dp.TestRegexMatching.assertFalse", "algorithms.dp.regex_matching.is_match"], "source_code": "def test_none_1(self):\n    s = ''\n    p = 'a'\n    self.assertFalse(regex_matching.is_match(s, p))"}, "test_no_symbol_equal": {"args": ["self"], "min_max_lineno": {"min_lineno": 225, "max_lineno": 229}, "calls": ["test_dp.TestRegexMatching.assertTrue", "algorithms.dp.regex_matching.is_match"], "source_code": "def test_no_symbol_equal(self):\n    s = 'abcd'\n    p = 'abcd'\n    self.assertTrue(regex_matching.is_match(s, p))"}, "test_no_symbol_not_equal_0": {"args": ["self"], "min_max_lineno": {"min_lineno": 230, "max_lineno": 234}, "calls": ["test_dp.TestRegexMatching.assertFalse", "algorithms.dp.regex_matching.is_match"], "source_code": "def test_no_symbol_not_equal_0(self):\n    s = 'abcd'\n    p = 'efgh'\n    self.assertFalse(regex_matching.is_match(s, p))"}, "test_no_symbol_not_equal_1": {"args": ["self"], "min_max_lineno": {"min_lineno": 235, "max_lineno": 239}, "calls": ["test_dp.TestRegexMatching.assertFalse", "algorithms.dp.regex_matching.is_match"], "source_code": "def test_no_symbol_not_equal_1(self):\n    s = 'ab'\n    p = 'abb'\n    self.assertFalse(regex_matching.is_match(s, p))"}, "test_symbol_0": {"args": ["self"], "min_max_lineno": {"min_lineno": 240, "max_lineno": 244}, "calls": ["test_dp.TestRegexMatching.assertTrue", "algorithms.dp.regex_matching.is_match"], "source_code": "def test_symbol_0(self):\n    s = ''\n    p = 'a*'\n    self.assertTrue(regex_matching.is_match(s, p))"}, "test_symbol_1": {"args": ["self"], "min_max_lineno": {"min_lineno": 245, "max_lineno": 249}, "calls": ["test_dp.TestRegexMatching.assertTrue", "algorithms.dp.regex_matching.is_match"], "source_code": "def test_symbol_1(self):\n    s = 'a'\n    p = 'ab*'\n    self.assertTrue(regex_matching.is_match(s, p))"}, "test_symbol_2": {"args": ["self"], "min_max_lineno": {"min_lineno": 250, "max_lineno": 260}, "calls": ["test_dp.TestRegexMatching.assertTrue", "algorithms.dp.regex_matching.is_match"], "source_code": "def test_symbol_2(self):\n    s = 'abb'\n    p = 'ab*'\n    self.assertTrue(regex_matching.is_match(s, p))"}}}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_dp.unittest.main", "type": "script"}, "is_test": true}