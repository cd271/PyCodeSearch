{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/tests/test_heap.py", "fileNameBase": "test_heap", "extension": "py"}, "dependencies": [{"from_module": "algorithms.heap", "import": "BinaryHeap", "type": "external", "type_element": "module"}, {"from_module": "algorithms.heap", "import": "get_skyline", "type": "external", "type_element": "module"}, {"from_module": "algorithms.heap", "import": "max_sliding_window", "type": "external", "type_element": "module"}, {"from_module": "algorithms.heap", "import": "k_closest", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestBinaryHeap": {"doc": {"short_description": "Test suite for the binary_heap data structures", "full": "Test suite for the binary_heap data structures"}, "extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 42}, "methods": {"setUp": {"args": ["self"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 24}, "calls": ["algorithms.heap.BinaryHeap", "test_heap.TestBinaryHeap.min_heap.insert"], "store_vars_calls": {"self.min_heap": "BinaryHeap"}, "source_code": "def setUp(self):\n    self.min_heap = BinaryHeap()\n    self.min_heap.insert(4)\n    self.min_heap.insert(50)\n    self.min_heap.insert(7)\n    self.min_heap.insert(55)\n    self.min_heap.insert(90)\n    self.min_heap.insert(87)"}, "test_insert": {"args": ["self"], "min_max_lineno": {"min_lineno": 25, "max_lineno": 32}, "calls": ["test_heap.TestBinaryHeap.min_heap.insert", "test_heap.TestBinaryHeap.assertEqual"], "source_code": "def test_insert(self):\n    self.min_heap.insert(2)\n    self.assertEqual([0, 2, 50, 4, 55, 90, 87, 7], self.min_heap.heap)\n    self.assertEqual(7, self.min_heap.current_size)"}, "test_remove_min": {"args": ["self"], "min_max_lineno": {"min_lineno": 33, "max_lineno": 42}, "calls": ["test_heap.TestBinaryHeap.min_heap.remove_min", "test_heap.TestBinaryHeap.assertEqual"], "store_vars_calls": {"ret": "self.min_heap.remove_min"}, "source_code": "def test_remove_min(self):\n    ret = self.min_heap.remove_min()\n    self.assertEqual(4, ret)\n    self.assertEqual([0, 7, 50, 87, 55, 90], self.min_heap.heap)\n    self.assertEqual(5, self.min_heap.current_size)"}}}, "TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 66}, "methods": {"test_get_skyline": {"args": ["self"], "min_max_lineno": {"min_lineno": 45, "max_lineno": 52}, "calls": ["test_heap.TestSuite.assertEqual", "algorithms.heap.get_skyline"], "source_code": "def test_get_skyline(self):\n    buildings = [[2, 9, 10], [3, 7, 15], [5, 12, 12], [15, 20, 10], [19, 24, 8]]\n    output = [[2, 10], [3, 15], [7, 12], [12, 0], [15, 10], [20, 8], [24, 0]]\n    self.assertEqual(output, get_skyline(buildings))"}, "test_max_sliding_window": {"args": ["self"], "min_max_lineno": {"min_lineno": 53, "max_lineno": 56}, "calls": ["test_heap.TestSuite.assertEqual", "algorithms.heap.max_sliding_window"], "source_code": "def test_max_sliding_window(self):\n    nums = [1, 3, -1, -3, 5, 3, 6, 7]\n    self.assertEqual([3, 3, 5, 5, 6, 7], max_sliding_window(nums, 3))"}, "test_k_closest_points": {"args": ["self"], "min_max_lineno": {"min_lineno": 57, "max_lineno": 66}, "calls": ["test_heap.TestSuite.assertEqual", "algorithms.heap.k_closest"], "source_code": "def test_k_closest_points(self):\n    points = [(1, 0), (2, 3), (5, 2), (1, 1), (2, 8), (10, 2), (-1, 0), (-2, -2)]\n    self.assertEqual([(-1, 0), (1, 0)], k_closest(points, 2))\n    self.assertEqual([(1, 1), (-1, 0), (1, 0)], k_closest(points, 3))\n    self.assertEqual([(-2, -2), (1, 1), (1, 0), (-1, 0)], k_closest(points, 4))\n    self.assertEqual([(10, 2), (2, 8), (5, 2), (-2, -2), (2, 3), (1, 0), (-1, 0), (1, 1)], k_closest(points, 8))"}}}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_heap.unittest.main", "type": "script"}, "is_test": true}