{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/tests/test_matrix.py", "fileNameBase": "test_matrix", "extension": "py"}, "dependencies": [{"from_module": "algorithms.matrix", "import": "bomb_enemy", "type": "external", "type_element": "module"}, {"from_module": "algorithms.matrix", "import": "copy_transform", "type": "external", "type_element": "module"}, {"from_module": "algorithms.matrix", "import": "crout_matrix_decomposition", "type": "external", "type_element": "module"}, {"from_module": "algorithms.matrix", "import": "cholesky_matrix_decomposition", "type": "external", "type_element": "module"}, {"from_module": "algorithms.matrix", "import": "matrix_exponentiation", "type": "external", "type_element": "module"}, {"from_module": "algorithms.matrix", "import": "matrix_inversion", "type": "external", "type_element": "module"}, {"from_module": "algorithms.matrix", "import": "multiply", "type": "external", "type_element": "module"}, {"from_module": "algorithms.matrix", "import": "rotate_image", "type": "external", "type_element": "module"}, {"from_module": "algorithms.matrix", "import": "sparse_dot_vector", "type": "external", "type_element": "module"}, {"from_module": "algorithms.matrix", "import": "spiral_traversal", "type": "external", "type_element": "module"}, {"from_module": "algorithms.matrix", "import": "sudoku_validator", "type": "external", "type_element": "module"}, {"from_module": "algorithms.matrix", "import": "sum_sub_squares", "type": "external", "type_element": "module"}, {"from_module": "algorithms.matrix", "import": "sort_matrix_diagonally", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestBombEnemy": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 42}, "methods": {"test_3x4": {"args": ["self"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 42}, "calls": ["test_matrix.TestBombEnemy.assertEqual", "algorithms.matrix.bomb_enemy.max_killed_enemies"], "source_code": "def test_3x4(self):\n    grid1 = [['0', 'E', '0', '0'], ['E', '0', 'W', 'E'], ['0', 'E', '0', '0']]\n    self.assertEqual(3, bomb_enemy.max_killed_enemies(grid1))\n    grid1 = [['0', 'E', '0', 'E'], ['E', 'E', 'E', '0'], ['E', '0', 'W', 'E'], ['0', 'E', '0', '0']]\n    grid2 = [['0', '0', '0', 'E'], ['E', '0', '0', '0'], ['E', '0', 'W', 'E'], ['0', 'E', '0', '0']]\n    self.assertEqual(5, bomb_enemy.max_killed_enemies(grid1))\n    self.assertEqual(3, bomb_enemy.max_killed_enemies(grid2))"}}}, "TestCopyTransform": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 68}, "methods": {"test_copy_transform": {"args": ["self"], "min_max_lineno": {"min_lineno": 52, "max_lineno": 68}, "calls": ["test_matrix.TestCopyTransform.assertEqual", "algorithms.matrix.copy_transform.rotate_clockwise", "algorithms.matrix.copy_transform.rotate_counterclockwise", "algorithms.matrix.copy_transform.top_left_invert", "algorithms.matrix.copy_transform.bottom_left_invert"], "source_code": "def test_copy_transform(self):\n    self.assertEqual(copy_transform.rotate_clockwise([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [[7, 4, 1], [8, 5, 2], [9, 6, 3]])\n    self.assertEqual(copy_transform.rotate_counterclockwise([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [[3, 6, 9], [2, 5, 8], [1, 4, 7]])\n    self.assertEqual(copy_transform.top_left_invert([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [[1, 4, 7], [2, 5, 8], [3, 6, 9]])\n    self.assertEqual(copy_transform.bottom_left_invert([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [[9, 6, 3], [8, 5, 2], [7, 4, 1]])"}}}, "TestCroutMatrixDecomposition": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 70, "max_lineno": 104}, "methods": {"test_crout_matrix_decomposition": {"args": ["self"], "min_max_lineno": {"min_lineno": 78, "max_lineno": 104}, "calls": ["test_matrix.TestCroutMatrixDecomposition.assertEqual", "algorithms.matrix.crout_matrix_decomposition.crout_matrix_decomposition"], "source_code": "def test_crout_matrix_decomposition(self):\n    self.assertEqual(([[9.0, 0.0], [7.0, 0.0]], [[1.0, 1.0], [0.0, 1.0]]), crout_matrix_decomposition.crout_matrix_decomposition([[9, 9], [7, 7]]))\n    self.assertEqual(([[1.0, 0.0, 0.0], [3.0, -2.0, 0.0], [6.0, -5.0, 0.0]], [[1.0, 2.0, 3.0], [0.0, 1.0, 2.0], [0.0, 0.0, 1.0]]), crout_matrix_decomposition.crout_matrix_decomposition([[1, 2, 3], [3, 4, 5], [6, 7, 8]]))\n    self.assertEqual(([[2.0, 0, 0, 0], [4.0, -1.0, 0, 0], [6.0, -2.0, 2.0, 0], [8.0, -3.0, 3.0, 0.0]], [[1.0, 0.5, 1.5, 0.5], [0, 1.0, 2.0, 1.0], [0, 0, 1.0, 0.0], [0, 0, 0, 1.0]]), crout_matrix_decomposition.crout_matrix_decomposition([[2, 1, 3, 1], [4, 1, 4, 1], [6, 1, 7, 1], [8, 1, 9, 1]]))"}}}, "TestCholeskyMatrixDecomposition": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 106, "max_lineno": 140}, "methods": {"test_cholesky_matrix_decomposition": {"args": ["self"], "min_max_lineno": {"min_lineno": 114, "max_lineno": 140}, "calls": ["test_matrix.TestCholeskyMatrixDecomposition.assertEqual", "algorithms.matrix.cholesky_matrix_decomposition.cholesky_decomposition"], "source_code": "def test_cholesky_matrix_decomposition(self):\n    self.assertEqual([[2.0, 0.0, 0.0], [6.0, 1.0, 0.0], [-8.0, 5.0, 3.0]], cholesky_matrix_decomposition.cholesky_decomposition([[4, 12, -16], [12, 37, -43], [-16, -43, 98]]))\n    self.assertEqual(None, cholesky_matrix_decomposition.cholesky_decomposition([[4, 12, -8], [12, 4, -43], [-16, -1, 32]]))\n    self.assertEqual(None, cholesky_matrix_decomposition.cholesky_decomposition([[4, 12, -16], [12, 37, -43], [-16, -43, 98], [1, 2, 3]]))\n    self.assertEqual([[2.23606797749979, 0.0, 0.0, 0.0], [0.5366563145999494, 2.389979079406345, 0.0, 0.0], [0.13416407864998736, -0.19749126846635062, 2.818332343581848, 0.0], [-0.2683281572999747, 0.43682390737048743, 0.64657701271919, 3.052723872310221]], cholesky_matrix_decomposition.cholesky_decomposition([[5, 1.2, 0.3, -0.6], [1.2, 6, -0.4, 0.9], [0.3, -0.4, 8, 1.7], [-0.6, 0.9, 1.7, 10]]))"}}}, "TestInversion": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 142, "max_lineno": 180}, "methods": {"test_inversion": {"args": ["self"], "min_max_lineno": {"min_lineno": 150, "max_lineno": 180}, "calls": ["test_matrix.TestInversion.assertEqual", "algorithms.matrix.matrix_inversion.invert_matrix", "Fraction"], "source_code": "def test_inversion(self):\n    from fractions import Fraction\n    m1 = [[1, 1], [1, 2]]\n    self.assertEqual(matrix_inversion.invert_matrix(m1), [[2, -1], [-1, 1]])\n    m2 = [[1, 2], [3, 4, 5]]\n    self.assertEqual(matrix_inversion.invert_matrix(m2), [[-1]])\n    m3 = [[1, 1, 1, 1], [2, 2, 2, 2]]\n    self.assertEqual(matrix_inversion.invert_matrix(m3), [[-2]])\n    m4 = [[1]]\n    self.assertEqual(matrix_inversion.invert_matrix(m4), [[-3]])\n    m5 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    self.assertEqual(matrix_inversion.invert_matrix(m5), [[-4]])\n    m6 = [[3, 5, 1], [2, 5, 0], [1, 9, 8]]\n    self.assertEqual(matrix_inversion.invert_matrix(m6), [[Fraction(40, 53), Fraction(-31, 53), Fraction(-5, 53)], [Fraction(-16, 53), Fraction(23, 53), Fraction(2, 53)], [Fraction(13, 53), Fraction(-22, 53), Fraction(5, 53)]])"}}}, "TestMatrixExponentiation": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 182, "max_lineno": 204}, "methods": {"test_matrix_exponentiation": {"args": ["self"], "min_max_lineno": {"min_lineno": 190, "max_lineno": 204}, "calls": ["test_matrix.TestMatrixExponentiation.assertEqual", "algorithms.matrix.matrix_exponentiation.matrix_exponentiation"], "source_code": "def test_matrix_exponentiation(self):\n    mat = [[1, 0, 2], [2, 1, 0], [0, 2, 1]]\n    self.assertEqual(matrix_exponentiation.matrix_exponentiation(mat, 0), [[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n    self.assertEqual(matrix_exponentiation.matrix_exponentiation(mat, 1), [[1, 0, 2], [2, 1, 0], [0, 2, 1]])\n    self.assertEqual(matrix_exponentiation.matrix_exponentiation(mat, 2), [[1, 4, 4], [4, 1, 4], [4, 4, 1]])\n    self.assertEqual(matrix_exponentiation.matrix_exponentiation(mat, 5), [[81, 72, 90], [90, 81, 72], [72, 90, 81]])"}}}, "TestMultiply": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 206, "max_lineno": 217}, "methods": {"test_multiply": {"args": ["self"], "min_max_lineno": {"min_lineno": 214, "max_lineno": 217}, "calls": ["test_matrix.TestMultiply.assertEqual", "algorithms.matrix.multiply.multiply"], "source_code": "def test_multiply(self):\n    self.assertEqual(multiply.multiply([[1, 2, 3], [2, 1, 1]], [[1], [2], [3]]), [[14], [7]])"}}}, "TestRotateImage": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 219, "max_lineno": 231}, "methods": {"test_rotate_image": {"args": ["self"], "min_max_lineno": {"min_lineno": 227, "max_lineno": 231}, "calls": ["test_matrix.TestRotateImage.assertEqual", "algorithms.matrix.rotate_image.rotate"], "source_code": "def test_rotate_image(self):\n    self.assertEqual(rotate_image.rotate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [[7, 4, 1], [8, 5, 2], [9, 6, 3]])"}}}, "TestSparseDotVector": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 233, "max_lineno": 248}, "methods": {"test_sparse_dot_vector": {"args": ["self"], "min_max_lineno": {"min_lineno": 241, "max_lineno": 248}, "calls": ["test_matrix.TestSparseDotVector.assertEqual", "algorithms.matrix.sparse_dot_vector.dot_product", "algorithms.matrix.sparse_dot_vector.vector_to_index_value_list"], "source_code": "def test_sparse_dot_vector(self):\n    self.assertEqual(sparse_dot_vector.dot_product(sparse_dot_vector.vector_to_index_value_list([1.0, 2.0, 3.0]), sparse_dot_vector.vector_to_index_value_list([0.0, 2.0, 2.0])), 10)"}}}, "TestSpiralTraversal": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 250, "max_lineno": 261}, "methods": {"test_spiral_traversal": {"args": ["self"], "min_max_lineno": {"min_lineno": 258, "max_lineno": 261}, "calls": ["test_matrix.TestSpiralTraversal.assertEqual", "algorithms.matrix.spiral_traversal.spiral_traversal"], "source_code": "def test_spiral_traversal(self):\n    self.assertEqual(spiral_traversal.spiral_traversal([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [1, 2, 3, 6, 9, 8, 7, 4, 5])"}}}, "TestSudokuValidator": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 263, "max_lineno": 354}, "methods": {"test_sudoku_validator": {"args": ["self"], "min_max_lineno": {"min_lineno": 271, "max_lineno": 354}, "calls": ["test_matrix.TestSudokuValidator.assertTrue", "test_matrix.TestSudokuValidator.assertFalse", "algorithms.matrix.sudoku_validator.valid_solution", "algorithms.matrix.sudoku_validator.valid_solution_hashtable", "algorithms.matrix.sudoku_validator.valid_solution_set"], "source_code": "def test_sudoku_validator(self):\n    self.assertTrue(sudoku_validator.valid_solution([[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]]))\n    self.assertTrue(sudoku_validator.valid_solution_hashtable([[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]]))\n    self.assertTrue(sudoku_validator.valid_solution_set([[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]]))\n    self.assertFalse(sudoku_validator.valid_solution([[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 0, 3, 4, 9], [1, 0, 0, 3, 4, 2, 5, 6, 0], [8, 5, 9, 7, 6, 1, 0, 2, 0], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 0, 1, 5, 3, 7, 2, 1, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 0, 0, 4, 8, 1, 1, 7, 9]]))\n    self.assertFalse(sudoku_validator.valid_solution_hashtable([[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 0, 3, 4, 9], [1, 0, 0, 3, 4, 2, 5, 6, 0], [8, 5, 9, 7, 6, 1, 0, 2, 0], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 0, 1, 5, 3, 7, 2, 1, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 0, 0, 4, 8, 1, 1, 7, 9]]))\n    self.assertFalse(sudoku_validator.valid_solution_set([[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 0, 3, 4, 9], [1, 0, 0, 3, 4, 2, 5, 6, 0], [8, 5, 9, 7, 6, 1, 0, 2, 0], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 0, 1, 5, 3, 7, 2, 1, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 0, 0, 4, 8, 1, 1, 7, 9]]))"}}}, "TestSumSubSquares": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 357, "max_lineno": 373}, "methods": {"test_sum_sub_squares": {"args": ["self"], "min_max_lineno": {"min_lineno": 365, "max_lineno": 373}, "calls": ["test_matrix.TestSumSubSquares.assertEqual", "algorithms.matrix.sum_sub_squares.sum_sub_squares"], "source_code": "def test_sum_sub_squares(self):\n    mat = [[1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3], [4, 4, 4, 4, 4], [5, 5, 5, 5, 5]]\n    self.assertEqual(sum_sub_squares.sum_sub_squares(mat, 3), [[18, 18, 18], [27, 27, 27], [36, 36, 36]])"}}}, "TestSortMatrixDiagonally": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 375, "max_lineno": 387}, "methods": {"test_sort_diagonally": {"args": ["self"], "min_max_lineno": {"min_lineno": 376, "max_lineno": 387}, "calls": ["test_matrix.TestSortMatrixDiagonally.assertEqual", "algorithms.matrix.sort_matrix_diagonally.sort_diagonally"], "source_code": "def test_sort_diagonally(self):\n    mat = [[3, 3, 1, 1], [2, 2, 1, 2], [1, 1, 1, 2]]\n    self.assertEqual(sort_matrix_diagonally.sort_diagonally(mat), [[1, 1, 1, 1], [1, 2, 2, 2], [1, 2, 3, 3]])"}}}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_matrix.unittest.main", "type": "script"}, "is_test": true}