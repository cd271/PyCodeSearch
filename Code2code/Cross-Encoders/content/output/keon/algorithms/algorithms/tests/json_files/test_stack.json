{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/tests/test_stack.py", "fileNameBase": "test_stack", "extension": "py"}, "dependencies": [{"from_module": "algorithms.stack", "import": "first_is_consecutive", "type": "external", "type_element": "module"}, {"from_module": "algorithms.stack", "import": "second_is_consecutive", "type": "external", "type_element": "module"}, {"from_module": "algorithms.stack", "import": "is_sorted", "type": "external", "type_element": "module"}, {"from_module": "algorithms.stack", "import": "remove_min", "type": "external", "type_element": "module"}, {"from_module": "algorithms.stack", "import": "first_stutter", "type": "external", "type_element": "module"}, {"from_module": "algorithms.stack", "import": "second_stutter", "type": "external", "type_element": "module"}, {"from_module": "algorithms.stack", "import": "first_switch_pairs", "type": "external", "type_element": "module"}, {"from_module": "algorithms.stack", "import": "second_switch_pairs", "type": "external", "type_element": "module"}, {"from_module": "algorithms.stack", "import": "is_valid", "type": "external", "type_element": "module"}, {"from_module": "algorithms.stack", "import": "simplify_path", "type": "external", "type_element": "module"}, {"from_module": "algorithms.stack", "import": "ArrayStack", "type": "external", "type_element": "module"}, {"from_module": "algorithms.stack", "import": "LinkedListStack", "type": "external", "type_element": "module"}, {"from_module": "algorithms.stack", "import": "OrderedStack", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 70}, "methods": {"test_is_consecutive": {"args": ["self"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 25}, "calls": ["test_stack.TestSuite.assertTrue", "test_stack.TestSuite.assertFalse", "algorithms.stack.first_is_consecutive", "algorithms.stack.second_is_consecutive"], "source_code": "def test_is_consecutive(self):\n    self.assertTrue(first_is_consecutive([3, 4, 5, 6, 7]))\n    self.assertFalse(first_is_consecutive([3, 4, 6, 7]))\n    self.assertFalse(first_is_consecutive([3, 2, 1]))\n    self.assertTrue(second_is_consecutive([3, 4, 5, 6, 7]))\n    self.assertFalse(second_is_consecutive([3, 4, 6, 7]))\n    self.assertFalse(second_is_consecutive([3, 2, 1]))"}, "test_is_sorted": {"args": ["self"], "min_max_lineno": {"min_lineno": 26, "max_lineno": 31}, "calls": ["test_stack.TestSuite.assertFalse", "test_stack.TestSuite.assertTrue", "algorithms.stack.is_sorted"], "source_code": "def test_is_sorted(self):\n    self.assertFalse(is_sorted([6, 3, 5, 1, 2, 4]))\n    self.assertTrue(is_sorted([1, 2, 3, 4, 5, 6]))\n    self.assertFalse(is_sorted([3, 4, 7, 8, 5, 6]))"}, "test_remove_min": {"args": ["self"], "min_max_lineno": {"min_lineno": 32, "max_lineno": 37}, "calls": ["test_stack.TestSuite.assertEqual", "algorithms.stack.remove_min"], "source_code": "def test_remove_min(self):\n    self.assertEqual([2, 8, 3, 7, 3], remove_min([2, 8, 3, -6, 7, 3]))\n    self.assertEqual([4, 8, 7], remove_min([4, 8, 3, 7, 3]))"}, "test_stutter": {"args": ["self"], "min_max_lineno": {"min_lineno": 38, "max_lineno": 44}, "calls": ["test_stack.TestSuite.assertEqual", "algorithms.stack.first_stutter", "algorithms.stack.second_stutter"], "source_code": "def test_stutter(self):\n    self.assertEqual([3, 3, 7, 7, 1, 1, 14, 14, 9, 9], first_stutter([3, 7, 1, 14, 9]))\n    self.assertEqual([3, 3, 7, 7, 1, 1, 14, 14, 9, 9], second_stutter([3, 7, 1, 14, 9]))"}, "test_switch_pairs": {"args": ["self"], "min_max_lineno": {"min_lineno": 45, "max_lineno": 58}, "calls": ["test_stack.TestSuite.assertEqual", "algorithms.stack.first_switch_pairs", "algorithms.stack.second_switch_pairs"], "source_code": "def test_switch_pairs(self):\n    self.assertEqual([8, 3, 9, 17, 10, 1], first_switch_pairs([3, 8, 17, 9, 1, 10]))\n    self.assertEqual([8, 3, 9, 17, 10, 1], second_switch_pairs([3, 8, 17, 9, 1, 10]))\n    self.assertEqual([8, 3, 9, 17, 1], first_switch_pairs([3, 8, 17, 9, 1]))\n    self.assertEqual([8, 3, 9, 17, 1], second_switch_pairs([3, 8, 17, 9, 1]))"}, "test_is_valid_parenthesis": {"args": ["self"], "min_max_lineno": {"min_lineno": 59, "max_lineno": 66}, "calls": ["test_stack.TestSuite.assertTrue", "test_stack.TestSuite.assertFalse", "algorithms.stack.is_valid"], "source_code": "def test_is_valid_parenthesis(self):\n    self.assertTrue(is_valid('[]'))\n    self.assertTrue(is_valid('[]()[]'))\n    self.assertFalse(is_valid('[[[]]'))\n    self.assertTrue(is_valid('{([])}'))\n    self.assertFalse(is_valid('(}'))"}, "test_simplify_path": {"args": ["self"], "min_max_lineno": {"min_lineno": 67, "max_lineno": 70}, "calls": ["test_stack.TestSuite.assertEqual", "algorithms.stack.simplify_path"], "source_code": "def test_simplify_path(self):\n    p = '/my/name/is/..//keon'\n    self.assertEqual('/my/name/keon', simplify_path(p))"}}}, "TestStack": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 72, "max_lineno": 137}, "methods": {"test_ArrayStack": {"args": ["self"], "min_max_lineno": {"min_lineno": 73, "max_lineno": 104}, "calls": ["algorithms.stack.ArrayStack", "algorithms.stack.ArrayStack.push", "iter", "test_stack.TestStack.assertEqual", "test_stack.TestStack.assertRaises", "test_stack.TestStack.assertFalse", "test_stack.TestStack.assertTrue", "next", "len", "str", "algorithms.stack.ArrayStack.is_empty", "algorithms.stack.ArrayStack.peek", "algorithms.stack.ArrayStack.pop"], "store_vars_calls": {"stack": "ArrayStack", "it": "iter"}, "source_code": "def test_ArrayStack(self):\n    stack = ArrayStack()\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n    it = iter(stack)\n    self.assertEqual(3, next(it))\n    self.assertEqual(2, next(it))\n    self.assertEqual(1, next(it))\n    self.assertRaises(StopIteration, next, it)\n    self.assertEqual(3, len(stack))\n    self.assertEqual(str(stack), 'Top-> 3 2 1')\n    self.assertFalse(stack.is_empty())\n    self.assertEqual(3, stack.peek())\n    self.assertEqual(3, stack.pop())\n    self.assertEqual(2, stack.pop())\n    self.assertEqual(1, stack.pop())\n    self.assertTrue(stack.is_empty())"}, "test_LinkedListStack": {"args": ["self"], "min_max_lineno": {"min_lineno": 105, "max_lineno": 137}, "calls": ["algorithms.stack.LinkedListStack", "algorithms.stack.LinkedListStack.push", "iter", "test_stack.TestStack.assertEqual", "test_stack.TestStack.assertRaises", "test_stack.TestStack.assertFalse", "test_stack.TestStack.assertTrue", "next", "len", "str", "algorithms.stack.LinkedListStack.is_empty", "algorithms.stack.LinkedListStack.peek", "algorithms.stack.LinkedListStack.pop"], "store_vars_calls": {"stack": "LinkedListStack", "it": "iter"}, "source_code": "def test_LinkedListStack(self):\n    stack = LinkedListStack()\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n    it = iter(stack)\n    self.assertEqual(3, next(it))\n    self.assertEqual(2, next(it))\n    self.assertEqual(1, next(it))\n    self.assertRaises(StopIteration, next, it)\n    self.assertEqual(3, len(stack))\n    self.assertEqual(str(stack), 'Top-> 3 2 1')\n    self.assertFalse(stack.is_empty())\n    self.assertEqual(3, stack.peek())\n    self.assertEqual(3, stack.pop())\n    self.assertEqual(2, stack.pop())\n    self.assertEqual(1, stack.pop())\n    self.assertTrue(stack.is_empty())"}}}, "TestOrderedStack": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 139, "max_lineno": 151}, "methods": {"test_OrderedStack": {"args": ["self"], "min_max_lineno": {"min_lineno": 140, "max_lineno": 151}, "calls": ["algorithms.stack.OrderedStack", "test_stack.TestOrderedStack.assertTrue", "algorithms.stack.OrderedStack.push", "test_stack.TestOrderedStack.assertEqual", "algorithms.stack.OrderedStack.is_empty", "algorithms.stack.OrderedStack.pop", "algorithms.stack.OrderedStack.peek", "algorithms.stack.OrderedStack.size"], "store_vars_calls": {"stack": "OrderedStack"}, "source_code": "def test_OrderedStack(self):\n    stack = OrderedStack()\n    self.assertTrue(stack.is_empty())\n    stack.push(1)\n    stack.push(4)\n    stack.push(3)\n    stack.push(6)\n    'bottom - > 1 3 4 6 '\n    self.assertEqual(6, stack.pop())\n    self.assertEqual(4, stack.peek())\n    self.assertEqual(3, stack.size())"}}}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_stack.unittest.main", "type": "script"}, "is_test": true}