{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/RepoAnalysis/CodeSearch/Code2code/content/keon/algorithms/tests/test_streaming.py", "fileNameBase": "test_streaming", "extension": "py"}, "dependencies": [{"from_module": "algorithms.streaming.misra_gries", "import": "misras_gries", "type": "external", "type_element": "module"}, {"from_module": "algorithms.streaming", "import": "one_sparse", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestMisraGreis": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 21}, "methods": {"test_misra_correct": {"args": ["self"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 16}, "calls": ["test_streaming.TestMisraGreis.assertEqual", "algorithms.streaming.misra_gries.misras_gries"], "source_code": "def test_misra_correct(self):\n    self.assertEqual({'4': 5}, misras_gries([1, 4, 4, 4, 5, 4, 4]))\n    self.assertEqual({'1': 4}, misras_gries([0, 0, 0, 1, 1, 1, 1]))\n    self.assertEqual({'0': 4, '1': 3}, misras_gries([0, 0, 0, 0, 1, 1, 1, 2, 2], 3))"}, "test_misra_incorrect": {"args": ["self"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 21}, "calls": ["test_streaming.TestMisraGreis.assertEqual", "algorithms.streaming.misra_gries.misras_gries"], "source_code": "def test_misra_incorrect(self):\n    self.assertEqual(None, misras_gries([1, 2, 5, 4, 5, 4, 4, 5, 4, 4, 5]))\n    self.assertEqual(None, misras_gries([0, 0, 0, 2, 1, 1, 1]))\n    self.assertEqual(None, misras_gries([0, 0, 0, 1, 1, 1]))"}}}, "TestOneSparse": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 23, "max_lineno": 42}, "methods": {"test_one_sparse_correct": {"args": ["self"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 30}, "calls": ["test_streaming.TestOneSparse.assertEqual", "algorithms.streaming.one_sparse"], "source_code": "def test_one_sparse_correct(self):\n    self.assertEqual(4, one_sparse([(4, '+'), (2, '+'), (2, '-'), (4, '+'), (3, '+'), (3, '-')]))\n    self.assertEqual(2, one_sparse([(2, '+'), (2, '+'), (2, '+'), (2, '+'), (2, '+'), (2, '+'), (2, '+')]))"}, "test_one_sparse_incorrect": {"args": ["self"], "min_max_lineno": {"min_lineno": 31, "max_lineno": 42}, "calls": ["test_streaming.TestOneSparse.assertEqual", "algorithms.streaming.one_sparse"], "source_code": "def test_one_sparse_incorrect(self):\n    self.assertEqual(None, one_sparse([(2, '+'), (2, '+'), (2, '+'), (2, '+'), (2, '+'), (2, '+'), (1, '+')]))\n    self.assertEqual(None, one_sparse([(2, '+'), (2, '+'), (2, '+'), (2, '+'), (2, '-'), (2, '-'), (2, '-'), (2, '-')]))\n    self.assertEqual(None, one_sparse([(2, '+'), (2, '+'), (4, '+'), (4, '+')]))"}}}}, "is_test": true}