{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/arrays/garage.py", "fileNameBase": "garage", "extension": "py", "doc": {"long_description": "of the parking lot and the final state. Each step we are only allowed to\nmove a car\nout of its place and move it into the empty spot.\nThe goal is to find out the least movement needed to rearrange\nthe parking lot from the initial state to the final state.\n\nSay the initial state is an array:\n\n[1, 2, 3, 0, 4],\nwhere 1, 2, 3, 4 are different cars, and 0 is the empty spot.\n\nAnd the final state is\n\n[0, 3, 2, 1, 4].\nWe can swap 1 with 0 in the initial array to get [0, 2, 3, 1, 4] and so on.\nEach step swap with 0 only.\n\nEdit:\nNow also prints the sequence of changes in states.\nOutput of this example :-\n\ninitial: [1, 2, 3, 0, 4]\nfinal:   [0, 3, 2, 1, 4]\nSteps =  4\nSequence : \n0 2 3 1 4\n2 0 3 1 4\n2 3 0 1 4\n0 3 2 1 4", "short_description": "There is a parking lot with only one empty spot. Given the initial state", "full": "There is a parking lot with only one empty spot. Given the initial state\nof the parking lot and the final state. Each step we are only allowed to\nmove a car\nout of its place and move it into the empty spot.\nThe goal is to find out the least movement needed to rearrange\nthe parking lot from the initial state to the final state.\n\nSay the initial state is an array:\n\n[1, 2, 3, 0, 4],\nwhere 1, 2, 3, 4 are different cars, and 0 is the empty spot.\n\nAnd the final state is\n\n[0, 3, 2, 1, 4].\nWe can swap 1 with 0 in the initial array to get [0, 2, 3, 1, 4] and so on.\nEach step swap with 0 only.\n\nEdit:\nNow also prints the sequence of changes in states.\nOutput of this example :-\n\ninitial: [1, 2, 3, 0, 4]\nfinal:   [0, 3, 2, 1, 4]\nSteps =  4\nSequence : \n0 2 3 1 4\n2 0 3 1 4\n2 3 0 1 4\n0 3 2 1 4"}}, "functions": {"garage": {"args": ["initial", "final"], "returns": [["steps", "seq"]], "min_max_lineno": {"min_lineno": 35, "max_lineno": 55}, "calls": ["initial.index", "seq.append", "final.index", "range", "len"], "store_vars_calls": {"zero": "initial.index", "pos": "initial.index"}, "source_code": "def garage(initial, final):\n    initial = initial[:]\n    seq = []\n    steps = 0\n    while initial != final:\n        zero = initial.index(0)\n        if zero != final.index(0):\n            car_to_move = final[zero]\n            pos = initial.index(car_to_move)\n            (initial[zero], initial[pos]) = (initial[pos], initial[zero])\n        else:\n            for i in range(len(initial)):\n                if initial[i] != final[i]:\n                    (initial[zero], initial[i]) = (initial[i], initial[zero])\n                    break\n        seq.append(initial[:])\n        steps += 1\n    return (steps, seq)"}}, "is_test": false}