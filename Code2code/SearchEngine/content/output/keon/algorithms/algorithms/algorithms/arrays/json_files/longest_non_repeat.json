{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/arrays/longest_non_repeat.py", "fileNameBase": "longest_non_repeat", "extension": "py", "doc": {"long_description": "without repeating characters.\n\nExamples:\nGiven \"abcabcbb\", the answer is \"abc\", which the length is 3.\nGiven \"bbbbb\", the answer is \"b\", with the length of 1.\nGiven \"pwwkew\", the answer is \"wke\", with the length of 3.\nNote that the answer must be a substring,\n\"pwke\" is a subsequence and not a substring.", "short_description": "Given a string, find the length of the longest substring", "full": "Given a string, find the length of the longest substring\nwithout repeating characters.\n\nExamples:\nGiven \"abcabcbb\", the answer is \"abc\", which the length is 3.\nGiven \"bbbbb\", the answer is \"b\", with the length of 1.\nGiven \"pwwkew\", the answer is \"wke\", with the length of 3.\nNote that the answer must be a substring,\n\"pwke\" is a subsequence and not a substring."}}, "functions": {"longest_non_repeat_v1": {"doc": {"long_description": "without repeating characters.", "short_description": "Find the length of the longest substring"}, "args": ["string"], "returns": ["max_length", "0"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 30}, "calls": ["range", "len", "max"], "store_vars_calls": {"max_length": "max", "j": "max"}, "source_code": "def longest_non_repeat_v1(string):\n    \"\"\"\n    Find the length of the longest substring\n    without repeating characters.\n    \"\"\"\n    if string is None:\n        return 0\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        max_length = max(max_length, i - j + 1)\n    return max_length"}, "longest_non_repeat_v2": {"doc": {"long_description": "without repeating characters.\nUses alternative algorithm.", "short_description": "Find the length of the longest substring"}, "args": ["string"], "returns": ["max_len", "0"], "min_max_lineno": {"min_lineno": 31, "max_lineno": 48}, "calls": ["enumerate", "max"], "store_vars_calls": {"max_len": "max"}, "source_code": "def longest_non_repeat_v2(string):\n    \"\"\"\n    Find the length of the longest substring\n    without repeating characters.\n    Uses alternative algorithm.\n    \"\"\"\n    if string is None:\n        return 0\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, index - start + 1)\n        used_char[char] = index\n    return max_len"}, "get_longest_non_repeat_v1": {"doc": {"long_description": "without repeating characters.\nReturn max_len and the substring as a tuple", "short_description": "Find the length of the longest substring"}, "args": ["string"], "returns": [["max_length", "sub_string"], ["0", "''"]], "min_max_lineno": {"min_lineno": 50, "max_lineno": 70}, "calls": ["range", "len", "max"], "store_vars_calls": {"j": "max"}, "source_code": "def get_longest_non_repeat_v1(string):\n    \"\"\"\n    Find the length of the longest substring\n    without repeating characters.\n    Return max_len and the substring as a tuple\n    \"\"\"\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        if i - j + 1 > max_length:\n            max_length = i - j + 1\n            sub_string = string[j:i + 1]\n    return (max_length, sub_string)"}, "get_longest_non_repeat_v2": {"doc": {"long_description": "without repeating characters.\nUses alternative algorithm.\nReturn max_len and the substring as a tuple", "short_description": "Find the length of the longest substring"}, "args": ["string"], "returns": [["max_len", "sub_string"], ["0", "''"]], "min_max_lineno": {"min_lineno": 71, "max_lineno": 92}, "calls": ["enumerate"], "source_code": "def get_longest_non_repeat_v2(string):\n    \"\"\"\n    Find the length of the longest substring\n    without repeating characters.\n    Uses alternative algorithm.\n    Return max_len and the substring as a tuple\n    \"\"\"\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        elif index - start + 1 > max_len:\n            max_len = index - start + 1\n            sub_string = string[start:index + 1]\n        used_char[char] = index\n    return (max_len, sub_string)"}}, "is_test": false}