{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/arrays/plus_one.py", "fileNameBase": "plus_one", "extension": "py", "doc": {"long_description": "adding one to each numeral.\n\nThe digits are stored big-endian, such that the most significant\ndigit is at the head of the list.", "short_description": "Given a non-negative number represented as an array of digits,", "full": "Given a non-negative number represented as an array of digits,\nadding one to each numeral.\n\nThe digits are stored big-endian, such that the most significant\ndigit is at the head of the list."}}, "functions": {"plus_one_v1": {"args": ["digits"], "returns": ["res[::-1]"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 29}, "calls": ["len", "res.append"], "source_code": "def plus_one_v1(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    digits[-1] = digits[-1] + 1\n    res = []\n    ten = 0\n    i = len(digits) - 1\n    while i >= 0 or ten == 1:\n        summ = 0\n        if i >= 0:\n            summ += digits[i]\n        if ten:\n            summ += 1\n        res.append(summ % 10)\n        ten = summ // 10\n        i -= 1\n    return res[::-1]"}, "plus_one_v2": {"args": ["digits"], "returns": ["digits", "digits"], "min_max_lineno": {"min_lineno": 31, "max_lineno": 40}, "calls": ["len", "range", "digits.insert"], "store_vars_calls": {"n": "len"}, "source_code": "def plus_one_v2(digits):\n    n = len(digits)\n    for i in range(n - 1, -1, -1):\n        if digits[i] < 9:\n            digits[i] += 1\n            return digits\n        digits[i] = 0\n    digits.insert(0, 1)\n    return digits"}, "plus_one_v3": {"args": ["num_arr"], "returns": ["[1] + num_arr", "num_arr"], "min_max_lineno": {"min_lineno": 42, "max_lineno": 49}, "calls": ["reversed", "list", "enumerate"], "source_code": "def plus_one_v3(num_arr):\n    for idx in reversed(list(enumerate(num_arr))):\n        num_arr[idx[0]] = (num_arr[idx[0]] + 1) % 10\n        if num_arr[idx[0]]:\n            return num_arr\n    return [1] + num_arr"}}, "is_test": false}