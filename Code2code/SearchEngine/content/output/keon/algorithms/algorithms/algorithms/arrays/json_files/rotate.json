{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/arrays/rotate.py", "fileNameBase": "rotate", "extension": "py", "doc": {"long_description": "For example, with n = 7 and k = 3,\nthe array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].\n\nNote:\nTry to come up as many solutions as you can,\nthere are at least 3 different ways to solve this problem.", "short_description": "Rotate an array of n elements to the right by k steps.", "full": "Rotate an array of n elements to the right by k steps.\n\nFor example, with n = 7 and k = 3,\nthe array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].\n\nNote:\nTry to come up as many solutions as you can,\nthere are at least 3 different ways to solve this problem."}}, "functions": {"rotate_v1": {"doc": {"long_description": "T(n)- O(nk)", "short_description": "Rotate the entire array 'k' times"}, "args": ["array", "k"], "returns": ["array"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 30}, "calls": ["len", "range"], "store_vars_calls": {"n": "len"}, "source_code": "def rotate_v1(array, k):\n    \"\"\"\n    Rotate the entire array 'k' times\n    T(n)- O(nk)\n\n    :type array: List[int]\n    :type k: int\n    :rtype: void Do not return anything, modify array in-place instead.\n    \"\"\"\n    array = array[:]\n    n = len(array)\n    for i in range(k):\n        temp = array[n - 1]\n        for j in range(n - 1, 0, -1):\n            array[j] = array[j - 1]\n        array[0] = temp\n    return array"}, "rotate_v2": {"doc": {"long_description": "T(n)- O(n)", "short_description": "Reverse segments of the array, followed by the entire array"}, "args": ["array", "k"], "returns": ["array"], "min_max_lineno": {"min_lineno": 32, "max_lineno": 54}, "calls": ["len", "rotate.rotate_v2.reverse"], "store_vars_calls": {"n": "len"}, "functions": {"reverse": {"args": ["arr", "a", "b"], "min_max_lineno": {"min_lineno": 42, "max_lineno": 47}, "source_code": "def reverse(arr, a, b):\n    while a < b:\n        (arr[a], arr[b]) = (arr[b], arr[a])\n        a += 1\n        b -= 1"}}, "source_code": "def rotate_v2(array, k):\n    \"\"\"\n    Reverse segments of the array, followed by the entire array\n    T(n)- O(n)\n    :type array: List[int]\n    :type k: int\n    :rtype: void Do not return anything, modify nums in-place instead.\n    \"\"\"\n    array = array[:]\n\n    def reverse(arr, a, b):\n        while a < b:\n            (arr[a], arr[b]) = (arr[b], arr[a])\n            a += 1\n            b -= 1\n    n = len(array)\n    k = k % n\n    reverse(array, 0, n - k - 1)\n    reverse(array, n - k, n - 1)\n    reverse(array, 0, n - 1)\n    return array"}, "rotate_v3": {"args": ["array", "k"], "returns": ["array[length - k:] + array[:length - k]", "None"], "min_max_lineno": {"min_lineno": 56, "max_lineno": 62}, "calls": ["len"], "store_vars_calls": {"length": "len"}, "source_code": "def rotate_v3(array, k):\n    if array is None:\n        return None\n    length = len(array)\n    k = k % length\n    return array[length - k:] + array[:length - k]"}}, "is_test": false}