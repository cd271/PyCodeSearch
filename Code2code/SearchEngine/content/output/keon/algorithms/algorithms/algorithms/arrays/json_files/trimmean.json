{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/arrays/trimmean.py", "fileNameBase": "trimmean", "extension": "py", "doc": {"long_description": "For example, when making average score on athletes we need this option.\nSo, this algorithm affixes some percentage to neglect when making mean.\nFor example, if you suggest 20%, it will neglect the best 10% of values\nand the worst 10% of values.\n\nThis algorithm takes an array and percentage to neglect. After sorted,\nif index of array is larger or smaller than desired ratio, we don't\ncompute it.\n\nCompleity: O(n)", "short_description": "When make reliable means, we need to neglect best and worst values.", "full": "When make reliable means, we need to neglect best and worst values.\nFor example, when making average score on athletes we need this option.\nSo, this algorithm affixes some percentage to neglect when making mean.\nFor example, if you suggest 20%, it will neglect the best 10% of values\nand the worst 10% of values.\n\nThis algorithm takes an array and percentage to neglect. After sorted,\nif index of array is larger or smaller than desired ratio, we don't\ncompute it.\n\nCompleity: O(n)"}}, "functions": {"trimmean": {"args": ["arr", "per"], "returns": ["cal_sum / len(arr)"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 25}, "calls": ["arr.sort", "int", "len"], "store_vars_calls": {"neg_val": "int"}, "source_code": "def trimmean(arr, per):\n    ratio = per / 200\n    cal_sum = 0\n    arr.sort()\n    neg_val = int(len(arr) * ratio)\n    arr = arr[neg_val:len(arr) - neg_val]\n    for i in arr:\n        cal_sum += i\n    return cal_sum / len(arr)"}}, "is_test": false}