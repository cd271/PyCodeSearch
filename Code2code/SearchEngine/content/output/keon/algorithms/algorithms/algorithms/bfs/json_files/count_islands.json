{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/bfs/count_islands.py", "fileNameBase": "count_islands", "extension": "py", "doc": {"long_description": "Given a 2d grid map of '1's (land) and '0's (water),\ncount the number of islands.\nAn island is surrounded by water and is formed by\nconnecting adjacent lands horizontally or vertically.\nYou may assume all four edges of the grid are all surrounded by water.\n\nExample 1:\n11110\n11010\n11000\n00000\nAnswer: 1\n\nExample 2:\n11000\n11000\n00100\n00011\nAnswer: 3\n\nExample 3:\n111000\n110000\n100001\n001101\n001100\nAnswer: 3\n\nExample 4:\n110011\n001100\n000001\n111100\nAnswer: 5", "short_description": "This is a bfs-version of counting-islands problem in dfs section.", "full": "This is a bfs-version of counting-islands problem in dfs section.\nGiven a 2d grid map of '1's (land) and '0's (water),\ncount the number of islands.\nAn island is surrounded by water and is formed by\nconnecting adjacent lands horizontally or vertically.\nYou may assume all four edges of the grid are all surrounded by water.\n\nExample 1:\n11110\n11010\n11000\n00000\nAnswer: 1\n\nExample 2:\n11000\n11000\n00100\n00011\nAnswer: 3\n\nExample 3:\n111000\n110000\n100001\n001101\n001100\nAnswer: 3\n\nExample 4:\n110011\n001100\n000001\n111100\nAnswer: 5"}}, "functions": {"count_islands": {"args": ["grid"], "returns": ["num_islands"], "min_max_lineno": {"min_lineno": 40, "max_lineno": 66}, "calls": ["len", "range", "enumerate", "queue.append", "queue.pop"], "store_vars_calls": {"row": "len", "col": "len"}, "source_code": "def count_islands(grid):\n    row = len(grid)\n    col = len(grid[0])\n    num_islands = 0\n    visited = [[0] * col for i in range(row)]\n    directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]\n    queue = []\n    for i in range(row):\n        for (j, num) in enumerate(grid[i]):\n            if num == 1 and visited[i][j] != 1:\n                visited[i][j] = 1\n                queue.append((i, j))\n                while queue:\n                    (x, y) = queue.pop(0)\n                    for k in range(len(directions)):\n                        nx_x = x + directions[k][0]\n                        nx_y = y + directions[k][1]\n                        if nx_x >= 0 and nx_y >= 0 and (nx_x < row) and (nx_y < col):\n                            if visited[nx_x][nx_y] != 1 and grid[nx_x][nx_y] == 1:\n                                queue.append((nx_x, nx_y))\n                                visited[nx_x][nx_y] = 1\n                num_islands += 1\n    return num_islands"}}, "is_test": false}