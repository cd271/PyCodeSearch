{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/bfs/maze_search.py", "fileNameBase": "maze_search", "extension": "py"}, "dependencies": [{"from_module": "collections", "import": "deque", "type": "external", "type_element": "module"}], "functions": {"maze_search": {"args": ["maze"], "returns": ["-1", "-1", "steps"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 67}, "calls": ["collections.deque", "len", "collections.deque.popleft", "range", "collections.deque.append"], "store_vars_calls": {"queue": "deque"}, "source_code": "def maze_search(maze):\n    (BLOCKED, ALLOWED) = (0, 1)\n    (UNVISITED, VISITED) = (0, 1)\n    (initial_x, initial_y) = (0, 0)\n    if maze[initial_x][initial_y] == BLOCKED:\n        return -1\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    (height, width) = (len(maze), len(maze[0]))\n    (target_x, target_y) = (height - 1, width - 1)\n    queue = deque([(initial_x, initial_y, 0)])\n    is_visited = [[UNVISITED for w in range(width)] for h in range(height)]\n    is_visited[initial_x][initial_y] = VISITED\n    while queue:\n        (x, y, steps) = queue.popleft()\n        if x == target_x and y == target_y:\n            return steps\n        for (dx, dy) in directions:\n            new_x = x + dx\n            new_y = y + dy\n            if not (0 <= new_x < height and 0 <= new_y < width):\n                continue\n            if maze[new_x][new_y] == ALLOWED and is_visited[new_x][new_y] == UNVISITED:\n                queue.append((new_x, new_y, steps + 1))\n                is_visited[new_x][new_y] = VISITED\n    return -1"}}, "is_test": false}