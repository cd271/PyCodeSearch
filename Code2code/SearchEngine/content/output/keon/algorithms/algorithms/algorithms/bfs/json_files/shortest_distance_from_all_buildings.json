{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/bfs/shortest_distance_from_all_buildings.py", "fileNameBase": "shortest_distance_from_all_buildings", "extension": "py"}, "dependencies": [{"import": "collections", "type": "external", "type_element": "module"}], "functions": {"shortest_distance": {"args": ["grid"], "returns": ["res if res != float('inf') else -1", "-1"], "min_max_lineno": {"min_lineno": 9, "max_lineno": 29}, "calls": ["range", "float", "len", "shortest_distance_from_all_buildings.bfs", "min"], "store_vars_calls": {"res": "min"}, "source_code": "def shortest_distance(grid):\n    if not grid or not grid[0]:\n        return -1\n    matrix = [[[0, 0] for i in range(len(grid[0]))] for j in range(len(grid))]\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                bfs(grid, matrix, i, j, count)\n                count += 1\n    res = float('inf')\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j][1] == count:\n                res = min(res, matrix[i][j][0])\n    return res if res != float('inf') else -1"}, "bfs": {"args": ["grid", "matrix", "i", "j", "count"], "min_max_lineno": {"min_lineno": 30, "max_lineno": 41}, "calls": ["q.pop", "q.append", "len"], "source_code": "def bfs(grid, matrix, i, j, count):\n    q = [(i, j, 0)]\n    while q:\n        (i, j, step) = q.pop(0)\n        for (k, l) in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= k < len(grid) and 0 <= l < len(grid[0]) and (matrix[k][l][1] == count) and (grid[k][l] == 0):\n                matrix[k][l][0] += step + 1\n                matrix[k][l][1] = count + 1\n                q.append((k, l, step + 1))"}}, "is_test": false}