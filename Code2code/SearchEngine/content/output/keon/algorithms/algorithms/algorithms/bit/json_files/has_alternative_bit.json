{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/bit/has_alternative_bit.py", "fileNameBase": "has_alternative_bit", "extension": "py", "doc": {"long_description": "if two adjacent bits will always have different values.\n\nFor example:\nInput: 5\nOutput: True because the binary representation of 5 is: 101.\n\nInput: 7\nOutput: False because the binary representation of 7 is: 111.\n\nInput: 11\nOutput: False because the binary representation of 11 is: 1011.\n\nInput: 10\nOutput: True because The binary representation of 10 is: 1010.", "short_description": "Given a positive integer, check whether it has alternating bits: namely,", "full": "Given a positive integer, check whether it has alternating bits: namely,\nif two adjacent bits will always have different values.\n\nFor example:\nInput: 5\nOutput: True because the binary representation of 5 is: 101.\n\nInput: 7\nOutput: False because the binary representation of 7 is: 111.\n\nInput: 11\nOutput: False because the binary representation of 11 is: 1011.\n\nInput: 10\nOutput: True because The binary representation of 10 is: 1010."}}, "functions": {"has_alternative_bit": {"args": ["n"], "returns": ["True", "True", "False"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 33}, "source_code": "def has_alternative_bit(n):\n    first_bit = 0\n    second_bit = 0\n    while n:\n        first_bit = n & 1\n        if n >> 1:\n            second_bit = n >> 1 & 1\n            if not first_bit ^ second_bit:\n                return False\n        else:\n            return True\n        n = n >> 1\n    return True"}, "has_alternative_bit_fast": {"args": ["n"], "returns": ["mask1 == n + (n ^ mask1) or mask2 == n + (n ^ mask2)"], "min_max_lineno": {"min_lineno": 35, "max_lineno": 39}, "calls": ["int"], "store_vars_calls": {"mask1": "int", "mask2": "int"}, "source_code": "def has_alternative_bit_fast(n):\n    mask1 = int('aaaaaaaa', 16)\n    mask2 = int('55555555', 16)\n    return mask1 == n + (n ^ mask1) or mask2 == n + (n ^ mask2)"}}, "is_test": false}