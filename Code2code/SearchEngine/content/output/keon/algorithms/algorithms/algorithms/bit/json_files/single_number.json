{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/bit/single_number.py", "fileNameBase": "single_number", "extension": "py", "doc": {"long_description": "twice except for one. Find that single one.\n\nNOTE: This also works for finding a number occurring odd\n      number of times, where all the other numbers appear\n      even number of times.\n\nNote:\nYour algorithm should have a linear runtime complexity.\nCould you implement it without using extra memory?", "short_description": "Given an array of integers, every element appears", "full": "Given an array of integers, every element appears\ntwice except for one. Find that single one.\n\nNOTE: This also works for finding a number occurring odd\n      number of times, where all the other numbers appear\n      even number of times.\n\nNote:\nYour algorithm should have a linear runtime complexity.\nCould you implement it without using extra memory?"}}, "functions": {"single_number": {"doc": {"long_description": "Else if all numbers appear twice, returns 0.", "short_description": "Returns single number, if found."}, "args": ["nums"], "returns": ["i"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 24}, "source_code": "def single_number(nums):\n    \"\"\"\n    Returns single number, if found.\n    Else if all numbers appear twice, returns 0.\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    i = 0\n    for num in nums:\n        i ^= num\n    return i"}}, "is_test": false}