{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/compression/elias.py", "fileNameBase": "elias", "extension": "py", "doc": {"long_description": "encoding positive integers.\nIt is used most commonly when coding integers whose\nupper-bound cannot be determined beforehand.\nElias \u03b4 code or Elias delta code is a universal code\n encoding the positive integers,\nthat includes Elias \u03b3 code when calculating.\nBoth were developed by Peter Elias.", "short_description": "Elias \u03b3 code or Elias gamma code is a universal code", "full": "Elias \u03b3 code or Elias gamma code is a universal code\nencoding positive integers.\nIt is used most commonly when coding integers whose\nupper-bound cannot be determined beforehand.\nElias \u03b4 code or Elias delta code is a universal code\n encoding the positive integers,\nthat includes Elias \u03b3 code when calculating.\nBoth were developed by Peter Elias."}}, "dependencies": [{"from_module": "math", "import": "log", "type": "external", "type_element": "module"}], "functions": {"binary": {"args": ["x", "l"], "returns": ["fmt.format(x)"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 20}, "calls": ["fmt.format"], "source_code": "def binary(x, l=1):\n    fmt = '{0:0%db}' % l\n    return fmt.format(x)"}, "unary": {"args": ["x"], "returns": ["(x - 1) * '1' + '0'"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 24}, "source_code": "def unary(x):\n    return (x - 1) * '1' + '0'"}, "elias_generic": {"doc": {"long_description": "The first part is the unary number of 1 + \u230alog2(x)\u230b.\nThe second part is the binary number of x - 2^(\u230alog2(x)\u230b).\nFor the final result we add these two parts.", "short_description": "The compressed data is calculated in two parts."}, "args": ["lencoding", "x"], "returns": ["lencoding(first_part) + binary(a, k)", "'0'"], "min_max_lineno": {"min_lineno": 25, "max_lineno": 42}, "calls": ["int", "log2", "elias.binary", "elias.unary", "elias.elias_gamma"], "store_vars_calls": {"k": "int"}, "source_code": "def elias_generic(lencoding, x):\n    \"\"\"\n\tThe compressed data is calculated in two parts.\n\tThe first part is the unary number of 1 + \u230alog2(x)\u230b.\n\tThe second part is the binary number of x - 2^(\u230alog2(x)\u230b).\n\tFor the final result we add these two parts.\n\t\"\"\"\n    if x == 0:\n        return '0'\n    first_part = 1 + int(log2(x))\n    a = x - 2 ** int(log2(x))\n    k = int(log2(x))\n    return lencoding(first_part) + binary(a, k)"}, "elias_gamma": {"doc": {"short_description": "For the first part we put the unary number of x."}, "args": ["x"], "returns": ["elias_generic(unary, x)"], "min_max_lineno": {"min_lineno": 43, "max_lineno": 48}, "calls": ["elias.elias_generic"], "source_code": "def elias_gamma(x):\n    \"\"\"\n\tFor the first part we put the unary number of x.\n\t\"\"\"\n    return elias_generic(unary, x)"}, "elias_delta": {"doc": {"short_description": "For the first part we put the elias_g of the number."}, "args": ["x"], "returns": ["elias_generic(elias_gamma, x)"], "min_max_lineno": {"min_lineno": 49, "max_lineno": 54}, "calls": ["elias.elias_generic"], "source_code": "def elias_delta(x):\n    \"\"\"\n\tFor the first part we put the elias_g of the number.\n\t\"\"\"\n    return elias_generic(elias_gamma, x)"}}, "body": {"calls": ["math.log"], "source_code": ["log(x, 2)"]}, "is_test": false}