{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/compression/rle_compression.py", "fileNameBase": "rle_compression", "extension": "py", "doc": {"long_description": "that gets a stream of data as the input and returns a\nsequence of counts of consecutive data values in a row.\nWhen decompressed the data will be fully recovered as RLE\nis a lossless data compression.", "short_description": "Run-length encoding (RLE) is a simple compression algorithm ", "full": "Run-length encoding (RLE) is a simple compression algorithm \nthat gets a stream of data as the input and returns a\nsequence of counts of consecutive data values in a row.\nWhen decompressed the data will be fully recovered as RLE\nis a lossless data compression."}}, "functions": {"encode_rle": {"doc": {"long_description": "under a Run-Length Encoding.", "short_description": "Gets a stream of data and compresses it", "args": {"input": {"description": "The data to be encoded."}}, "returns": {"description": "The encoded string.", "is_generator": false}}, "args": ["input"], "returns": ["''", "encoded_str + (str(count) + prev_ch)"], "min_max_lineno": {"min_lineno": 9, "max_lineno": 37}, "calls": ["str"], "source_code": "def encode_rle(input):\n    \"\"\"\n    Gets a stream of data and compresses it\n    under a Run-Length Encoding.\n    :param input: The data to be encoded.\n    :return: The encoded string.\n    \"\"\"\n    if not input:\n        return ''\n    encoded_str = ''\n    prev_ch = ''\n    count = 1\n    for ch in input:\n        if ch != prev_ch:\n            if prev_ch:\n                encoded_str += str(count) + prev_ch\n            count = 1\n            prev_ch = ch\n        else:\n            count += 1\n    else:\n        return encoded_str + (str(count) + prev_ch)"}, "decode_rle": {"doc": {"long_description": "under a Run-Length Decoding.", "short_description": "Gets a stream of data and decompresses it", "args": {"input": {"description": "The data to be decoded."}}, "returns": {"description": "The decoded string.", "is_generator": false}}, "args": ["input"], "returns": ["decode_str"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 59}, "calls": ["ch.isdigit", "int"], "source_code": "def decode_rle(input):\n    \"\"\"\n    Gets a stream of data and decompresses it\n    under a Run-Length Decoding.\n    :param input: The data to be decoded.\n    :return: The decoded string.\n    \"\"\"\n    decode_str = ''\n    count = ''\n    for ch in input:\n        if not ch.isdigit():\n            decode_str += ch * int(count)\n            count = ''\n        else:\n            count += ch\n    return decode_str"}}, "is_test": false}