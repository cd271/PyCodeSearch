{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/dfs/maze_search.py", "fileNameBase": "maze_search", "extension": "py", "doc": {"long_description": "only step on the columns whose value is 1\nif there is no path, it returns -1\n(The first column(top left column) is not included in the answer.)\n\nEx 1)\nIf maze is\n[[1,0,1,1,1,1],\n [1,0,1,0,1,0],\n [1,0,1,0,1,1],\n [1,1,1,0,1,1]],\nthe answer is: 14\n\nEx 2)\nIf maze is\n[[1,0,0],\n [0,1,1],\n [0,1,1]],\nthe answer is: -1", "short_description": "Find shortest path from top left column to the right lowest column using DFS.", "full": "Find shortest path from top left column to the right lowest column using DFS.\nonly step on the columns whose value is 1\nif there is no path, it returns -1\n(The first column(top left column) is not included in the answer.)\n\nEx 1)\nIf maze is\n[[1,0,1,1,1,1],\n [1,0,1,0,1,0],\n [1,0,1,0,1,1],\n [1,1,1,0,1,1]],\nthe answer is: 14\n\nEx 2)\nIf maze is\n[[1,0,0],\n [0,1,1],\n [0,1,1]],\nthe answer is: -1"}}, "functions": {"find_path": {"args": ["maze"], "returns": ["cnt"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 27}, "calls": ["maze_search.dfs"], "store_vars_calls": {"cnt": "dfs"}, "source_code": "def find_path(maze):\n    cnt = dfs(maze, 0, 0, 0, -1)\n    return cnt"}, "dfs": {"args": ["maze", "i", "j", "depth", "cnt"], "returns": ["cnt", "cnt"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 56}, "calls": ["len", "range", "maze_search.dfs"], "store_vars_calls": {"row": "len", "col": "len", "cnt": "dfs"}, "source_code": "def dfs(maze, i, j, depth, cnt):\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    row = len(maze)\n    col = len(maze[0])\n    if i == row - 1 and j == col - 1:\n        if cnt == -1:\n            cnt = depth\n        elif cnt > depth:\n            cnt = depth\n        return cnt\n    maze[i][j] = 0\n    for k in range(len(directions)):\n        nx_i = i + directions[k][0]\n        nx_j = j + directions[k][1]\n        if nx_i >= 0 and nx_i < row and (nx_j >= 0) and (nx_j < col):\n            if maze[nx_i][nx_j] == 1:\n                cnt = dfs(maze, nx_i, nx_j, depth + 1, cnt)\n    maze[i][j] = 1\n    return cnt"}}, "is_test": false}