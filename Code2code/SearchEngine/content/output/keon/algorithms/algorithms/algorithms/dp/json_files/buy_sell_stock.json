{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/dp/buy_sell_stock.py", "fileNameBase": "buy_sell_stock", "extension": "py", "doc": {"long_description": "is the price of a given stock on day i.\n\nIf you were only permitted to complete at most one transaction\n(ie, buy one and sell one share of the stock),\ndesign an algorithm to find the maximum profit.\n\nExample 1:\nInput: [7, 1, 5, 3, 6, 4]\nOutput: 5\n\nmax. difference = 6-1 = 5\n(not 7-1 = 6, as selling price needs to be larger than buying price)\nExample 2:\nInput: [7, 6, 4, 3, 1]\nOutput: 0\n\nIn this case, no transaction is done, i.e. max profit = 0.", "short_description": "Say you have an array for which the ith element", "full": "Say you have an array for which the ith element\nis the price of a given stock on day i.\n\nIf you were only permitted to complete at most one transaction\n(ie, buy one and sell one share of the stock),\ndesign an algorithm to find the maximum profit.\n\nExample 1:\nInput: [7, 1, 5, 3, 6, 4]\nOutput: 5\n\nmax. difference = 6-1 = 5\n(not 7-1 = 6, as selling price needs to be larger than buying price)\nExample 2:\nInput: [7, 6, 4, 3, 1]\nOutput: 0\n\nIn this case, no transaction is done, i.e. max profit = 0."}}, "functions": {"max_profit_naive": {"args": ["prices"], "returns": ["max_so_far"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 34}, "calls": ["range", "len", "max"], "store_vars_calls": {"max_so_far": "max"}, "source_code": "def max_profit_naive(prices):\n    \"\"\"\n    :type prices: List[int]\n    :rtype: int\n    \"\"\"\n    max_so_far = 0\n    for i in range(0, len(prices) - 1):\n        for j in range(i + 1, len(prices)):\n            max_so_far = max(max_so_far, prices[j] - prices[i])\n    return max_so_far"}, "max_profit_optimized": {"doc": {"long_description": "diff : [X, -6, 4, -2, 3, -2]", "short_description": "input: [7, 1, 5, 3, 6, 4]"}, "args": ["prices"], "returns": ["max_so_far"], "min_max_lineno": {"min_lineno": 37, "max_lineno": 49}, "calls": ["range", "len", "max"], "store_vars_calls": {"cur_max": "max", "max_so_far": "max"}, "source_code": "def max_profit_optimized(prices):\n    \"\"\"\n    input: [7, 1, 5, 3, 6, 4]\n    diff : [X, -6, 4, -2, 3, -2]\n    :type prices: List[int]\n    :rtype: int\n    \"\"\"\n    (cur_max, max_so_far) = (0, 0)\n    for i in range(1, len(prices)):\n        cur_max = max(0, cur_max + prices[i] - prices[i - 1])\n        max_so_far = max(max_so_far, cur_max)\n    return max_so_far"}}, "is_test": false}