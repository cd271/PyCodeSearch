{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/dp/edit_distance.py", "fileNameBase": "edit_distance", "extension": "py", "doc": {"long_description": "of letter insertions, letter deletions, and letter substitutions\nrequired to transform one word into another.\n\nFor example, the edit distance between FOOD and MONEY is at\nmost four:\n\nFOOD -> MOOD -> MOND -> MONED -> MONEY\n\nGiven two words A and B, find the minimum number of operations\nrequired to transform one string into the other.\nIn other words, find the edit distance between A and B.\n\nThought process:\n\nLet edit(i, j) denote the edit distance between\nthe prefixes A[1..i] and B[1..j].\n\nThen, the function satifies the following recurrence:\n\nedit(i, j) = i if j = 0\n             j if i = 0\n             min(edit(i-1, j) + 1,\n                 edit(i, j-1), + 1,\n                 edit(i-1, j-1) + cost) otherwise\n\nThere are two base cases, both of which occur when one string is empty\nand the other is not.\n1. To convert an empty string A into a string B of length n,\nperform n insertions.\n2. To convert a string A of length m into an empty string B,\nperform m deletions.\n\nHere, the cost is 1 if a substitution is required,\nor 0 if both chars in words A and B are the same at\nindexes i and j, respectively.\n\nTo find the edit distance between two words A and B,\nwe need to find edit(length_a, length_b).\n\nTime: O(length_a*length_b)\nSpace: O(length_a*length_b)", "short_description": "The edit distance between two words is the minimum number", "full": "The edit distance between two words is the minimum number\nof letter insertions, letter deletions, and letter substitutions\nrequired to transform one word into another.\n\nFor example, the edit distance between FOOD and MONEY is at\nmost four:\n\nFOOD -> MOOD -> MOND -> MONED -> MONEY\n\nGiven two words A and B, find the minimum number of operations\nrequired to transform one string into the other.\nIn other words, find the edit distance between A and B.\n\nThought process:\n\nLet edit(i, j) denote the edit distance between\nthe prefixes A[1..i] and B[1..j].\n\nThen, the function satifies the following recurrence:\n\nedit(i, j) = i if j = 0\n             j if i = 0\n             min(edit(i-1, j) + 1,\n                 edit(i, j-1), + 1,\n                 edit(i-1, j-1) + cost) otherwise\n\nThere are two base cases, both of which occur when one string is empty\nand the other is not.\n1. To convert an empty string A into a string B of length n,\nperform n insertions.\n2. To convert a string A of length m into an empty string B,\nperform m deletions.\n\nHere, the cost is 1 if a substitution is required,\nor 0 if both chars in words A and B are the same at\nindexes i and j, respectively.\n\nTo find the edit distance between two words A and B,\nwe need to find edit(length_a, length_b).\n\nTime: O(length_a*length_b)\nSpace: O(length_a*length_b)"}}, "functions": {"edit_distance": {"doc": {"long_description": "Kwyword arguments:\nword_a -- string\nword_b -- string", "short_description": "Finds edit distance between word_a and word_b"}, "args": ["word_a", "word_b"], "returns": ["edit[-1][-1]"], "min_max_lineno": {"min_lineno": 46, "max_lineno": 70}, "calls": ["range", "len", "min"], "source_code": "def edit_distance(word_a, word_b):\n    \"\"\"Finds edit distance between word_a and word_b\n\n    Kwyword arguments:\n    word_a -- string\n    word_b -- string\n    \"\"\"\n    (length_a, length_b) = (len(word_a) + 1, len(word_b) + 1)\n    edit = [[0 for _ in range(length_b)] for _ in range(length_a)]\n    for i in range(1, length_a):\n        edit[i][0] = i\n    for j in range(1, length_b):\n        edit[0][j] = j\n    for i in range(1, length_a):\n        for j in range(1, length_b):\n            cost = 0 if word_a[i - 1] == word_b[j - 1] else 1\n            edit[i][j] = min(edit[i - 1][j] + 1, edit[i][j - 1] + 1, edit[i - 1][j - 1] + cost)\n    return edit[-1][-1]"}}, "is_test": false}