{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/dp/egg_drop.py", "fileNameBase": "egg_drop", "extension": "py", "doc": {"long_description": "from 1 to N. Each egg is identical in function, and if an egg breaks,\nyou cannot drop it again. You know that there exists a floor F with\n0 <= F <= N such that any egg dropped at a floor higher than F will\nbreak, and any egg dropped at or below floor F will not break.\nEach move, you may take an egg (if you have an unbroken one) and drop\nit from any floor X (with 1 <= X <= N). Your goal is to know with\ncertainty what the value of F is. What is the minimum number of moves\nthat you need to know with certainty what F is, regardless of the\ninitial value of F?\n\nExample:\nInput: K = 1, N = 2\nOutput: 2\nExplanation:\nDrop the egg from floor 1.  If it breaks, we know with certainty that F = 0.\nOtherwise, drop the egg from floor 2.  If it breaks, we know with\ncertainty that F = 1.\nIf it didn't break, then we know with certainty F = 2.\nHence, we needed 2 moves in the worst case to know what F is with certainty.", "short_description": "You are given K eggs, and you have access to a building with N floors", "full": "You are given K eggs, and you have access to a building with N floors\nfrom 1 to N. Each egg is identical in function, and if an egg breaks,\nyou cannot drop it again. You know that there exists a floor F with\n0 <= F <= N such that any egg dropped at a floor higher than F will\nbreak, and any egg dropped at or below floor F will not break.\nEach move, you may take an egg (if you have an unbroken one) and drop\nit from any floor X (with 1 <= X <= N). Your goal is to know with\ncertainty what the value of F is. What is the minimum number of moves\nthat you need to know with certainty what F is, regardless of the\ninitial value of F?\n\nExample:\nInput: K = 1, N = 2\nOutput: 2\nExplanation:\nDrop the egg from floor 1.  If it breaks, we know with certainty that F = 0.\nOtherwise, drop the egg from floor 2.  If it breaks, we know with\ncertainty that F = 1.\nIf it didn't break, then we know with certainty F = 2.\nHence, we needed 2 moves in the worst case to know what F is with certainty."}}, "functions": {"egg_drop": {"doc": {"long_description": "n -- number of floors\nk -- number of eggs", "short_description": "Keyword arguments:"}, "args": ["n", "k"], "returns": ["egg_floor[n][k]"], "min_max_lineno": {"min_lineno": 28, "max_lineno": 59}, "calls": ["range", "max"], "source_code": "def egg_drop(n, k):\n    \"\"\"\n    Keyword arguments:\n    n -- number of floors\n    k -- number of eggs\n    \"\"\"\n    egg_floor = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        egg_floor[i][1] = 1\n        egg_floor[i][0] = 0\n    for j in range(1, k + 1):\n        egg_floor[1][j] = j\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            egg_floor[i][j] = INT_MAX\n            for x in range(1, j + 1):\n                res = 1 + max(egg_floor[i - 1][x - 1], egg_floor[i][j - x])\n                if res < egg_floor[i][j]:\n                    egg_floor[i][j] = res\n    return egg_floor[n][k]"}}, "is_test": false}