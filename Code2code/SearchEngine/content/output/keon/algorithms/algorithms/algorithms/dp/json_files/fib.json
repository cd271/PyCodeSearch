{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/dp/fib.py", "fileNameBase": "fib", "extension": "py", "doc": {"long_description": "form a sequence, called the Fibonacci sequence,\nsuch that each number is the sum of the two preceding ones,\nstarting from 0 and 1.\nThat is,\n    F0=0 , F1=1\nand\n    Fn= F(n-1) + F(n-2)\nThe Fibonacci numbers are the numbers in the following integer sequence.\n    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, \u2026\u2026.\n\nIn mathematical terms, the sequence Fn of Fibonacci numbers is\ndefined by the recurrence relation\n\nHere, given a number n, print n-th Fibonacci Number.", "short_description": "In mathematics, the Fibonacci numbers, commonly denoted Fn,", "full": "In mathematics, the Fibonacci numbers, commonly denoted Fn,\nform a sequence, called the Fibonacci sequence,\nsuch that each number is the sum of the two preceding ones,\nstarting from 0 and 1.\nThat is,\n    F0=0 , F1=1\nand\n    Fn= F(n-1) + F(n-2)\nThe Fibonacci numbers are the numbers in the following integer sequence.\n    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, \u2026\u2026.\n\nIn mathematical terms, the sequence Fn of Fibonacci numbers is\ndefined by the recurrence relation\n\nHere, given a number n, print n-th Fibonacci Number."}}, "functions": {"fib_recursive": {"args": ["n"], "returns": ["fib_recursive(n - 1) + fib_recursive(n - 2)", "n"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 39}, "calls": ["fib.fib_recursive"], "source_code": "def fib_recursive(n):\n    \"\"\"[summary]\n    Computes the n-th fibonacci number recursive.\n    Problem: This implementation is very slow.\n    approximate O(2^n)\n\n    Arguments:\n        n {[int]} -- [description]\n\n    Returns:\n        [int] -- [description]\n    \"\"\"\n    assert n >= 0, 'n must be a positive integer'\n    if n <= 1:\n        return n\n    return fib_recursive(n - 1) + fib_recursive(n - 2)"}, "fib_list": {"args": ["n"], "returns": ["list_results[n]"], "min_max_lineno": {"min_lineno": 43, "max_lineno": 63}, "calls": ["range", "list_results.append"], "source_code": "def fib_list(n):\n    \"\"\"[summary]\n    This algorithm computes the n-th fibbonacci number\n    very quick. approximate O(n)\n    The algorithm use dynamic programming.\n\n    Arguments:\n        n {[int]} -- [description]\n\n    Returns:\n        [int] -- [description]\n    \"\"\"\n    assert n >= 0, 'n must be a positive integer'\n    list_results = [0, 1]\n    for i in range(2, n + 1):\n        list_results.append(list_results[i - 1] + list_results[i - 2])\n    return list_results[n]"}, "fib_iter": {"args": ["n"], "returns": ["res", "n"], "min_max_lineno": {"min_lineno": 67, "max_lineno": 91}, "calls": ["range"], "source_code": "def fib_iter(n):\n    \"\"\"[summary]\n    Works iterative approximate O(n)\n\n    Arguments:\n        n {[int]} -- [description]\n\n    Returns:\n        [int] -- [description]\n    \"\"\"\n    assert n >= 0, 'n must be positive integer'\n    fib_1 = 0\n    fib_2 = 1\n    res = 0\n    if n <= 1:\n        return n\n    for _ in range(n - 1):\n        res = fib_1 + fib_2\n        fib_1 = fib_2\n        fib_2 = res\n    return res"}}, "is_test": true}