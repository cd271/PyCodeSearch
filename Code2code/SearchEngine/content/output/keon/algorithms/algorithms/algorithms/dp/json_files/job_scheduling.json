{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/dp/job_scheduling.py", "fileNameBase": "job_scheduling", "extension": "py", "doc": {"long_description": "Programming and Binary Search", "short_description": "Python program for weighted job scheduling using Dynamic", "full": "Python program for weighted job scheduling using Dynamic\nProgramming and Binary Search"}}, "classes": {"Job": {"doc": {"short_description": "Class to represent a job", "full": "Class to represent a job"}, "min_max_lineno": {"min_lineno": 6, "max_lineno": 14}, "methods": {"__init__": {"args": ["self", "start", "finish", "profit"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 14}, "source_code": "def __init__(self, start, finish, profit):\n    self.start = start\n    self.finish = finish\n    self.profit = profit"}}}}, "functions": {"binary_search": {"doc": {"long_description": "(before current job) that doesn't conflict with current\njob.  \"index\" is index of the current job.  This function\nreturns -1 if all jobs before index conflict with it.\nThe array jobs[] is sorted in increasing order of finish\ntime.", "short_description": "A Binary Search based function to find the latest job"}, "args": ["job", "start_index"], "returns": ["-1", "mid"], "min_max_lineno": {"min_lineno": 15, "max_lineno": 39}, "source_code": "def binary_search(job, start_index):\n    \"\"\"\n    A Binary Search based function to find the latest job\n    (before current job) that doesn't conflict with current\n    job.  \"index\" is index of the current job.  This function\n    returns -1 if all jobs before index conflict with it.\n    The array jobs[] is sorted in increasing order of finish\n    time.\n    \"\"\"\n    left = 0\n    right = start_index - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if job[mid].finish <= job[start_index].start:\n            if job[mid + 1].finish <= job[start_index].start:\n                left = mid + 1\n            else:\n                return mid\n        else:\n            right = mid - 1\n    return -1"}, "schedule": {"doc": {"long_description": "profit from given array of jobs", "short_description": "The main function that returns the maximum possible"}, "args": ["job"], "returns": ["table[length - 1]"], "min_max_lineno": {"min_lineno": 40, "max_lineno": 69}, "calls": ["sorted", "len", "range", "job_scheduling.binary_search", "max"], "store_vars_calls": {"job": "sorted", "length": "len", "pos": "binary_search"}, "source_code": "def schedule(job):\n    \"\"\"\n    The main function that returns the maximum possible\n    profit from given array of jobs\n    \"\"\"\n    job = sorted(job, key=lambda j: j.finish)\n    length = len(job)\n    table = [0 for _ in range(length)]\n    table[0] = job[0].profit\n    for i in range(1, length):\n        incl_prof = job[i].profit\n        pos = binary_search(job, i)\n        if pos != -1:\n            incl_prof += table[pos]\n        table[i] = max(incl_prof, table[i - 1])\n    return table[length - 1]"}}, "is_test": false}