{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/dp/matrix_chain_order.py", "fileNameBase": "matrix_chain_order", "extension": "py", "doc": {"long_description": "Implementation of matrix Chain Multiplication\nTime Complexity: O(n^3)\nSpace Complexity: O(n^2)", "short_description": "Dynamic Programming", "full": "Dynamic Programming\nImplementation of matrix Chain Multiplication\nTime Complexity: O(n^3)\nSpace Complexity: O(n^2)"}}, "functions": {"matrix_chain_order": {"doc": {"long_description": "array -- int[]", "short_description": "Finds optimal order to multiply matrices"}, "args": ["array"], "returns": [["matrix", "sol"]], "min_max_lineno": {"min_lineno": 10, "max_lineno": 29}, "calls": ["len", "range"], "store_vars_calls": {"n": "len"}, "source_code": "def matrix_chain_order(array):\n    \"\"\"Finds optimal order to multiply matrices\n\n    array -- int[]\n    \"\"\"\n    n = len(array)\n    matrix = [[0 for x in range(n)] for x in range(n)]\n    sol = [[0 for x in range(n)] for x in range(n)]\n    for chain_length in range(2, n):\n        for a in range(1, n - chain_length + 1):\n            b = a + chain_length - 1\n            matrix[a][b] = INF\n            for c in range(a, b):\n                cost = matrix[a][c] + matrix[c + 1][b] + array[a - 1] * array[c] * array[b]\n                if cost < matrix[a][b]:\n                    matrix[a][b] = cost\n                    sol[a][b] = c\n    return (matrix, sol)"}, "print_optimal_solution": {"doc": {"long_description": "optimal_solution -- int[][]\ni -- int[]\nj -- int[]", "short_description": "Print the solution"}, "args": ["optimal_solution", "i", "j"], "min_max_lineno": {"min_lineno": 31, "max_lineno": 45}, "calls": ["print", "matrix_chain_order.print_optimal_solution", "str"], "source_code": "def print_optimal_solution(optimal_solution, i, j):\n    \"\"\"Print the solution\n\n    optimal_solution -- int[][]\n    i -- int[]\n    j -- int[]\n    \"\"\"\n    if i == j:\n        print('A' + str(i), end=' ')\n    else:\n        print('(', end=' ')\n        print_optimal_solution(optimal_solution, i, optimal_solution[i][j])\n        print_optimal_solution(optimal_solution, optimal_solution[i][j] + 1, j)\n        print(')', end=' ')"}, "main": {"doc": {"short_description": "Testing for matrix_chain_ordering"}, "min_max_lineno": {"min_lineno": 47, "max_lineno": 59}, "calls": ["len", "matrix_chain_order.matrix_chain_order", "print", "matrix_chain_order.print_optimal_solution", "str"], "store_vars_calls": {"length": "len"}, "source_code": "def main():\n    \"\"\"\n    Testing for matrix_chain_ordering\n    \"\"\"\n    array = [30, 35, 15, 5, 10, 20, 25]\n    length = len(array)\n    (matrix, optimal_solution) = matrix_chain_order(array)\n    print('No. of Operation required: ' + str(matrix[1][length - 1]))\n    print_optimal_solution(optimal_solution, 1, length - 1)"}}, "body": {"calls": ["float", "matrix_chain_order.main"], "store_vars_calls": {"INF": "float"}, "source_code": ["float('inf')", "main()"]}, "main_info": {"main_flag": 1, "main_function": "matrix_chain_order.main", "type": "script"}, "is_test": false}