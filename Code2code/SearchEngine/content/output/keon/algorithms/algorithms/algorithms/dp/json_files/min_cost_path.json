{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/dp/min_cost_path.py", "fileNameBase": "min_cost_path", "extension": "py", "doc": {"long_description": "To find minimum cost path\nfrom station 0 to station N-1,\nwhere cost of moving from ith station to jth station is given as:\n\nMatrix of size (N x N)\nwhere Matrix[i][j] denotes the cost of moving from\nstation i --> station j   for i < j\n\nNOTE that values where Matrix[i][j] and i > j does not\nmean anything, and hence represented by -1 or INF\n\nFor the input below (cost matrix),\nMinimum cost is obtained as from  { 0 --> 1 --> 3}\n                                  = cost[0][1] + cost[1][3] = 65\nthe Output will be:\n\nThe Minimum cost to reach station 4 is 65\n\nTime Complexity: O(n^2)\nSpace Complexity: O(n)", "short_description": "author @goswami-rahul", "full": "author @goswami-rahul\n\nTo find minimum cost path\nfrom station 0 to station N-1,\nwhere cost of moving from ith station to jth station is given as:\n\nMatrix of size (N x N)\nwhere Matrix[i][j] denotes the cost of moving from\nstation i --> station j   for i < j\n\nNOTE that values where Matrix[i][j] and i > j does not\nmean anything, and hence represented by -1 or INF\n\nFor the input below (cost matrix),\nMinimum cost is obtained as from  { 0 --> 1 --> 3}\n                                  = cost[0][1] + cost[1][3] = 65\nthe Output will be:\n\nThe Minimum cost to reach station 4 is 65\n\nTime Complexity: O(n^2)\nSpace Complexity: O(n)"}}, "functions": {"min_cost": {"doc": {"long_description": "Keyword arguments:\ncost -- matrix containing costs", "short_description": "Find minimum cost."}, "args": ["cost"], "returns": ["dist[length - 1]"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 46}, "calls": ["len", "range", "min"], "store_vars_calls": {"length": "len"}, "source_code": "def min_cost(cost):\n    \"\"\"Find minimum cost.\n\n    Keyword arguments:\n    cost -- matrix containing costs\n    \"\"\"\n    length = len(cost)\n    dist = [INF] * length\n    dist[0] = 0\n    for i in range(length):\n        for j in range(i + 1, length):\n            dist[j] = min(dist[j], dist[i] + cost[i][j])\n    return dist[length - 1]"}}, "body": {"calls": ["float", "len", "min_cost_path.min_cost", "print"], "store_vars_calls": {"INF": "float", "TOTAL_LEN": "len", "mcost": "min_cost"}, "source_code": ["float('inf')", "len(costs)", "min_cost(costs)", "print(f'The minimum cost to reach station {TOTAL_LEN} is {mcost}')"]}, "main_info": {"main_flag": 1, "type": "script"}, "is_test": true}