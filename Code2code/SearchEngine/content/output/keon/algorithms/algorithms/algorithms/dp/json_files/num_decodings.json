{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/dp/num_decodings.py", "fileNameBase": "num_decodings", "extension": "py", "doc": {"long_description": "encoded to numbers using the following mapping:\n\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\nGiven an encoded message containing digits,\ndetermine the total number of ways to decode it.\n\nFor example,\nGiven encoded message \"12\",\nit could be decoded as \"AB\" (1 2) or \"L\" (12).\n\nThe number of ways decoding \"12\" is 2.", "short_description": "A message containing letters from A-Z is being", "full": "A message containing letters from A-Z is being\nencoded to numbers using the following mapping:\n\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\nGiven an encoded message containing digits,\ndetermine the total number of ways to decode it.\n\nFor example,\nGiven encoded message \"12\",\nit could be decoded as \"AB\" (1 2) or \"L\" (12).\n\nThe number of ways decoding \"12\" is 2."}}, "functions": {"num_decodings": {"args": ["enc_mes"], "returns": ["last_char", "0"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 34}, "calls": ["range", "len", "int"], "source_code": "def num_decodings(enc_mes):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not enc_mes or enc_mes[0] == '0':\n        return 0\n    (last_char, last_two_chars) = (1, 1)\n    for i in range(1, len(enc_mes)):\n        last = last_char if enc_mes[i] != '0' else 0\n        last_two = last_two_chars if int(enc_mes[i - 1:i + 1]) < 27 and enc_mes[i - 1] != '0' else 0\n        last_two_chars = last_char\n        last_char = last + last_two\n    return last_char"}, "num_decodings2": {"args": ["enc_mes"], "returns": ["stack[-1]", "0", "0"], "min_max_lineno": {"min_lineno": 36, "max_lineno": 57}, "calls": ["range", "enc_mes.startswith", "len", "stack.append", "int"], "source_code": "def num_decodings2(enc_mes):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not enc_mes or enc_mes.startswith('0'):\n        return 0\n    stack = [1, 1]\n    for i in range(1, len(enc_mes)):\n        if enc_mes[i] == '0':\n            if enc_mes[i - 1] == '0' or enc_mes[i - 1] > '2':\n                return 0\n            stack.append(stack[-2])\n        elif 9 < int(enc_mes[i - 1:i + 1]) < 27:\n            stack.append(stack[-2] + stack[-1])\n        else:\n            stack.append(stack[-1])\n    return stack[-1]"}}, "is_test": false}