{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/dp/regex_matching.py", "fileNameBase": "regex_matching", "extension": "py", "doc": {"long_description": "'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).\n\nThe function prototype should be:\nbool is_match(const char *s, const char *p)\n\nSome examples:\nis_match(\"aa\",\"a\") \u2192 false\nis_match(\"aa\",\"aa\") \u2192 true\nis_match(\"aaa\",\"aa\") \u2192 false\nis_match(\"aa\", \"a*\") \u2192 true\nis_match(\"aa\", \".*\") \u2192 true\nis_match(\"ab\", \".*\") \u2192 true\nis_match(\"aab\", \"c*a*b\") \u2192 true", "short_description": "Implement regular expression matching with support for '.' and '*'.", "full": "Implement regular expression matching with support for '.' and '*'.\n\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).\n\nThe function prototype should be:\nbool is_match(const char *s, const char *p)\n\nSome examples:\nis_match(\"aa\",\"a\") \u2192 false\nis_match(\"aa\",\"aa\") \u2192 true\nis_match(\"aaa\",\"aa\") \u2192 false\nis_match(\"aa\", \"a*\") \u2192 true\nis_match(\"aa\", \".*\") \u2192 true\nis_match(\"ab\", \".*\") \u2192 true\nis_match(\"aab\", \"c*a*b\") \u2192 true"}}, "functions": {"is_match": {"doc": {"long_description": "Keyword arguments:\nstr_a -- string\nstr_b -- string", "short_description": "Finds if `str_a` matches `str_b`"}, "args": ["str_a", "str_b"], "returns": ["matches[-1][-1]"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 62}, "calls": ["enumerate", "len", "range"], "source_code": "def is_match(str_a, str_b):\n    \"\"\"Finds if `str_a` matches `str_b`\n\n    Keyword arguments:\n    str_a -- string\n    str_b -- string\n    \"\"\"\n    (len_a, len_b) = (len(str_a) + 1, len(str_b) + 1)\n    matches = [[False] * len_b for _ in range(len_a)]\n    matches[0][0] = True\n    for (i, element) in enumerate(str_b[1:], 2):\n        matches[0][i] = matches[0][i - 2] and element == '*'\n    for (i, char_a) in enumerate(str_a, 1):\n        for (j, char_b) in enumerate(str_b, 1):\n            if char_b != '*':\n                matches[i][j] = matches[i - 1][j - 1] and char_b in (char_a, '.')\n            else:\n                matches[i][j] |= matches[i][j - 2]\n                if char_a == str_b[j - 2] or str_b[j - 2] == '.':\n                    matches[i][j] |= matches[i - 1][j]\n    return matches[-1][-1]"}}, "is_test": false}