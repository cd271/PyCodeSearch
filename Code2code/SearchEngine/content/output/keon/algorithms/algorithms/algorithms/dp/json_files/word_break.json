{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/dp/word_break.py", "fileNameBase": "word_break", "extension": "py", "doc": {"long_description": "containing a list of non-empty words,\ndetermine if word can be segmented into a space-separated\nsequence of one or more dictionary words.\nYou may assume the dictionary does not contain duplicate words.\n\nFor example, given\nword = \"leetcode\",\ndict = [\"leet\", \"code\"].\n\nReturn true because \"leetcode\" can be segmented as \"leet code\".\n\nword = abc word_dict = [\"a\",\"bc\"]\nTrue False False False", "short_description": "Given a non-empty string s and a dictionary wordDict", "full": "Given a non-empty string s and a dictionary wordDict\ncontaining a list of non-empty words,\ndetermine if word can be segmented into a space-separated\nsequence of one or more dictionary words.\nYou may assume the dictionary does not contain duplicate words.\n\nFor example, given\nword = \"leetcode\",\ndict = [\"leet\", \"code\"].\n\nReturn true because \"leetcode\" can be segmented as \"leet code\".\n\nword = abc word_dict = [\"a\",\"bc\"]\nTrue False False False"}}, "functions": {"word_break": {"args": ["word", "word_dict"], "returns": ["dp_array[-1]"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 35}, "calls": ["range", "len"], "source_code": "def word_break(word, word_dict):\n    \"\"\"\n    :type word: str\n    :type word_dict: Set[str]\n    :rtype: bool\n    \"\"\"\n    dp_array = [False] * (len(word) + 1)\n    dp_array[0] = True\n    for i in range(1, len(word) + 1):\n        for j in range(0, i):\n            if dp_array[j] and word[j:i] in word_dict:\n                dp_array[i] = True\n                break\n    return dp_array[-1]"}}, "body": {"calls": ["print", "word_break.word_break"], "source_code": ["print(word_break(str, dic))", "word_break(str, dic)"]}, "main_info": {"main_flag": 1, "main_function": "word_break.print", "type": "script"}, "is_test": false}