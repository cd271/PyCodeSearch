{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/graph/check_digraph_strongly_connected.py", "fileNameBase": "check_digraph_strongly_connected", "extension": "py", "doc": {"long_description": "that for any pairs of vertices u and v there exists a path (u-...-v) that\nconnects them. A graph is strongly connected if it is a single strongly\nconnected component.", "short_description": "In a directed graph, a strongly connected component is a set of vertices such", "full": "In a directed graph, a strongly connected component is a set of vertices such\nthat for any pairs of vertices u and v there exists a path (u-...-v) that\nconnects them. A graph is strongly connected if it is a single strongly\nconnected component."}}, "dependencies": [{"from_module": "collections", "import": "defaultdict", "type": "external", "type_element": "module"}], "classes": {"Graph": {"doc": {"short_description": "A directed graph where edges are one-way (a two-way edge can be represented by using two edges).", "full": "A directed graph where edges are one-way (a two-way edge can be represented by using two edges)."}, "min_max_lineno": {"min_lineno": 10, "max_lineno": 70}, "methods": {"__init__": {"doc": {"short_description": "Create a new graph with vertex_count vertices."}, "args": ["self", "vertex_count"], "min_max_lineno": {"min_lineno": 15, "max_lineno": 22}, "calls": ["collections.defaultdict"], "store_vars_calls": {"self.graph": "defaultdict"}, "source_code": "def __init__(self, vertex_count):\n    \"\"\"\n        Create a new graph with vertex_count vertices.\n        \"\"\"\n    self.vertex_count = vertex_count\n    self.graph = defaultdict(list)"}, "add_edge": {"doc": {"short_description": "Add an edge going from source to target"}, "args": ["self", "source", "target"], "min_max_lineno": {"min_lineno": 23, "max_lineno": 28}, "calls": ["check_digraph_strongly_connected.Graph.graph[].append"], "source_code": "def add_edge(self, source, target):\n    \"\"\"\n        Add an edge going from source to target\n        \"\"\"\n    self.graph[source].append(target)"}, "dfs": {"doc": {"short_description": "Determine if all nodes are reachable from node 0"}, "args": ["self"], "returns": ["False", "True"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 38}, "calls": ["check_digraph_strongly_connected.Graph.dfs_util"], "source_code": "def dfs(self):\n    \"\"\"\n        Determine if all nodes are reachable from node 0\n        \"\"\"\n    visited = [False] * self.vertex_count\n    self.dfs_util(0, visited)\n    if visited == [True] * self.vertex_count:\n        return True\n    return False"}, "dfs_util": {"doc": {"short_description": "Determine if all nodes are reachable from the given node"}, "args": ["self", "source", "visited"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 47}, "calls": ["check_digraph_strongly_connected.Graph.dfs_util"], "source_code": "def dfs_util(self, source, visited):\n    \"\"\"\n        Determine if all nodes are reachable from the given node\n        \"\"\"\n    visited[source] = True\n    for adjacent in self.graph[source]:\n        if not visited[adjacent]:\n            self.dfs_util(adjacent, visited)"}, "reverse_graph": {"doc": {"short_description": "Create a new graph where every edge a->b is replaced with an edge b->a"}, "args": ["self"], "returns": ["reverse_graph"], "min_max_lineno": {"min_lineno": 48, "max_lineno": 59}, "calls": ["check_digraph_strongly_connected.Graph.graph.items", "check_digraph_strongly_connected.Graph.add_edge"], "store_vars_calls": {"reverse_graph": "Graph"}, "source_code": "def reverse_graph(self):\n    \"\"\"\n        Create a new graph where every edge a->b is replaced with an edge b->a\n        \"\"\"\n    reverse_graph = Graph(self.vertex_count)\n    for (source, adjacent) in self.graph.items():\n        for target in adjacent:\n            reverse_graph.add_edge(target, source)\n    return reverse_graph"}, "is_strongly_connected": {"doc": {"short_description": "Determine if the graph is strongly connected."}, "args": ["self"], "returns": ["False", "True"], "min_max_lineno": {"min_lineno": 61, "max_lineno": 70}, "calls": ["check_digraph_strongly_connected.Graph.dfs", "check_digraph_strongly_connected.Graph.reverse_graph", "check_digraph_strongly_connected.Graph.dfs"], "store_vars_calls": {"reversed_graph": "self.reverse_graph"}, "source_code": "def is_strongly_connected(self):\n    \"\"\"\n        Determine if the graph is strongly connected.\n        \"\"\"\n    if self.dfs():\n        reversed_graph = self.reverse_graph()\n        if reversed_graph.dfs():\n            return True\n    return False"}}}}, "is_test": false}