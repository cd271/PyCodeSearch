{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/graph/cycle_detection.py", "fileNameBase": "cycle_detection", "extension": "py", "doc": {"long_description": "Real-life scenario: deadlock detection in a system. Processes may be\nrepresented by vertices, then and an edge A -> B could mean that process A is\nwaiting for B to release its lock on a resource.", "short_description": "Given a directed graph, check whether it contains a cycle.", "full": "Given a directed graph, check whether it contains a cycle.\n\nReal-life scenario: deadlock detection in a system. Processes may be\nrepresented by vertices, then and an edge A -> B could mean that process A is\nwaiting for B to release its lock on a resource."}}, "dependencies": [{"from_module": "enum", "import": "Enum", "type": "external", "type_element": "module"}], "classes": {"TraversalState": {"doc": {"long_description": "- WHITE: has not been visited yet\n- GRAY: is currently being investigated for a cycle\n- BLACK: is not part of a cycle", "short_description": "For a given node:", "full": "For a given node:\n    - WHITE: has not been visited yet\n    - GRAY: is currently being investigated for a cycle\n    - BLACK: is not part of a cycle"}, "extend": ["Enum"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 21}}}, "functions": {"is_in_cycle": {"doc": {"long_description": ":param: traversal_states: for each vertex, the state it is in", "short_description": "Determines if the given vertex is in a cycle."}, "args": ["graph", "traversal_states", "vertex"], "returns": ["False", "True", "True"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 36}, "calls": ["cycle_detection.is_in_cycle"], "source_code": "def is_in_cycle(graph, traversal_states, vertex):\n    \"\"\"\n    Determines if the given vertex is in a cycle.\n\n    :param: traversal_states: for each vertex, the state it is in\n    \"\"\"\n    if traversal_states[vertex] == TraversalState.GRAY:\n        return True\n    traversal_states[vertex] = TraversalState.GRAY\n    for neighbor in graph[vertex]:\n        if is_in_cycle(graph, traversal_states, neighbor):\n            return True\n    traversal_states[vertex] = TraversalState.BLACK\n    return False"}, "contains_cycle": {"doc": {"long_description": "The graph should be given as a dictionary:\n\n    graph = {'A': ['B', 'C'],\n             'B': ['D'],\n             'C': ['F'],\n             'D': ['E', 'F'],\n             'E': ['B'],\n             'F': []}", "short_description": "Determines if there is a cycle in the given graph."}, "args": ["graph"], "returns": ["False", "True"], "min_max_lineno": {"min_lineno": 38, "max_lineno": 56}, "calls": ["traversal_states.items", "cycle_detection.is_in_cycle"], "source_code": "def contains_cycle(graph):\n    \"\"\"\n    Determines if there is a cycle in the given graph.\n    The graph should be given as a dictionary:\n\n        graph = {'A': ['B', 'C'],\n                 'B': ['D'],\n                 'C': ['F'],\n                 'D': ['E', 'F'],\n                 'E': ['B'],\n                 'F': []}\n    \"\"\"\n    traversal_states = {vertex: TraversalState.WHITE for vertex in graph}\n    for (vertex, state) in traversal_states.items():\n        if state == TraversalState.WHITE and is_in_cycle(graph, traversal_states, vertex):\n            return True\n    return False"}}, "is_test": false}