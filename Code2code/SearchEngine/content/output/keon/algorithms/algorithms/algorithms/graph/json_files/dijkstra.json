{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/graph/dijkstra.py", "fileNameBase": "dijkstra", "extension": "py", "doc": {"short_description": "Dijkstra's single-source shortest-path algorithm", "full": "Dijkstra's single-source shortest-path algorithm"}}, "classes": {"Dijkstra": {"doc": {"short_description": "A fully connected directed graph with edge weights", "full": "A fully connected directed graph with edge weights"}, "min_max_lineno": {"min_lineno": 5, "max_lineno": 50}, "methods": {"__init__": {"args": ["self", "vertex_count"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 13}, "calls": ["range"], "source_code": "def __init__(self, vertex_count):\n    self.vertex_count = vertex_count\n    self.graph = [[0 for _ in range(vertex_count)] for _ in range(vertex_count)]"}, "min_distance": {"doc": {"short_description": "Find the vertex that is closest to the visited set"}, "args": ["self", "dist", "min_dist_set"], "returns": ["min_index"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 26}, "calls": ["float", "range"], "store_vars_calls": {"min_dist": "float"}, "source_code": "def min_distance(self, dist, min_dist_set):\n    \"\"\"\n        Find the vertex that is closest to the visited set\n        \"\"\"\n    min_dist = float('inf')\n    for target in range(self.vertex_count):\n        if min_dist_set[target]:\n            continue\n        if dist[target] < min_dist:\n            min_dist = dist[target]\n            min_index = target\n    return min_index"}, "dijkstra": {"doc": {"short_description": "Given a node, returns the shortest distance to every other node"}, "args": ["self", "src"], "returns": ["dist"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 50}, "calls": ["range", "dijkstra.Dijkstra.min_distance", "float"], "store_vars_calls": {"source": "self.min_distance"}, "source_code": "def dijkstra(self, src):\n    \"\"\"\n        Given a node, returns the shortest distance to every other node\n        \"\"\"\n    dist = [float('inf')] * self.vertex_count\n    dist[src] = 0\n    min_dist_set = [False] * self.vertex_count\n    for _ in range(self.vertex_count):\n        source = self.min_distance(dist, min_dist_set)\n        min_dist_set[source] = True\n        for target in range(self.vertex_count):\n            if self.graph[source][target] <= 0 or min_dist_set[target]:\n                continue\n            if dist[target] > dist[source] + self.graph[source][target]:\n                dist[target] = dist[source] + self.graph[source][target]\n    return dist"}}}}, "is_test": false}