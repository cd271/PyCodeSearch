{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/graph/find_path.py", "fileNameBase": "find_path", "extension": "py", "doc": {"short_description": "Functions for finding paths in graphs.", "full": "Functions for finding paths in graphs."}}, "functions": {"find_path": {"doc": {"short_description": "Find a path between two nodes using recursion and backtracking."}, "args": ["graph", "start", "end", "path"], "returns": ["None", "path", "None", "newpath"], "min_max_lineno": {"min_lineno": 6, "max_lineno": 20}, "calls": ["find_path.find_path"], "store_vars_calls": {"newpath": "find_path"}, "source_code": "def find_path(graph, start, end, path=[]):\n    \"\"\"\n    Find a path between two nodes using recursion and backtracking.\n    \"\"\"\n    path = path + [start]\n    if start == end:\n        return path\n    if not start in graph:\n        return None\n    for node in graph[start]:\n        if node not in path:\n            newpath = find_path(graph, node, end, path)\n            return newpath\n    return None"}, "find_all_path": {"doc": {"short_description": "Find all paths between two nodes using recursion and backtracking"}, "args": ["graph", "start", "end", "path"], "returns": ["paths", "[path]", "[]"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 38}, "calls": ["find_path.find_all_path", "paths.append"], "store_vars_calls": {"newpaths": "find_all_path"}, "source_code": "def find_all_path(graph, start, end, path=[]):\n    \"\"\"\n    Find all paths between two nodes using recursion and backtracking\n    \"\"\"\n    path = path + [start]\n    if start == end:\n        return [path]\n    if not start in graph:\n        return []\n    paths = []\n    for node in graph[start]:\n        if node not in path:\n            newpaths = find_all_path(graph, node, end, path)\n            for newpath in newpaths:\n                paths.append(newpath)\n    return paths"}, "find_shortest_path": {"doc": {"short_description": "find the shortest path between two nodes"}, "args": ["graph", "start", "end", "path"], "returns": ["shortest", "path", "None"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 56}, "calls": ["find_path.find_shortest_path", "len"], "store_vars_calls": {"newpath": "find_shortest_path"}, "source_code": "def find_shortest_path(graph, start, end, path=[]):\n    \"\"\"\n    find the shortest path between two nodes\n    \"\"\"\n    path = path + [start]\n    if start == end:\n        return path\n    if start not in graph:\n        return None\n    shortest = None\n    for node in graph[start]:\n        if node not in path:\n            newpath = find_shortest_path(graph, node, end, path)\n            if newpath:\n                if not shortest or len(newpath) < len(shortest):\n                    shortest = newpath\n    return shortest"}}, "is_test": false}