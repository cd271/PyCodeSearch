{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/graph/graph.py", "fileNameBase": "graph", "extension": "py", "doc": {"long_description": "It can be shared across graph algorithms.", "short_description": "These are classes to represent a Graph and its elements.", "full": "These are classes to represent a Graph and its elements.\nIt can be shared across graph algorithms."}}, "classes": {"Node": {"doc": {"short_description": "A node/vertex in a graph.", "full": "A node/vertex in a graph."}, "min_max_lineno": {"min_lineno": 6, "max_lineno": 51}, "methods": {"__init__": {"args": ["self", "name"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 13}, "source_code": "def __init__(self, name):\n    self.name = name"}, "get_name": {"doc": {"short_description": "Return the name of the node"}, "args": ["obj"], "returns": ["''", "obj.name", "obj"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 24}, "calls": ["isinstance"], "source_code": "@staticmethod\ndef get_name(obj):\n    \"\"\"\n        Return the name of the node\n        \"\"\"\n    if isinstance(obj, Node):\n        return obj.name\n    if isinstance(obj, str):\n        return obj\n    return ''"}, "__eq__": {"args": ["self", "obj"], "returns": ["self.name == self.get_name(obj)"], "min_max_lineno": {"min_lineno": 25, "max_lineno": 27}, "calls": ["graph.Node.get_name"], "source_code": "def __eq__(self, obj):\n    return self.name == self.get_name(obj)"}, "__repr__": {"args": ["self"], "returns": ["self.name"], "min_max_lineno": {"min_lineno": 28, "max_lineno": 30}, "source_code": "def __repr__(self):\n    return self.name"}, "__hash__": {"args": ["self"], "returns": ["hash(self.name)"], "min_max_lineno": {"min_lineno": 31, "max_lineno": 33}, "calls": ["hash"], "source_code": "def __hash__(self):\n    return hash(self.name)"}, "__ne__": {"args": ["self", "obj"], "returns": ["self.name != self.get_name(obj)"], "min_max_lineno": {"min_lineno": 34, "max_lineno": 36}, "calls": ["graph.Node.get_name"], "source_code": "def __ne__(self, obj):\n    return self.name != self.get_name(obj)"}, "__lt__": {"args": ["self", "obj"], "returns": ["self.name < self.get_name(obj)"], "min_max_lineno": {"min_lineno": 37, "max_lineno": 39}, "calls": ["graph.Node.get_name"], "source_code": "def __lt__(self, obj):\n    return self.name < self.get_name(obj)"}, "__le__": {"args": ["self", "obj"], "returns": ["self.name <= self.get_name(obj)"], "min_max_lineno": {"min_lineno": 40, "max_lineno": 42}, "calls": ["graph.Node.get_name"], "source_code": "def __le__(self, obj):\n    return self.name <= self.get_name(obj)"}, "__gt__": {"args": ["self", "obj"], "returns": ["self.name > self.get_name(obj)"], "min_max_lineno": {"min_lineno": 43, "max_lineno": 45}, "calls": ["graph.Node.get_name"], "source_code": "def __gt__(self, obj):\n    return self.name > self.get_name(obj)"}, "__ge__": {"args": ["self", "obj"], "returns": ["self.name >= self.get_name(obj)"], "min_max_lineno": {"min_lineno": 46, "max_lineno": 48}, "calls": ["graph.Node.get_name"], "source_code": "def __ge__(self, obj):\n    return self.name >= self.get_name(obj)"}, "__bool__": {"args": ["self"], "returns": ["self.name"], "min_max_lineno": {"min_lineno": 49, "max_lineno": 51}, "source_code": "def __bool__(self):\n    return self.name"}}}, "DirectedEdge": {"doc": {"long_description": "Stores the source and target node of the edge.", "short_description": "A directed edge in a directed graph.", "full": "A directed edge in a directed graph.\nStores the source and target node of the edge."}, "min_max_lineno": {"min_lineno": 52, "max_lineno": 69}, "methods": {"__init__": {"args": ["self", "node_from", "node_to"], "min_max_lineno": {"min_lineno": 58, "max_lineno": 61}, "source_code": "def __init__(self, node_from, node_to):\n    self.source = node_from\n    self.target = node_to"}, "__eq__": {"args": ["self", "obj"], "returns": ["False", "obj.source == self.source and obj.target == self.target"], "min_max_lineno": {"min_lineno": 62, "max_lineno": 66}, "calls": ["isinstance"], "source_code": "def __eq__(self, obj):\n    if isinstance(obj, DirectedEdge):\n        return obj.source == self.source and obj.target == self.target\n    return False"}, "__repr__": {"args": ["self"], "returns": ["f'({self.source} -> {self.target})'"], "min_max_lineno": {"min_lineno": 67, "max_lineno": 69}, "source_code": "def __repr__(self):\n    return f'({self.source} -> {self.target})'"}}}, "DirectedGraph": {"doc": {"long_description": "Stores a set of nodes, edges and adjacency matrix.", "short_description": "A directed graph.", "full": "A directed graph.\nStores a set of nodes, edges and adjacency matrix."}, "min_max_lineno": {"min_lineno": 70, "max_lineno": 112}, "methods": {"__init__": {"args": ["self", "load_dict"], "min_max_lineno": {"min_lineno": 77, "max_lineno": 90}, "calls": ["isinstance", "graph.DirectedGraph.add_node", "graph.DirectedGraph.adjacency_list[].append", "graph.DirectedGraph.add_edge"], "store_vars_calls": {"node_from": "self.add_node", "node_to": "self.add_node"}, "source_code": "def __init__(self, load_dict={}):\n    self.nodes = []\n    self.edges = []\n    self.adjacency_list = {}\n    if load_dict and isinstance(load_dict, dict):\n        for vertex in load_dict:\n            node_from = self.add_node(vertex)\n            self.adjacency_list[node_from] = []\n            for neighbor in load_dict[vertex]:\n                node_to = self.add_node(neighbor)\n                self.adjacency_list[node_from].append(node_to)\n                self.add_edge(vertex, neighbor)"}, "add_node": {"doc": {"short_description": "Add a new named node to the graph."}, "args": ["self", "node_name"], "returns": ["self.nodes[self.nodes.index(node_name)]", "node"], "min_max_lineno": {"min_lineno": 91, "max_lineno": 101}, "calls": ["graph.DirectedGraph.nodes.index", "graph.DirectedGraph.nodes.append"], "store_vars_calls": {"node": "Node"}, "source_code": "def add_node(self, node_name):\n    \"\"\"\n        Add a new named node to the graph.\n        \"\"\"\n    try:\n        return self.nodes[self.nodes.index(node_name)]\n    except ValueError:\n        node = Node(node_name)\n        self.nodes.append(node)\n        return node"}, "add_edge": {"doc": {"short_description": "Add a new edge to the graph between two nodes."}, "args": ["self", "node_name_from", "node_name_to"], "min_max_lineno": {"min_lineno": 102, "max_lineno": 112}, "calls": ["graph.DirectedGraph.edges.append", "graph.DirectedGraph.nodes.index"], "source_code": "def add_edge(self, node_name_from, node_name_to):\n    \"\"\"\n        Add a new edge to the graph between two nodes.\n        \"\"\"\n    try:\n        node_from = self.nodes[self.nodes.index(node_name_from)]\n        node_to = self.nodes[self.nodes.index(node_name_to)]\n        self.edges.append(DirectedEdge(node_from, node_to))\n    except ValueError:\n        pass"}}}}, "is_test": false}