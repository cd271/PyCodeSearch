{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/graph/markov_chain.py", "fileNameBase": "markov_chain", "extension": "py", "doc": {"long_description": "my_chain = {\n    'A': {'A': 0.6,\n          'E': 0.4},\n    'E': {'A': 0.7,\n          'E': 0.3}\n}", "short_description": "Implements a markov chain. Chains are described using a dictionary:", "full": "Implements a markov chain. Chains are described using a dictionary:\n\n    my_chain = {\n        'A': {'A': 0.6,\n              'E': 0.4},\n        'E': {'A': 0.7,\n              'E': 0.3}\n    }"}}, "dependencies": [{"import": "random", "type": "external", "type_element": "module"}], "functions": {"__choose_state": {"doc": {"short_description": "Choose the next state randomly"}, "args": ["state_map"], "returns": ["None", "state"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 25}, "calls": ["random.random", "state_map.items"], "store_vars_calls": {"choice": "random.random"}, "source_code": "def __choose_state(state_map):\n    \"\"\"\n    Choose the next state randomly\n    \"\"\"\n    choice = random.random()\n    probability_reached = 0\n    for (state, probability) in state_map.items():\n        probability_reached += probability\n        if probability_reached > choice:\n            return state\n    return None"}, "next_state": {"doc": {"short_description": "Given a markov-chain, randomly chooses the next state given the current state."}, "args": ["chain", "current_state"], "returns": ["__choose_state(next_state_map)"], "min_max_lineno": {"min_lineno": 26, "max_lineno": 32}, "calls": ["chain.get", "markov_chain.__choose_state"], "store_vars_calls": {"next_state_map": "chain.get"}, "source_code": "def next_state(chain, current_state):\n    \"\"\"\n    Given a markov-chain, randomly chooses the next state given the current state.\n    \"\"\"\n    next_state_map = chain.get(current_state)\n    return __choose_state(next_state_map)"}, "iterating_markov_chain": {"doc": {"short_description": "Yield a sequence of states given a markov chain and the initial state"}, "args": ["chain", "state"], "min_max_lineno": {"min_lineno": 33, "max_lineno": 40}, "calls": ["markov_chain.next_state"], "store_vars_calls": {"state": "next_state"}, "source_code": "def iterating_markov_chain(chain, state):\n    \"\"\"\n    Yield a sequence of states given a markov chain and the initial state\n    \"\"\"\n    while True:\n        state = next_state(chain, state)\n        yield state"}}, "is_test": false}