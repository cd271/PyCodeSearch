{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/graph/tarjan.py", "fileNameBase": "tarjan", "extension": "py", "doc": {"long_description": "in a graph.\nhttps://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm", "short_description": "Implements Tarjan's algorithm for finding strongly connected components", "full": "Implements Tarjan's algorithm for finding strongly connected components\nin a graph.\nhttps://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm"}}, "dependencies": [{"from_module": "algorithms.graph.graph", "import": "DirectedGraph", "type": "external", "type_element": "module"}], "classes": {"Tarjan": {"doc": {"short_description": "A directed graph used for finding strongly connected components", "full": "A directed graph used for finding strongly connected components"}, "min_max_lineno": {"min_lineno": 10, "max_lineno": 66}, "methods": {"__init__": {"args": ["self", "dict_graph"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 28}, "calls": ["algorithms.graph.graph.DirectedGraph", "tarjan.Tarjan.strongconnect"], "store_vars_calls": {"self.graph": "DirectedGraph"}, "source_code": "def __init__(self, dict_graph):\n    self.graph = DirectedGraph(dict_graph)\n    self.index = 0\n    self.stack = []\n    for vertex in self.graph.nodes:\n        vertex.index = None\n    self.sccs = []\n    for vertex in self.graph.nodes:\n        if vertex.index is None:\n            self.strongconnect(vertex, self.sccs)"}, "strongconnect": {"doc": {"short_description": "Given a vertex, adds all successors of the given vertex to the same connected component"}, "args": ["self", "vertex", "sccs"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 66}, "calls": ["tarjan.Tarjan.stack.append", "scc.sort", "sccs.append", "tarjan.Tarjan.strongconnect", "min", "tarjan.Tarjan.stack.pop", "scc.append"], "store_vars_calls": {"vertex.lowlink": "min", "adjacent": "self.stack.pop"}, "source_code": "def strongconnect(self, vertex, sccs):\n    \"\"\"\n        Given a vertex, adds all successors of the given vertex to the same connected component\n        \"\"\"\n    vertex.index = self.index\n    vertex.lowlink = self.index\n    self.index += 1\n    self.stack.append(vertex)\n    vertex.on_stack = True\n    for adjacent in self.graph.adjacency_list[vertex]:\n        if adjacent.index is None:\n            self.strongconnect(adjacent, sccs)\n            vertex.lowlink = min(vertex.lowlink, adjacent.lowlink)\n        elif adjacent.on_stack:\n            vertex.lowlink = min(vertex.lowlink, adjacent.index)\n    if vertex.lowlink == vertex.index:\n        scc = []\n        while True:\n            adjacent = self.stack.pop()\n            adjacent.on_stack = False\n            scc.append(adjacent)\n            if adjacent == vertex:\n                break\n        scc.sort()\n        sccs.append(scc)"}}}}, "is_test": false}