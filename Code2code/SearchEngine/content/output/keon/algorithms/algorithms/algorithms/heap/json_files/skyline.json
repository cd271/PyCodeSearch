{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/heap/skyline.py", "fileNameBase": "skyline", "extension": "py", "doc": {"long_description": "in that city when viewed from a distance.\nNow suppose you are given the locations and height of all the buildings\nas shown on a cityscape photo (Figure A),\nwrite a program to output the skyline formed by these buildings collectively (Figure B).\n\nThe geometric information of each building is represented by a triplet of integers [Li, Ri, Hi],\nwhere Li and Ri are the x coordinates of the left and right edge of the ith building, respectively,\nand Hi is its height. It is guaranteed that 0 \u2264 Li, Ri \u2264 INT_MAX, 0 < Hi \u2264 INT_MAX, and Ri - Li > 0.\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\n\nFor instance, the dimensions of all buildings in Figure A are recorded as:\n[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] .\n\nThe output is a list of \"key points\" (red dots in Figure B) in the format of\n[ [x1,y1], [x2, y2], [x3, y3], ... ]\nthat uniquely defines a skyline.\nA key point is the left endpoint of a horizontal line segment. Note that the last key point,\nwhere the rightmost building ends,\nis merely used to mark the termination of the skyline, and always has zero height.\nAlso, the ground in between any two adjacent buildings should be considered part of the skyline contour.\n\nFor instance, the skyline in Figure B should be represented as:[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ].\n\nNotes:\n\nThe number of buildings in any input list is guaranteed to be in the range [0, 10000].\nThe input list is already sorted in ascending order by the left x position Li.\nThe output list must be sorted by the x position.\nThere must be no consecutive horizontal lines of equal height in the output skyline. For instance,\n[...[2 3], [4 5], [7 5], [11 5], [12 7]...] is not acceptable; the three lines of height 5 should be merged\ninto one in the final output as such: [...[2 3], [4 5], [12 7], ...]", "short_description": "A city's skyline is the outer contour of the silhouette formed by all the buildings", "full": "A city's skyline is the outer contour of the silhouette formed by all the buildings\nin that city when viewed from a distance.\nNow suppose you are given the locations and height of all the buildings\nas shown on a cityscape photo (Figure A),\nwrite a program to output the skyline formed by these buildings collectively (Figure B).\n\nThe geometric information of each building is represented by a triplet of integers [Li, Ri, Hi],\nwhere Li and Ri are the x coordinates of the left and right edge of the ith building, respectively,\nand Hi is its height. It is guaranteed that 0 \u2264 Li, Ri \u2264 INT_MAX, 0 < Hi \u2264 INT_MAX, and Ri - Li > 0.\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\n\nFor instance, the dimensions of all buildings in Figure A are recorded as:\n[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] .\n\nThe output is a list of \"key points\" (red dots in Figure B) in the format of\n[ [x1,y1], [x2, y2], [x3, y3], ... ]\nthat uniquely defines a skyline.\nA key point is the left endpoint of a horizontal line segment. Note that the last key point,\nwhere the rightmost building ends,\nis merely used to mark the termination of the skyline, and always has zero height.\nAlso, the ground in between any two adjacent buildings should be considered part of the skyline contour.\n\nFor instance, the skyline in Figure B should be represented as:[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ].\n\nNotes:\n\nThe number of buildings in any input list is guaranteed to be in the range [0, 10000].\nThe input list is already sorted in ascending order by the left x position Li.\nThe output list must be sorted by the x position.\nThere must be no consecutive horizontal lines of equal height in the output skyline. For instance,\n[...[2 3], [4 5], [7 5], [11 5], [12 7]...] is not acceptable; the three lines of height 5 should be merged\ninto one in the final output as such: [...[2 3], [4 5], [12 7], ...]"}}, "dependencies": [{"import": "heapq", "type": "external", "type_element": "module"}], "functions": {"get_skyline": {"doc": {"short_description": "Wortst Time Complexity: O(NlogN)"}, "args": ["lrh"], "returns": ["skyline"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 61}, "calls": ["len", "heapq.heappush", "heapq.heappop"], "source_code": "def get_skyline(lrh):\n    \"\"\"\n    Wortst Time Complexity: O(NlogN)\n    :type buildings: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    (skyline, live) = ([], [])\n    (i, n) = (0, len(lrh))\n    while i < n or live:\n        if not live or (i < n and lrh[i][0] <= -live[0][1]):\n            x = lrh[i][0]\n            while i < n and lrh[i][0] == x:\n                heapq.heappush(live, (-lrh[i][2], -lrh[i][1]))\n                i += 1\n        else:\n            x = -live[0][1]\n            while live and -live[0][1] <= x:\n                heapq.heappop(live)\n        height = len(live) and -live[0][0]\n        if not skyline or height != skyline[-1][1]:\n            skyline += ([x, height],)\n    return skyline"}}, "is_test": false}