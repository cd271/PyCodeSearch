{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/heap/sliding_window_max.py", "fileNameBase": "sliding_window_max", "extension": "py", "doc": {"long_description": "which is moving from the very left of the array to the very right.\nYou can only see the k numbers in the window.\nEach time the sliding window moves right by one position.\n\nFor example,\nGiven nums = [1,3,-1,-3,5,3,6,7], and k = 3.\n\nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\nTherefore, return the max sliding window as [3,3,5,5,6,7].", "short_description": "Given an array nums, there is a sliding window of size k", "full": "Given an array nums, there is a sliding window of size k\nwhich is moving from the very left of the array to the very right.\nYou can only see the k numbers in the window.\nEach time the sliding window moves right by one position.\n\nFor example,\nGiven nums = [1,3,-1,-3,5,3,6,7], and k = 3.\n\nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\nTherefore, return the max sliding window as [3,3,5,5,6,7]."}}, "dependencies": [{"import": "collections", "type": "external", "type_element": "module"}], "functions": {"max_sliding_window": {"args": ["nums", "k"], "returns": ["res", "nums"], "min_max_lineno": {"min_lineno": 23, "max_lineno": 42}, "calls": ["collections.deque", "res.append", "max", "len", "collections.deque.append", "collections.deque.popleft"], "store_vars_calls": {"queue": "collections.deque"}, "source_code": "def max_sliding_window(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return nums\n    queue = collections.deque()\n    res = []\n    for num in nums:\n        if len(queue) < k:\n            queue.append(num)\n        else:\n            res.append(max(queue))\n            queue.popleft()\n            queue.append(num)\n    res.append(max(queue))\n    return res"}}, "is_test": false}