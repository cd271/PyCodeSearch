{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/linkedlist/add_two_numbers.py", "fileNameBase": "add_two_numbers", "extension": "py", "doc": {"long_description": "two non-negative integers. The digits are stored in reverse order\nand each of their nodes contain a single digit.\nAdd the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero,\nexcept the number 0 itself.\n\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8", "short_description": "You are given two non-empty linked lists representing", "full": "You are given two non-empty linked lists representing\ntwo non-negative integers. The digits are stored in reverse order\nand each of their nodes contain a single digit.\nAdd the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero,\nexcept the number 0 itself.\n\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8"}}, "dependencies": [{"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"Node": {"min_max_lineno": {"min_lineno": 17, "max_lineno": 21}, "methods": {"__init__": {"args": ["self", "x"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 21}, "source_code": "def __init__(self, x):\n    self.val = x\n    self.next = None"}}}, "TestSuite": {"doc": {"long_description": "the adding function, above.", "short_description": "testsuite for the linked list structure and", "full": "testsuite for the linked list structure and\nthe adding function, above."}, "extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 77, "max_lineno": 129}, "methods": {"test_convert_to_str": {"args": ["self"], "min_max_lineno": {"min_lineno": 83, "max_lineno": 88}, "calls": ["add_two_numbers.Node", "add_two_numbers.TestSuite.assertEqual", "add_two_numbers.convert_to_str"], "store_vars_calls": {"number1": "Node", "number1.next": "Node", "number1.next.next": "Node"}, "source_code": "def test_convert_to_str(self):\n    number1 = Node(2)\n    number1.next = Node(4)\n    number1.next.next = Node(3)\n    self.assertEqual('243', convert_to_str(number1))"}, "test_add_two_numbers": {"args": ["self"], "min_max_lineno": {"min_lineno": 89, "max_lineno": 125}, "calls": ["add_two_numbers.Node", "add_two_numbers.convert_to_str", "add_two_numbers.TestSuite.assertEqual", "add_two_numbers.add_two_numbers"], "store_vars_calls": {"number1": "Node", "number1.next": "Node", "number1.next.next": "Node", "number2": "Node", "number2.next": "Node", "number2.next.next": "Node", "result": "convert_to_str", "number3": "Node", "number3.next": "Node", "number3.next.next": "Node", "number4": "Node", "number4.next": "Node", "number4.next.next": "Node", "number5": "Node", "number6": "Node", "number7": "Node", "number7.next": "Node", "number7.next.next": "Node", "number8": "Node", "number8.next": "Node", "number8.next.next": "Node"}, "source_code": "def test_add_two_numbers(self):\n    number1 = Node(2)\n    number1.next = Node(4)\n    number1.next.next = Node(3)\n    number2 = Node(5)\n    number2.next = Node(6)\n    number2.next.next = Node(4)\n    result = convert_to_str(add_two_numbers(number1, number2))\n    self.assertEqual('708', result)\n    number3 = Node(1)\n    number3.next = Node(1)\n    number3.next.next = Node(9)\n    number4 = Node(1)\n    number4.next = Node(0)\n    number4.next.next = Node(1)\n    result = convert_to_str(add_two_numbers(number3, number4))\n    self.assertEqual('2101', result)\n    number5 = Node(1)\n    number6 = Node(0)\n    result = convert_to_str(add_two_numbers(number5, number6))\n    self.assertEqual('1', result)\n    number7 = Node(9)\n    number7.next = Node(1)\n    number7.next.next = Node(1)\n    number8 = Node(1)\n    number8.next = Node(0)\n    number8.next.next = Node(1)\n    result = convert_to_str(add_two_numbers(number7, number8))\n    self.assertEqual('022', result)"}, "test_convert_to_list": {"args": ["self"], "min_max_lineno": {"min_lineno": 126, "max_lineno": 129}, "calls": ["add_two_numbers.convert_to_str", "add_two_numbers.TestSuite.assertEqual", "add_two_numbers.convert_to_list"], "store_vars_calls": {"result": "convert_to_str"}, "source_code": "def test_convert_to_list(self):\n    result = convert_to_str(convert_to_list(112))\n    self.assertEqual('211', result)"}}}}, "functions": {"add_two_numbers": {"args": ["left", "right"], "annotated_arg_types": {"left": "Node", "right": "Node"}, "annotated_return_type": "Node", "returns": ["head.next"], "min_max_lineno": {"min_lineno": 23, "max_lineno": 41}, "calls": ["print", "add_two_numbers.Node"], "store_vars_calls": {"head": "Node", "current.next": "Node"}, "source_code": "def add_two_numbers(left: Node, right: Node) -> Node:\n    head = Node(0)\n    current = head\n    sum = 0\n    while left or right:\n        print('adding: ', left.val, right.val)\n        sum //= 10\n        if left:\n            sum += left.val\n            left = left.next\n        if right:\n            sum += right.val\n            right = right.next\n        current.next = Node(sum % 10)\n        current = current.next\n    if sum // 10 == 1:\n        current.next = Node(1)\n    return head.next"}, "convert_to_list": {"doc": {"long_description": "for example: give 112\nresult 2 -> 1 -> 1", "short_description": "converts a positive integer into a (reversed) linked list."}, "args": ["number"], "annotated_arg_types": {"number": "int"}, "annotated_return_type": "Node", "returns": ["head.next"], "min_max_lineno": {"min_lineno": 43, "max_lineno": 64}, "calls": ["add_two_numbers.Node", "print"], "store_vars_calls": {"head": "Node", "current.next": "Node"}, "source_code": "def convert_to_list(number: int) -> Node:\n    \"\"\"\n        converts a positive integer into a (reversed) linked list.\n        for example: give 112\n        result 2 -> 1 -> 1\n    \"\"\"\n    if number >= 0:\n        head = Node(0)\n        current = head\n        remainder = number % 10\n        quotient = number // 10\n        while quotient != 0:\n            current.next = Node(remainder)\n            current = current.next\n            remainder = quotient % 10\n            quotient //= 10\n        current.next = Node(remainder)\n        return head.next\n    else:\n        print('number must be positive!')"}, "convert_to_str": {"doc": {"short_description": "converts the non-negative number list into a string."}, "args": ["l"], "annotated_arg_types": {"l": "Node"}, "annotated_return_type": "str", "returns": ["result"], "min_max_lineno": {"min_lineno": 66, "max_lineno": 75}, "calls": ["str"], "source_code": "def convert_to_str(l: Node) -> str:\n    \"\"\"\n        converts the non-negative number list into a string.\n    \"\"\"\n    result = ''\n    while l:\n        result += str(l.val)\n        l = l.next\n    return result"}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "add_two_numbers.unittest.main", "type": "script"}, "is_test": true}