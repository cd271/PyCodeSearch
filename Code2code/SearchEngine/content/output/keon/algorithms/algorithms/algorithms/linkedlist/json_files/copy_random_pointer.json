{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/linkedlist/copy_random_pointer.py", "fileNameBase": "copy_random_pointer", "extension": "py", "doc": {"long_description": "pointer which could point to any node in the list or null.\n\nReturn a deep copy of the list.", "short_description": "A linked list is given such that each node contains an additional random", "full": "A linked list is given such that each node contains an additional random\npointer which could point to any node in the list or null.\n\nReturn a deep copy of the list."}}, "dependencies": [{"from_module": "collections", "import": "defaultdict", "type": "external", "type_element": "module"}], "classes": {"RandomListNode": {"extend": ["object"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 15}, "methods": {"__init__": {"args": ["self", "label"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 15}, "source_code": "def __init__(self, label):\n    self.label = label\n    self.next = None\n    self.random = None"}}}}, "functions": {"copy_random_pointer_v1": {"args": ["head"], "returns": ["dic.get(head)"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 32}, "calls": ["dict", "dict.get"], "store_vars_calls": {"dic": "dict", "dic[].next": "dic.get", "dic[].random": "dic.get"}, "source_code": "def copy_random_pointer_v1(head):\n    \"\"\"\n    :type head: RandomListNode\n    :rtype: RandomListNode\n    \"\"\"\n    dic = dict()\n    m = n = head\n    while m:\n        dic[m] = RandomListNode(m.label)\n        m = m.next\n    while n:\n        dic[n].next = dic.get(n.next)\n        dic[n].random = dic.get(n.random)\n        n = n.next\n    return dic.get(head)"}, "copy_random_pointer_v2": {"args": ["head"], "returns": ["copy[head]"], "min_max_lineno": {"min_lineno": 35, "max_lineno": 49}, "calls": ["collections.defaultdict"], "store_vars_calls": {"copy": "defaultdict"}, "source_code": "def copy_random_pointer_v2(head):\n    \"\"\"\n    :type head: RandomListNode\n    :rtype: RandomListNode\n    \"\"\"\n    copy = defaultdict(lambda : RandomListNode(0))\n    copy[None] = None\n    node = head\n    while node:\n        copy[node].label = node.label\n        copy[node].next = copy[node.next]\n        copy[node].random = copy[node.random]\n        node = node.next\n    return copy[head]"}}, "is_test": false}