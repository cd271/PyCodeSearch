{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/linkedlist/delete_node.py", "fileNameBase": "delete_node", "extension": "py", "doc": {"long_description": "in a singly linked list, given only access to that node.\n\nSupposed the linked list is 1 -> 2 -> 3 -> 4 and\nyou are given the third node with value 3,\nthe linked list should become 1 -> 2 -> 4 after calling your function.", "short_description": "Write a function to delete a node (except the tail)", "full": "Write a function to delete a node (except the tail)\nin a singly linked list, given only access to that node.\n\nSupposed the linked list is 1 -> 2 -> 3 -> 4 and\nyou are given the third node with value 3,\nthe linked list should become 1 -> 2 -> 4 after calling your function."}}, "dependencies": [{"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"Node": {"min_max_lineno": {"min_lineno": 12, "max_lineno": 16}, "methods": {"__init__": {"args": ["self", "x"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 16}, "source_code": "def __init__(self, x):\n    self.val = x\n    self.next = None"}}}, "TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 25, "max_lineno": 59}, "methods": {"test_delete_node": {"args": ["self"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 59}, "calls": ["range", "delete_node.delete_node", "delete_node.TestSuite.assertEqual", "delete_node.TestSuite.assertIsNone", "delete_node.TestSuite.assertRaises", "delete_node.Node"], "store_vars_calls": {"head": "Node", "curr.next": "Node"}, "source_code": "def test_delete_node(self):\n    head = Node(1)\n    curr = head\n    for i in range(2, 6):\n        curr.next = Node(i)\n        curr = curr.next\n    node3 = head.next.next\n    delete_node(node3)\n    curr = head\n    self.assertEqual(1, curr.val)\n    curr = curr.next\n    self.assertEqual(2, curr.val)\n    curr = curr.next\n    self.assertEqual(4, curr.val)\n    curr = curr.next\n    self.assertEqual(5, curr.val)\n    tail = curr\n    self.assertIsNone(tail.next)\n    self.assertRaises(ValueError, delete_node, tail)\n    self.assertRaises(ValueError, delete_node, tail.next)"}}}}, "functions": {"delete_node": {"args": ["node"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 23}, "source_code": "def delete_node(node):\n    if node is None or node.next is None:\n        raise ValueError\n    node.val = node.next.val\n    node.next = node.next.next"}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "delete_node.unittest.main", "type": "script"}, "is_test": true}