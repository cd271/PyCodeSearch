{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/linkedlist/first_cyclic_node.py", "fileNameBase": "first_cyclic_node", "extension": "py", "doc": {"long_description": "1 -> 2 -> 3 -> 4 -> 5 -> 1  => 1\nA -> B -> C -> D -> E -> C  => C\n\nNote: The solution is a direct implementation\n      Floyd's cycle-finding algorithm (Floyd's Tortoise and Hare).", "short_description": "Given a linked list, find the first node of a cycle in it.", "full": "Given a linked list, find the first node of a cycle in it.\n1 -> 2 -> 3 -> 4 -> 5 -> 1  => 1\nA -> B -> C -> D -> E -> C  => C\n\nNote: The solution is a direct implementation\n      Floyd's cycle-finding algorithm (Floyd's Tortoise and Hare)."}}, "dependencies": [{"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"Node": {"min_max_lineno": {"min_lineno": 12, "max_lineno": 17}, "methods": {"__init__": {"args": ["self", "x"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 17}, "source_code": "def __init__(self, x):\n    self.val = x\n    self.next = None"}}}, "TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 40, "max_lineno": 60}, "methods": {"test_first_cyclic_node": {"args": ["self"], "min_max_lineno": {"min_lineno": 42, "max_lineno": 60}, "calls": ["first_cyclic_node.Node", "first_cyclic_node.TestSuite.assertEqual", "first_cyclic_node.first_cyclic_node"], "store_vars_calls": {"head": "Node", "head.next": "Node", "cyclic_node": "Node", "curr.next": "Node"}, "source_code": "def test_first_cyclic_node(self):\n    head = Node('A')\n    head.next = Node('B')\n    curr = head.next\n    cyclic_node = Node('C')\n    curr.next = cyclic_node\n    curr = curr.next\n    curr.next = Node('D')\n    curr = curr.next\n    curr.next = Node('E')\n    curr = curr.next\n    curr.next = cyclic_node\n    self.assertEqual('C', first_cyclic_node(head).val)"}}}}, "functions": {"first_cyclic_node": {"args": ["head"], "returns": ["runner", "None"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 38}, "source_code": "def first_cyclic_node(head):\n    \"\"\"\n    :type head: Node\n    :rtype: Node\n    \"\"\"\n    runner = walker = head\n    while runner and runner.next:\n        runner = runner.next.next\n        walker = walker.next\n        if runner is walker:\n            break\n    if runner is None or runner.next is None:\n        return None\n    walker = head\n    while runner is not walker:\n        (runner, walker) = (runner.next, walker.next)\n    return runner"}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "first_cyclic_node.unittest.main", "type": "script"}, "is_test": true}