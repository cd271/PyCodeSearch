{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/linkedlist/intersection.py", "fileNameBase": "intersection", "extension": "py", "doc": {"long_description": "In this example:\n1 -> 3 -> 5\n                            7 -> 9 -> 11\n            /\n2 -> 4 -> 6\n...we would return 7.\nNote that the node itself is the unique identifier, not the value of the node.", "short_description": "This function takes two lists and returns the node they have in common, if any.", "full": "This function takes two lists and returns the node they have in common, if any.\nIn this example:\n1 -> 3 -> 5\n                            7 -> 9 -> 11\n            /\n2 -> 4 -> 6\n...we would return 7.\nNote that the node itself is the unique identifier, not the value of the node."}}, "dependencies": [{"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"Node": {"extend": ["object"], "min_max_lineno": {"min_lineno": 15, "max_lineno": 19}, "methods": {"__init__": {"args": ["self", "val"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 19}, "source_code": "def __init__(self, val=None):\n    self.val = val\n    self.next = None"}}}, "TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 67, "max_lineno": 97}, "methods": {"test_intersection": {"args": ["self"], "min_max_lineno": {"min_lineno": 69, "max_lineno": 97}, "calls": ["intersection.Node", "intersection.TestSuite.assertEqual", "intersection.intersection"], "store_vars_calls": {"a1": "Node", "b1": "Node", "c1": "Node", "d": "Node", "a2": "Node", "b2": "Node", "c2": "Node", "e": "Node", "f": "Node"}, "source_code": "def test_intersection(self):\n    a1 = Node(1)\n    b1 = Node(3)\n    c1 = Node(5)\n    d = Node(7)\n    a2 = Node(2)\n    b2 = Node(4)\n    c2 = Node(6)\n    e = Node(9)\n    f = Node(11)\n    a1.next = b1\n    b1.next = c1\n    c1.next = d\n    a2.next = b2\n    b2.next = c2\n    c2.next = d\n    d.next = e\n    e.next = f\n    self.assertEqual(7, intersection(a1, a2).val)"}}}}, "functions": {"intersection": {"args": ["h1", "h2"], "returns": ["None", "longer"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 65}, "source_code": "def intersection(h1, h2):\n    count = 0\n    flag = None\n    h1_orig = h1\n    h2_orig = h2\n    while h1 or h2:\n        count += 1\n        if not flag and (h1.next is None or h2.next is None):\n            flag = (count, h1.next, h2.next)\n        if h1:\n            h1 = h1.next\n        if h2:\n            h2 = h2.next\n    long_len = count\n    short_len = flag[0]\n    if flag[1] is None:\n        shorter = h1_orig\n        longer = h2_orig\n    elif flag[2] is None:\n        shorter = h2_orig\n        longer = h1_orig\n    while longer and shorter:\n        while long_len > short_len:\n            longer = longer.next\n            long_len -= 1\n        if longer == shorter:\n            return longer\n        else:\n            longer = longer.next\n            shorter = shorter.next\n    return None"}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "intersection.unittest.main", "type": "script"}, "is_test": true}