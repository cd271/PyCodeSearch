{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/linkedlist/is_palindrome.py", "fileNameBase": "is_palindrome", "extension": "py"}, "functions": {"is_palindrome": {"args": ["head"], "returns": ["True", "True", "False"], "min_max_lineno": {"min_lineno": 1, "max_lineno": 26}, "source_code": "def is_palindrome(head):\n    if not head:\n        return True\n    (fast, slow) = (head.next, head)\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n    second = slow.next\n    slow.next = None\n    node = None\n    while second:\n        nxt = second.next\n        second.next = node\n        node = second\n        second = nxt\n    while node:\n        if node.val != head.val:\n            return False\n        node = node.next\n        head = head.next\n    return True"}, "is_palindrome_stack": {"args": ["head"], "returns": ["True", "True", "False"], "min_max_lineno": {"min_lineno": 28, "max_lineno": 50}, "calls": ["stack.append", "stack.pop"], "source_code": "def is_palindrome_stack(head):\n    if not head or not head.next:\n        return True\n    slow = fast = cur = head\n    while fast and fast.next:\n        (fast, slow) = (fast.next.next, slow.next)\n    stack = [slow.val]\n    while slow.next:\n        slow = slow.next\n        stack.append(slow.val)\n    while stack:\n        if stack.pop() != cur.val:\n            return False\n        cur = cur.next\n    return True"}, "is_palindrome_dict": {"doc": {"long_description": "and the values are the positions at which these values occur in the list.\nWe then iterate over the dict and if there is more than one key with an odd\nnumber of occurrences, bail out and return False.\nOtherwise, we want to ensure that the positions of occurrence sum to the\nvalue of the length of the list - 1, working from the outside of the list inward.\nFor example:\nInput: 1 -> 1 -> 2 -> 3 -> 2 -> 1 -> 1\nd = {1: [0,1,5,6], 2: [2,4], 3: [3]}\n'3' is the middle outlier, 2+4=6, 0+6=6 and 5+1=6 so we have a palindrome.", "short_description": "This function builds up a dictionary where the keys are the values of the list,"}, "args": ["head"], "returns": ["True", "True", "False", "False"], "min_max_lineno": {"min_lineno": 52, "max_lineno": 90}, "calls": ["d.values", "d.keys", "d[].append", "range", "len"], "source_code": "def is_palindrome_dict(head):\n    \"\"\"\n    This function builds up a dictionary where the keys are the values of the list,\n    and the values are the positions at which these values occur in the list.\n    We then iterate over the dict and if there is more than one key with an odd\n    number of occurrences, bail out and return False.\n    Otherwise, we want to ensure that the positions of occurrence sum to the\n    value of the length of the list - 1, working from the outside of the list inward.\n    For example:\n    Input: 1 -> 1 -> 2 -> 3 -> 2 -> 1 -> 1\n    d = {1: [0,1,5,6], 2: [2,4], 3: [3]}\n    '3' is the middle outlier, 2+4=6, 0+6=6 and 5+1=6 so we have a palindrome.\n    \"\"\"\n    if not head or not head.next:\n        return True\n    d = {}\n    pos = 0\n    while head:\n        if head.val in d.keys():\n            d[head.val].append(pos)\n        else:\n            d[head.val] = [pos]\n        head = head.next\n        pos += 1\n    checksum = pos - 1\n    middle = 0\n    for v in d.values():\n        if len(v) % 2 != 0:\n            middle += 1\n        else:\n            step = 0\n            for i in range(0, len(v)):\n                if v[i] + v[len(v) - 1 - step] != checksum:\n                    return False\n                step += 1\n        if middle > 1:\n            return False\n    return True"}}, "is_test": false}