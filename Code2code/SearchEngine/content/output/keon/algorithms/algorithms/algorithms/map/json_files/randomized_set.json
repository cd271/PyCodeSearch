{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/map/randomized_set.py", "fileNameBase": "randomized_set", "extension": "py", "doc": {"long_description": "in average O(1) time.\n\ninsert(val): Inserts an item val to the set if not already present.\nremove(val): Removes an item val from the set if present.\ngetRandom: Returns a random element from current set of elements.\nEach element must have the same probability of being returned.", "short_description": "Design a data structure that supports all following operations", "full": "Design a data structure that supports all following operations\nin average O(1) time.\n\ninsert(val): Inserts an item val to the set if not already present.\nremove(val): Removes an item val from the set if present.\ngetRandom: Returns a random element from current set of elements.\nEach element must have the same probability of being returned."}}, "dependencies": [{"import": "random", "type": "external", "type_element": "module"}], "classes": {"RandomizedSet": {"min_max_lineno": {"min_lineno": 15, "max_lineno": 39}, "methods": {"__init__": {"args": ["self"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 19}, "source_code": "def __init__(self):\n    self.nums = []\n    self.idxs = {}"}, "insert": {"args": ["self", "val"], "returns": ["False", "True"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 26}, "calls": ["randomized_set.RandomizedSet.nums.append", "len"], "source_code": "def insert(self, val):\n    if val not in self.idxs:\n        self.nums.append(val)\n        self.idxs[val] = len(self.nums) - 1\n        return True\n    return False"}, "remove": {"args": ["self", "val"], "returns": ["False", "True"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 35}, "calls": ["randomized_set.RandomizedSet.nums.pop", "randomized_set.RandomizedSet.idxs.pop"], "source_code": "def remove(self, val):\n    if val in self.idxs:\n        (idx, last) = (self.idxs[val], self.nums[-1])\n        (self.nums[idx], self.idxs[last]) = (last, idx)\n        self.nums.pop()\n        self.idxs.pop(val, 0)\n        return True\n    return False"}, "get_random": {"args": ["self"], "returns": ["self.nums[idx]"], "min_max_lineno": {"min_lineno": 36, "max_lineno": 39}, "calls": ["random.randint", "len"], "store_vars_calls": {"idx": "random.randint"}, "source_code": "def get_random(self):\n    idx = random.randint(0, len(self.nums) - 1)\n    return self.nums[idx]"}}}}, "body": {"calls": ["print", "randomized_set.RandomizedSet.insert", "randomized_set.RandomizedSet.remove", "randomized_set.RandomizedSet.get_random"], "store_vars_calls": {"rs": "RandomizedSet"}, "source_code": ["RandomizedSet()", "print('insert 1: ', rs.insert(1))", "rs.insert(1)", "print('insert 2: ', rs.insert(2))", "rs.insert(2)", "print('insert 3: ', rs.insert(3))", "rs.insert(3)", "print('insert 4: ', rs.insert(4))", "rs.insert(4)", "print('remove 3: ', rs.remove(3))", "rs.remove(3)", "print('remove 3: ', rs.remove(3))", "rs.remove(3)", "print('remove 1: ', rs.remove(1))", "rs.remove(1)", "print('random: ', rs.get_random())", "rs.get_random()", "print('random: ', rs.get_random())", "rs.get_random()", "print('random: ', rs.get_random())", "rs.get_random()", "print('random: ', rs.get_random())", "rs.get_random()"]}, "main_info": {"main_flag": 1, "main_function": "randomized_set.RandomizedSet", "type": "script"}, "is_test": false}