{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/chinese_remainder_theorem.py", "fileNameBase": "chinese_remainder_theorem", "extension": "py", "doc": {"short_description": "Solves system of equations using the chinese remainder theorem if possible.", "full": "Solves system of equations using the chinese remainder theorem if possible."}}, "dependencies": [{"from_module": "typing", "import": "List", "type": "external", "type_element": "module"}, {"from_module": "algorithms.maths.gcd", "import": "gcd", "type": "external", "type_element": "module"}], "functions": {"solve_chinese_remainder": {"doc": {"long_description": "for a system of equations.\nThe system of equations has the form:\nx % nums[0] = rems[0]\nx % nums[1] = rems[1]\n...\nx % nums[k - 1] = rems[k - 1]\nWhere k is the number of elements in nums and rems, k > 0.\nAll numbers in nums needs to be pariwise coprime otherwise an exception is raised\nreturns x: the smallest value for x that satisfies the system of equations", "short_description": "Computes the smallest x that satisfies the chinese remainder theorem"}, "args": ["nums", "rems"], "annotated_arg_types": {"nums": "List[int]", "rems": "List[int]"}, "returns": ["x"], "min_max_lineno": {"min_lineno": 7, "max_lineno": 40}, "calls": ["len", "Exception", "chinese_remainder_theorem._check_coprime"], "store_vars_calls": {"k": "len"}, "source_code": "def solve_chinese_remainder(nums: List[int], rems: List[int]):\n    \"\"\"\n    Computes the smallest x that satisfies the chinese remainder theorem\n    for a system of equations.\n    The system of equations has the form:\n    x % nums[0] = rems[0]\n    x % nums[1] = rems[1]\n    ...\n    x % nums[k - 1] = rems[k - 1]\n    Where k is the number of elements in nums and rems, k > 0.\n    All numbers in nums needs to be pariwise coprime otherwise an exception is raised\n    returns x: the smallest value for x that satisfies the system of equations\n    \"\"\"\n    if not len(nums) == len(rems):\n        raise Exception('nums and rems should have equal length')\n    if not len(nums) > 0:\n        raise Exception('Lists nums and rems need to contain at least one element')\n    for num in nums:\n        if not num > 1:\n            raise Exception('All numbers in nums needs to be > 1')\n    if not _check_coprime(nums):\n        raise Exception('All pairs of numbers in nums are not coprime')\n    k = len(nums)\n    x = 1\n    while True:\n        i = 0\n        while i < k:\n            if x % nums[i] != rems[i]:\n                break\n            i += 1\n        if i == k:\n            return x\n        x += 1"}, "_check_coprime": {"args": ["list_to_check"], "annotated_arg_types": {"list_to_check": "List[int]"}, "returns": ["True", "False"], "min_max_lineno": {"min_lineno": 41, "max_lineno": 47}, "calls": ["enumerate", "algorithms.maths.gcd.gcd"], "source_code": "def _check_coprime(list_to_check: List[int]):\n    for (ind, num) in enumerate(list_to_check):\n        for num2 in list_to_check[ind + 1:]:\n            if gcd(num, num2) != 1:\n                return False\n    return True"}}, "is_test": false}