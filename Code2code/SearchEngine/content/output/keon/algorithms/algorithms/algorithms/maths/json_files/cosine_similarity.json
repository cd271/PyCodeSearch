{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/cosine_similarity.py", "fileNameBase": "cosine_similarity", "extension": "py", "doc": {"long_description": "Two list must have the same length.\n\nExample:\ncosine_similarity([1, 1, 1], [1, 2, -1])  # output : 0.47140452079103173", "short_description": "Calculate cosine similarity between given two 1d list.", "full": "Calculate cosine similarity between given two 1d list.\nTwo list must have the same length.\n\nExample:\ncosine_similarity([1, 1, 1], [1, 2, -1])  # output : 0.47140452079103173"}}, "dependencies": [{"import": "math", "type": "external", "type_element": "module"}], "functions": {"_l2_distance": {"doc": {"short_description": "Calculate l2 distance from two given vectors."}, "args": ["vec"], "returns": ["norm"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 20}, "calls": ["math.sqrt"], "store_vars_calls": {"norm": "math.sqrt"}, "source_code": "def _l2_distance(vec):\n    \"\"\"\n    Calculate l2 distance from two given vectors.\n    \"\"\"\n    norm = 0.0\n    for element in vec:\n        norm += element * element\n    norm = math.sqrt(norm)\n    return norm"}, "cosine_similarity": {"doc": {"short_description": "Calculate cosine similarity between given two vectors"}, "args": ["vec1", "vec2"], "returns": ["similarity"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 44}, "calls": ["cosine_similarity._l2_distance", "zip", "len", "ValueError", "str"], "store_vars_calls": {"norm_a": "_l2_distance", "norm_b": "_l2_distance"}, "source_code": "def cosine_similarity(vec1, vec2):\n    \"\"\"\n    Calculate cosine similarity between given two vectors\n    :type vec1: list\n    :type vec2: list\n    \"\"\"\n    if len(vec1) != len(vec2):\n        raise ValueError('The two vectors must be the same length. Got shape ' + str(len(vec1)) + ' and ' + str(len(vec2)))\n    norm_a = _l2_distance(vec1)\n    norm_b = _l2_distance(vec2)\n    similarity = 0.0\n    for (vec1_element, vec2_element) in zip(vec1, vec2):\n        similarity += vec1_element * vec2_element\n    similarity /= norm_a * norm_b\n    return similarity"}}, "is_test": false}