{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/decimal_to_binary_ip.py", "fileNameBase": "decimal_to_binary_ip", "extension": "py", "doc": {"long_description": "binary representation. For example,\ndecimal_to_binary(255.0.0.5) returns 11111111.00000000.00000000.00000101\naccepts string\nreturns string", "short_description": "Given an ip address in dotted-decimal representation, determine the", "full": "Given an ip address in dotted-decimal representation, determine the\nbinary representation. For example,\ndecimal_to_binary(255.0.0.5) returns 11111111.00000000.00000000.00000101\naccepts string\nreturns string"}}, "functions": {"decimal_to_binary_util": {"doc": {"short_description": "Convert 8-bit decimal number to binary representation"}, "args": ["val"], "returns": ["binary_rep"], "min_max_lineno": {"min_lineno": 9, "max_lineno": 26}, "calls": ["int", "str"], "store_vars_calls": {"val": "int"}, "source_code": "def decimal_to_binary_util(val):\n    \"\"\"\n    Convert 8-bit decimal number to binary representation\n    :type val: str\n    :rtype: str\n    \"\"\"\n    bits = [128, 64, 32, 16, 8, 4, 2, 1]\n    val = int(val)\n    binary_rep = ''\n    for bit in bits:\n        if val >= bit:\n            binary_rep += str(1)\n            val -= bit\n        else:\n            binary_rep += str(0)\n    return binary_rep"}, "decimal_to_binary_ip": {"doc": {"short_description": "Convert dotted-decimal ip address to binary representation with help of decimal_to_binary_util"}, "args": ["ip"], "returns": ["'.'.join(binary_list)"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 36}, "calls": ["ip.split", "binary_list.append", "decimal_to_binary_ip.decimal_to_binary_util"], "store_vars_calls": {"values": "ip.split"}, "source_code": "def decimal_to_binary_ip(ip):\n    \"\"\"\n    Convert dotted-decimal ip address to binary representation with help of decimal_to_binary_util\n    \"\"\"\n    values = ip.split('.')\n    binary_list = []\n    for val in values:\n        binary_list.append(decimal_to_binary_util(val))\n    return '.'.join(binary_list)"}}, "is_test": false}