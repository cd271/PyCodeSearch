{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/diffie_hellman_key_exchange.py", "fileNameBase": "diffie_hellman_key_exchange", "extension": "py", "doc": {"short_description": "Algorithms for performing diffie-hellman key exchange.", "full": "Algorithms for performing diffie-hellman key exchange."}}, "dependencies": [{"import": "math", "type": "external", "type_element": "module"}, {"from_module": "random", "import": "randint", "type": "external", "type_element": "module"}], "functions": {"prime_check": {"doc": {"long_description": "Else return False.", "short_description": "Return True if num is a prime number"}, "args": ["num"], "returns": ["True", "False", "True", "False", "False"], "min_max_lineno": {"min_lineno": 12, "max_lineno": 29}, "source_code": "def prime_check(num):\n    \"\"\"Return True if num is a prime number\n    Else return False.\n    \"\"\"\n    if num <= 1:\n        return False\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    j = 5\n    while j * j <= num:\n        if num % j == 0 or num % (j + 2) == 0:\n            return False\n        j += 6\n    return True"}, "find_order": {"args": ["a", "n"], "returns": ["-1", "1", "-1", "i"], "min_max_lineno": {"min_lineno": 37, "max_lineno": 48}, "calls": ["range", "math.gcd", "print", "pow"], "source_code": "def find_order(a, n):\n    if (a == 1) & (n == 1):\n        return 1\n    if math.gcd(a, n) != 1:\n        print('a and n should be relative prime!')\n        return -1\n    for i in range(1, n):\n        if pow(a, i) % n == 1:\n            return i\n    return -1"}, "euler_totient": {"doc": {"long_description": "Time Complexity: O(sqrt(n)).", "short_description": "Euler's totient function or Phi function."}, "args": ["n"], "returns": ["result"], "min_max_lineno": {"min_lineno": 57, "max_lineno": 69}, "calls": ["range", "int"], "source_code": "def euler_totient(n):\n    \"\"\"Euler's totient function or Phi function.\n    Time Complexity: O(sqrt(n)).\"\"\"\n    result = n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n            result -= result // i\n    if n > 1:\n        result -= result // n\n    return result"}, "find_primitive_root": {"doc": {"short_description": "Returns all primitive roots of n. "}, "args": ["n"], "returns": ["p_root_list", "[0]"], "min_max_lineno": {"min_lineno": 77, "max_lineno": 92}, "calls": ["diffie_hellman_key_exchange.euler_totient", "range", "diffie_hellman_key_exchange.find_order", "math.gcd", "p_root_list.append"], "store_vars_calls": {"phi": "euler_totient", "order": "find_order"}, "source_code": "def find_primitive_root(n):\n    \"\"\" Returns all primitive roots of n. \"\"\"\n    if n == 1:\n        return [0]\n    phi = euler_totient(n)\n    p_root_list = []\n    for i in range(1, n):\n        if math.gcd(i, n) != 1:\n            continue\n        order = find_order(i, n)\n        if order == phi:\n            p_root_list.append(i)\n    return p_root_list"}, "alice_private_key": {"doc": {"long_description": "in the range of 1 ~ p-1.\nThis must be kept in secret", "short_description": "Alice determine her private key"}, "args": ["p"], "returns": ["randint(1, p - 1)"], "min_max_lineno": {"min_lineno": 106, "max_lineno": 111}, "calls": ["random.randint"], "source_code": "def alice_private_key(p):\n    \"\"\"Alice determine her private key\n    in the range of 1 ~ p-1.\n    This must be kept in secret\"\"\"\n    return randint(1, p - 1)"}, "alice_public_key": {"doc": {"long_description": "with her private key.\nThis is open to public", "short_description": "Alice calculate her public key"}, "args": ["a_pr_k", "a", "p"], "returns": ["pow(a, a_pr_k) % p"], "min_max_lineno": {"min_lineno": 113, "max_lineno": 118}, "calls": ["pow"], "source_code": "def alice_public_key(a_pr_k, a, p):\n    \"\"\"Alice calculate her public key\n    with her private key.\n    This is open to public\"\"\"\n    return pow(a, a_pr_k) % p"}, "bob_private_key": {"doc": {"long_description": "in the range of 1 ~ p-1.\nThis must be kept in secret", "short_description": "Bob determine his private key"}, "args": ["p"], "returns": ["randint(1, p - 1)"], "min_max_lineno": {"min_lineno": 120, "max_lineno": 125}, "calls": ["random.randint"], "source_code": "def bob_private_key(p):\n    \"\"\"Bob determine his private key\n    in the range of 1 ~ p-1.\n    This must be kept in secret\"\"\"\n    return randint(1, p - 1)"}, "bob_public_key": {"doc": {"long_description": "with his private key.\nThis is open to public", "short_description": "Bob calculate his public key"}, "args": ["b_pr_k", "a", "p"], "returns": ["pow(a, b_pr_k) % p"], "min_max_lineno": {"min_lineno": 127, "max_lineno": 132}, "calls": ["pow"], "source_code": "def bob_public_key(b_pr_k, a, p):\n    \"\"\"Bob calculate his public key\n    with his private key.\n    This is open to public\"\"\"\n    return pow(a, b_pr_k) % p"}, "alice_shared_key": {"doc": {"long_description": "with her private key and Bob's public key.\nThis must be kept in secret", "short_description": "Alice calculate secret key shared with Bob,"}, "args": ["b_pu_k", "a_pr_k", "p"], "returns": ["pow(b_pu_k, a_pr_k) % p"], "min_max_lineno": {"min_lineno": 134, "max_lineno": 139}, "calls": ["pow"], "source_code": "def alice_shared_key(b_pu_k, a_pr_k, p):\n    \"\"\" Alice calculate secret key shared with Bob,\n    with her private key and Bob's public key.\n    This must be kept in secret\"\"\"\n    return pow(b_pu_k, a_pr_k) % p"}, "bob_shared_key": {"doc": {"long_description": "with his private key and Alice's public key.\nThis must be kept in secret", "short_description": "Bob calculate secret key shared with Alice,"}, "args": ["a_pu_k", "b_pr_k", "p"], "returns": ["pow(a_pu_k, b_pr_k) % p"], "min_max_lineno": {"min_lineno": 141, "max_lineno": 146}, "calls": ["pow"], "source_code": "def bob_shared_key(a_pu_k, b_pr_k, p):\n    \"\"\" Bob calculate secret key shared with Alice,\n    with his private key and Alice's public key.\n    This must be kept in secret\"\"\"\n    return pow(a_pu_k, b_pr_k) % p"}, "diffie_hellman_key_exchange": {"doc": {"short_description": "Perform diffie-helmman key exchange. "}, "args": ["a", "p", "option"], "returns": ["a_sh_k == b_sh_k", "False", "False"], "min_max_lineno": {"min_lineno": 148, "max_lineno": 185}, "calls": ["diffie_hellman_key_exchange.alice_private_key", "diffie_hellman_key_exchange.alice_public_key", "diffie_hellman_key_exchange.bob_private_key", "diffie_hellman_key_exchange.bob_public_key", "diffie_hellman_key_exchange.alice_shared_key", "diffie_hellman_key_exchange.bob_shared_key", "print", "diffie_hellman_key_exchange.prime_check", "diffie_hellman_key_exchange.find_primitive_root", "find_primitive_root.index"], "store_vars_calls": {"a_pr_k": "alice_private_key", "a_pu_k": "alice_public_key", "b_pr_k": "bob_private_key", "b_pu_k": "bob_public_key", "a_sh_k": "alice_shared_key", "b_sh_k": "bob_shared_key", "p_root_list": "find_primitive_root"}, "source_code": "def diffie_hellman_key_exchange(a, p, option=None):\n    \"\"\" Perform diffie-helmman key exchange. \"\"\"\n    if option is not None:\n        option = 1\n    if prime_check(p) is False:\n        print(f'{p} is not a prime number')\n        return False\n    try:\n        p_root_list = find_primitive_root(p)\n        p_root_list.index(a)\n    except ValueError:\n        print(f'{a} is not a primitive root of {p}')\n        return False\n    a_pr_k = alice_private_key(p)\n    a_pu_k = alice_public_key(a_pr_k, a, p)\n    b_pr_k = bob_private_key(p)\n    b_pu_k = bob_public_key(b_pr_k, a, p)\n    if option == 1:\n        print(f\"Alice's private key: {a_pr_k}\")\n        print(f\"Alice's public key: {a_pu_k}\")\n        print(f\"Bob's private key: {b_pr_k}\")\n        print(f\"Bob's public key: {b_pu_k}\")\n    a_sh_k = alice_shared_key(b_pu_k, a_pr_k, p)\n    b_sh_k = bob_shared_key(a_pu_k, b_pr_k, p)\n    print(f'Shared key calculated by Alice = {a_sh_k}')\n    print(f'Shared key calculated by Bob = {b_sh_k}')\n    return a_sh_k == b_sh_k"}}, "is_test": false}