{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/factorial.py", "fileNameBase": "factorial", "extension": "py", "doc": {"short_description": "Calculates the factorial with the added functionality of calculating it modulo mod.", "full": "Calculates the factorial with the added functionality of calculating it modulo mod."}}, "functions": {"factorial": {"doc": {"long_description": "If mod is not None, then return (n! % mod)\nTime Complexity - O(n)", "short_description": "Calculates factorial iteratively."}, "args": ["n", "mod"], "returns": ["result", "1"], "min_max_lineno": {"min_lineno": 4, "max_lineno": 20}, "calls": ["range", "ValueError", "isinstance"], "source_code": "def factorial(n, mod=None):\n    \"\"\"Calculates factorial iteratively.\n    If mod is not None, then return (n! % mod)\n    Time Complexity - O(n)\"\"\"\n    if not (isinstance(n, int) and n >= 0):\n        raise ValueError(\"'n' must be a non-negative integer.\")\n    if mod is not None and (not (isinstance(mod, int) and mod > 0)):\n        raise ValueError(\"'mod' must be a positive integer\")\n    result = 1\n    if n == 0:\n        return 1\n    for i in range(2, n + 1):\n        result *= i\n        if mod:\n            result %= mod\n    return result"}, "factorial_recur": {"doc": {"long_description": "If mod is not None, then return (n! % mod)\nTime Complexity - O(n)", "short_description": "Calculates factorial recursively."}, "args": ["n", "mod"], "returns": ["result", "1"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 36}, "calls": ["ValueError", "factorial.factorial", "isinstance"], "source_code": "def factorial_recur(n, mod=None):\n    \"\"\"Calculates factorial recursively.\n    If mod is not None, then return (n! % mod)\n    Time Complexity - O(n)\"\"\"\n    if not (isinstance(n, int) and n >= 0):\n        raise ValueError(\"'n' must be a non-negative integer.\")\n    if mod is not None and (not (isinstance(mod, int) and mod > 0)):\n        raise ValueError(\"'mod' must be a positive integer\")\n    if n == 0:\n        return 1\n    result = n * factorial(n - 1, mod)\n    if mod:\n        result %= mod\n    return result"}}, "is_test": false}