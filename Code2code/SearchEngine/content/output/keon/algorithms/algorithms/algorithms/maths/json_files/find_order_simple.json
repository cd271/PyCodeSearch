{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/find_order_simple.py", "fileNameBase": "find_order_simple", "extension": "py", "doc": {"long_description": "the order of a modulo n is the smallest positive integer k that satisfies\npow (a, k) % n = 1. In other words, (a^k) \u2261 1 (mod n).\nOrder of a certain number may or may not be exist. If not, return -1.\n\nTotal time complexity O(nlog(n)):\nO(n) for iteration loop, \nO(log(n)) for built-in power function", "short_description": "For positive integer n and given integer a that satisfies gcd(a, n) = 1,", "full": "For positive integer n and given integer a that satisfies gcd(a, n) = 1,\nthe order of a modulo n is the smallest positive integer k that satisfies\npow (a, k) % n = 1. In other words, (a^k) \u2261 1 (mod n).\nOrder of a certain number may or may not be exist. If not, return -1.\n\nTotal time complexity O(nlog(n)):\nO(n) for iteration loop, \nO(log(n)) for built-in power function"}}, "dependencies": [{"import": "math", "type": "external", "type_element": "module"}], "functions": {"find_order": {"doc": {"short_description": "Find order for positive integer n and given integer a that satisfies gcd(a, n) = 1."}, "args": ["a", "n"], "returns": ["-1", "1", "-1", "i"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 28}, "calls": ["range", "math.gcd", "print", "pow"], "source_code": "def find_order(a, n):\n    \"\"\"\n    Find order for positive integer n and given integer a that satisfies gcd(a, n) = 1.\n    \"\"\"\n    if (a == 1) & (n == 1):\n        return 1\n    if math.gcd(a, n) != 1:\n        print('a and n should be relative prime!')\n        return -1\n    for i in range(1, n):\n        if pow(a, i) % n == 1:\n            return i\n    return -1"}}, "is_test": false}