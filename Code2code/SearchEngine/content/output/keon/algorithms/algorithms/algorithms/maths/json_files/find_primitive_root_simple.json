{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/find_primitive_root_simple.py", "fileNameBase": "find_primitive_root_simple", "extension": "py", "doc": {"short_description": "Function to find the primitive root of a number.", "full": "Function to find the primitive root of a number."}}, "dependencies": [{"import": "math", "type": "external", "type_element": "module"}], "functions": {"find_order": {"doc": {"long_description": "Time complexity O(nlog(n))", "short_description": "Find order for positive integer n and given integer a that satisfies gcd(a, n) = 1."}, "args": ["a", "n"], "returns": ["-1", "1", "-1", "i"], "min_max_lineno": {"min_lineno": 12, "max_lineno": 27}, "calls": ["range", "math.gcd", "print", "pow"], "source_code": "def find_order(a, n):\n    \"\"\"\n    Find order for positive integer n and given integer a that satisfies gcd(a, n) = 1.\n    Time complexity O(nlog(n))\n    \"\"\"\n    if (a == 1) & (n == 1):\n        return 1\n    if math.gcd(a, n) != 1:\n        print('a and n should be relative prime!')\n        return -1\n    for i in range(1, n):\n        if pow(a, i) % n == 1:\n            return i\n    return -1"}, "euler_totient": {"doc": {"long_description": "Time Complexity: O(sqrt(n)).", "short_description": "Euler's totient function or Phi function."}, "args": ["n"], "returns": ["result"], "min_max_lineno": {"min_lineno": 35, "max_lineno": 47}, "calls": ["range", "int"], "source_code": "def euler_totient(n):\n    \"\"\"Euler's totient function or Phi function.\n    Time Complexity: O(sqrt(n)).\"\"\"\n    result = n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n            result -= result // i\n    if n > 1:\n        result -= result // n\n    return result"}, "find_primitive_root": {"args": ["n"], "returns": ["p_root_list", "[0]"], "min_max_lineno": {"min_lineno": 54, "max_lineno": 68}, "calls": ["find_primitive_root_simple.euler_totient", "range", "math.gcd", "find_primitive_root_simple.find_order", "p_root_list.append"], "store_vars_calls": {"phi": "euler_totient", "order": "find_order"}, "source_code": "def find_primitive_root(n):\n    if n == 1:\n        return [0]\n    phi = euler_totient(n)\n    p_root_list = []\n    ' It will return every primitive roots of n. '\n    for i in range(1, n):\n        if math.gcd(i, n) == 1:\n            order = find_order(i, n)\n            if order == phi:\n                p_root_list.append(i)\n    return p_root_list"}}, "is_test": false}