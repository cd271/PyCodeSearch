{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/gcd.py", "fileNameBase": "gcd", "extension": "py", "doc": {"long_description": "their least common multiple.", "short_description": "Functions for calculating the greatest common divisor of two integers or", "full": "Functions for calculating the greatest common divisor of two integers or\ntheir least common multiple."}}, "functions": {"gcd": {"doc": {"long_description": "Euclid's Algorithm.\ngcd{\ud835\udc4e,\ud835\udc4f}=gcd{\u2212\ud835\udc4e,\ud835\udc4f}=gcd{\ud835\udc4e,\u2212\ud835\udc4f}=gcd{\u2212\ud835\udc4e,\u2212\ud835\udc4f}\nSee proof: https://proofwiki.org/wiki/GCD_for_Negative_Integers", "short_description": "Computes the greatest common divisor of integers a and b using"}, "args": ["a", "b"], "returns": ["a"], "min_max_lineno": {"min_lineno": 6, "max_lineno": 25}, "calls": ["isinstance", "abs", "ValueError"], "store_vars_calls": {"a_int": "isinstance", "b_int": "isinstance", "a": "abs", "b": "abs"}, "source_code": "def gcd(a, b):\n    \"\"\"Computes the greatest common divisor of integers a and b using\n    Euclid's Algorithm.\n    gcd{\ud835\udc4e,\ud835\udc4f}=gcd{\u2212\ud835\udc4e,\ud835\udc4f}=gcd{\ud835\udc4e,\u2212\ud835\udc4f}=gcd{\u2212\ud835\udc4e,\u2212\ud835\udc4f}\n    See proof: https://proofwiki.org/wiki/GCD_for_Negative_Integers\n    \"\"\"\n    a_int = isinstance(a, int)\n    b_int = isinstance(b, int)\n    a = abs(a)\n    b = abs(b)\n    if not (a_int or b_int):\n        raise ValueError('Input arguments are not integers')\n    if a == 0 or b == 0:\n        raise ValueError('One or more input arguments equals zero')\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a"}, "lcm": {"doc": {"short_description": "Computes the lowest common multiple of integers a and b."}, "args": ["a", "b"], "returns": ["abs(a) * abs(b) / gcd(a, b)"], "min_max_lineno": {"min_lineno": 26, "max_lineno": 29}, "calls": ["gcd.gcd", "abs"], "source_code": "def lcm(a, b):\n    \"\"\"Computes the lowest common multiple of integers a and b.\"\"\"\n    return abs(a) * abs(b) / gcd(a, b)"}, "trailing_zero": {"args": ["x"], "returns": ["count"], "min_max_lineno": {"min_lineno": 41, "max_lineno": 47}, "source_code": "def trailing_zero(x):\n    count = 0\n    while x and (not x & 1):\n        count += 1\n        x >>= 1\n    return count"}, "gcd_bit": {"doc": {"short_description": "Similar to gcd but uses bitwise operators and less error handling."}, "args": ["a", "b"], "returns": ["a << min(tza, tzb)"], "min_max_lineno": {"min_lineno": 52, "max_lineno": 64}, "calls": ["gcd.trailing_zero", "min"], "store_vars_calls": {"tza": "trailing_zero", "tzb": "trailing_zero"}, "source_code": "def gcd_bit(a, b):\n    \"\"\" Similar to gcd but uses bitwise operators and less error handling.\"\"\"\n    tza = trailing_zero(a)\n    tzb = trailing_zero(b)\n    a >>= tza\n    b >>= tzb\n    while b:\n        if a < b:\n            (a, b) = (b, a)\n        a -= b\n        a >>= trailing_zero(a)\n    return a << min(tza, tzb)"}}, "is_test": false}