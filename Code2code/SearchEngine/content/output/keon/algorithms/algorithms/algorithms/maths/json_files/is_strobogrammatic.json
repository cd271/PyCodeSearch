{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/is_strobogrammatic.py", "fileNameBase": "is_strobogrammatic", "extension": "py", "doc": {"long_description": "the same when rotated 180 degrees (looked at upside down).\n\nWrite a function to determine if a number is strobogrammatic.\nThe number is represented as a string.\n\nFor example, the numbers \"69\", \"88\", and \"818\" are all strobogrammatic.", "short_description": "A strobogrammatic number is a number that looks", "full": "A strobogrammatic number is a number that looks\nthe same when rotated 180 degrees (looked at upside down).\n\nWrite a function to determine if a number is strobogrammatic.\nThe number is represented as a string.\n\nFor example, the numbers \"69\", \"88\", and \"818\" are all strobogrammatic."}}, "functions": {"is_strobogrammatic": {"args": ["num"], "returns": ["True", "False"], "min_max_lineno": {"min_lineno": 12, "max_lineno": 26}, "calls": ["len", "comb.find"], "source_code": "def is_strobogrammatic(num):\n    \"\"\"\n    :type num: str\n    :rtype: bool\n    \"\"\"\n    comb = '00 11 88 69 96'\n    i = 0\n    j = len(num) - 1\n    while i <= j:\n        if comb.find(num[i] + num[j]) == -1:\n            return False\n        i += 1\n        j -= 1\n    return True"}, "is_strobogrammatic2": {"doc": {"short_description": "Another implementation."}, "args": ["num"], "annotated_arg_types": {"num": "str"}, "returns": ["num == num[::-1].replace('6', '#').replace('9', '6').replace('#', '9')"], "min_max_lineno": {"min_lineno": 28, "max_lineno": 31}, "calls": ["num[].replace().replace().replace", "num[].replace().replace", "num[].replace"], "source_code": "def is_strobogrammatic2(num: str):\n    \"\"\"Another implementation.\"\"\"\n    return num == num[::-1].replace('6', '#').replace('9', '6').replace('#', '9')"}}, "is_test": false}