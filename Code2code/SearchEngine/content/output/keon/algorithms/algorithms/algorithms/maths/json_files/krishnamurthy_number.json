{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/krishnamurthy_number.py", "fileNameBase": "krishnamurthy_number", "extension": "py", "doc": {"long_description": "number itself.\n\nThe following are some examples of Krishnamurthy numbers:\n\n\"145\" is a Krishnamurthy Number because,\n1! + 4! + 5! = 1 + 24 + 120 = 145\n\n\"40585\" is also a Krishnamurthy Number.\n4! + 0! + 5! + 8! + 5! = 40585\n\n\"357\" or \"25965\" is NOT a Krishnamurthy Number\n3! + 5! + 7! = 6 + 120 + 5040 != 357\n\nThe following function will check if a number is a Krishnamurthy Number or not and return a\nboolean value.", "short_description": "A Krishnamurthy number is a number whose sum total of the factorials of each digit is equal to the", "full": "A Krishnamurthy number is a number whose sum total of the factorials of each digit is equal to the\nnumber itself.\n\nThe following are some examples of Krishnamurthy numbers:\n\n\"145\" is a Krishnamurthy Number because,\n1! + 4! + 5! = 1 + 24 + 120 = 145\n\n\"40585\" is also a Krishnamurthy Number.\n4! + 0! + 5! + 8! + 5! = 40585\n\n\"357\" or \"25965\" is NOT a Krishnamurthy Number\n3! + 5! + 7! = 6 + 120 + 5040 != 357\n\nThe following function will check if a number is a Krishnamurthy Number or not and return a\nboolean value."}}, "functions": {"find_factorial": {"doc": {"short_description": "Calculates the factorial of a given number n "}, "args": ["n"], "returns": ["fact"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 28}, "source_code": "def find_factorial(n):\n    \"\"\" Calculates the factorial of a given number n \"\"\"\n    fact = 1\n    while n != 0:\n        fact *= n\n        n -= 1\n    return fact"}, "krishnamurthy_number": {"args": ["n"], "returns": ["sum_of_digits == n", "False"], "min_max_lineno": {"min_lineno": 30, "max_lineno": 47}, "calls": ["krishnamurthy_number.find_factorial"], "source_code": "def krishnamurthy_number(n):\n    if n == 0:\n        return False\n    sum_of_digits = 0\n    temp = n\n    while temp != 0:\n        sum_of_digits += find_factorial(temp % 10)\n        temp //= 10\n    return sum_of_digits == n"}}, "is_test": false}