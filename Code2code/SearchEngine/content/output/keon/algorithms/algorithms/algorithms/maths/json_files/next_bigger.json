{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/next_bigger.py", "fileNameBase": "next_bigger", "extension": "py", "doc": {"long_description": "progress on my interview question.\n\nGiven a number, find the next higher number which has the\nexact same set of digits as the original number.\nFor example: given 38276 return 38627.\n             given 99999 return -1. (no such number exists)\n\nCondensed mathematical description:\n\nFind largest index i such that array[i \u2212 1] < array[i].\n(If no such i exists, then this is already the last permutation.)\n\nFind largest index j such that j \u2265 i and array[j] > array[i \u2212 1].\n\nSwap array[j] and array[i \u2212 1].\n\nReverse the suffix starting at array[i].", "short_description": "I just bombed an interview and made pretty much zero", "full": "I just bombed an interview and made pretty much zero\nprogress on my interview question.\n\nGiven a number, find the next higher number which has the\nexact same set of digits as the original number.\nFor example: given 38276 return 38627.\n             given 99999 return -1. (no such number exists)\n\nCondensed mathematical description:\n\nFind largest index i such that array[i \u2212 1] < array[i].\n(If no such i exists, then this is already the last permutation.)\n\nFind largest index j such that j \u2265 i and array[j] > array[i \u2212 1].\n\nSwap array[j] and array[i \u2212 1].\n\nReverse the suffix starting at array[i]."}}, "dependencies": [{"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 48, "max_lineno": 60}, "methods": {"test_next_bigger": {"args": ["self"], "min_max_lineno": {"min_lineno": 50, "max_lineno": 60}, "calls": ["next_bigger.TestSuite.assertEqual", "next_bigger.next_bigger"], "source_code": "def test_next_bigger(self):\n    self.assertEqual(next_bigger(38276), 38627)\n    self.assertEqual(next_bigger(12345), 12354)\n    self.assertEqual(next_bigger(1528452), 1528524)\n    self.assertEqual(next_bigger(138654), 143568)\n    self.assertEqual(next_bigger(54321), -1)\n    self.assertEqual(next_bigger(999), -1)\n    self.assertEqual(next_bigger(5), -1)"}}}}, "functions": {"next_bigger": {"args": ["num"], "returns": ["int(''.join((str(x) for x in digits)))", "-1"], "min_max_lineno": {"min_lineno": 25, "max_lineno": 46}, "calls": ["int", "len", "str"], "source_code": "def next_bigger(num):\n    digits = [int(i) for i in str(num)]\n    idx = len(digits) - 1\n    while idx >= 1 and digits[idx - 1] >= digits[idx]:\n        idx -= 1\n    if idx == 0:\n        return -1\n    pivot = digits[idx - 1]\n    swap_idx = len(digits) - 1\n    while pivot >= digits[swap_idx]:\n        swap_idx -= 1\n    (digits[swap_idx], digits[idx - 1]) = (digits[idx - 1], digits[swap_idx])\n    digits[idx:] = digits[:idx - 1:-1]\n    return int(''.join((str(x) for x in digits)))"}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "next_bigger.unittest.main", "type": "script"}, "is_test": true}