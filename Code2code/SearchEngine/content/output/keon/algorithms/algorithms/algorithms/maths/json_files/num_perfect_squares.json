{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/num_perfect_squares.py", "fileNameBase": "num_perfect_squares", "extension": "py", "doc": {"long_description": "to sum to the specified number. Lagrange's four-square theorem gives us that the answer will always\nbe between 1 and 4 (https://en.wikipedia.org/wiki/Lagrange%27s_four-square_theorem).\n\nSome examples:\nNumber | Perfect Squares representation | Answer\n-------|--------------------------------|--------\n9      | 3^2                            | 1\n10     | 3^2 + 1^2                      | 2\n12     | 2^2 + 2^2 + 2^2                | 3\n31     | 5^2 + 2^2 + 1^2 + 1^2          | 4", "short_description": "Given an integer num_perfect_squares will return the minimum amount of perfect squares are required", "full": "Given an integer num_perfect_squares will return the minimum amount of perfect squares are required\nto sum to the specified number. Lagrange's four-square theorem gives us that the answer will always\nbe between 1 and 4 (https://en.wikipedia.org/wiki/Lagrange%27s_four-square_theorem).\n\nSome examples:\nNumber | Perfect Squares representation | Answer\n-------|--------------------------------|--------\n9      | 3^2                            | 1\n10     | 3^2 + 1^2                      | 2\n12     | 2^2 + 2^2 + 2^2                | 3\n31     | 5^2 + 2^2 + 1^2 + 1^2          | 4"}}, "dependencies": [{"import": "math", "type": "external", "type_element": "module"}], "functions": {"num_perfect_squares": {"doc": {"short_description": "Returns the smallest number of perfect squares that sum to the specified number.", "returns": {"description": "int between 1 - 4", "is_generator": false}}, "args": ["number"], "returns": ["3", "1", "4", "2"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 48}, "calls": ["range", "int", "math.sqrt"], "source_code": "def num_perfect_squares(number):\n    \"\"\"\n    Returns the smallest number of perfect squares that sum to the specified number.\n    :return: int between 1 - 4\n    \"\"\"\n    if int(math.sqrt(number)) ** 2 == number:\n        return 1\n    while number > 0 and number % 4 == 0:\n        number /= 4\n    if number % 8 == 7:\n        return 4\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if int(math.sqrt(number - i ** 2)) ** 2 == number - i ** 2:\n            return 2\n    return 3"}}, "is_test": false}