{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/power.py", "fileNameBase": "power", "extension": "py", "doc": {"long_description": "Allows also for calculating the exponentiation modulo.", "short_description": "Performs exponentiation, similarly to the built-in pow() or ** functions.", "full": "Performs exponentiation, similarly to the built-in pow() or ** functions.\nAllows also for calculating the exponentiation modulo."}}, "functions": {"power": {"doc": {"long_description": "Calculate a ^ n\nif mod is specified, return the result modulo mod\n\nTime Complexity :  O(log(n))\nSpace Complexity : O(1)", "short_description": "Iterative version of binary exponentiation"}, "args": ["a", "n", "mod"], "annotated_arg_types": {"a": "int", "n": "int", "mod": "int"}, "returns": ["ans"], "min_max_lineno": {"min_lineno": 5, "max_lineno": 25}, "source_code": "def power(a: int, n: int, mod: int=None):\n    \"\"\"\n    Iterative version of binary exponentiation\n\n    Calculate a ^ n\n    if mod is specified, return the result modulo mod\n\n    Time Complexity :  O(log(n))\n    Space Complexity : O(1)\n    \"\"\"\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * a\n        a = a * a\n        if mod:\n            ans %= mod\n            a %= mod\n        n >>= 1\n    return ans"}, "power_recur": {"doc": {"long_description": "Calculate a ^ n\nif mod is specified, return the result modulo mod\n\nTime Complexity :  O(log(n))\nSpace Complexity : O(log(n))", "short_description": "Recursive version of binary exponentiation"}, "args": ["a", "n", "mod"], "annotated_arg_types": {"a": "int", "n": "int", "mod": "int"}, "returns": ["ans"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 49}, "calls": ["power.power_recur"], "store_vars_calls": {"ans": "power_recur"}, "source_code": "def power_recur(a: int, n: int, mod: int=None):\n    \"\"\"\n    Recursive version of binary exponentiation\n\n    Calculate a ^ n\n    if mod is specified, return the result modulo mod\n\n    Time Complexity :  O(log(n))\n    Space Complexity : O(log(n))\n    \"\"\"\n    if n == 0:\n        ans = 1\n    elif n == 1:\n        ans = a\n    else:\n        ans = power_recur(a, n // 2, mod)\n        ans = ans * ans\n        if n % 2:\n            ans = ans * a\n    if mod:\n        ans %= mod\n    return ans"}}, "is_test": false}