{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/primes_sieve_of_eratosthenes.py", "fileNameBase": "primes_sieve_of_eratosthenes", "extension": "py", "doc": {"long_description": "Using sieve of Eratosthenes.\n\nModification:\nWe don't need to check all even numbers, we can make the sieve excluding even\nnumbers and adding 2 to the primes list by default.\n\nWe are going to make an array of: x / 2 - 1 if number is even, else x / 2\n(The -1 with even number it's to exclude the number itself)\nBecause we just need numbers [from 3..x if x is odd]\n\n# We can get value represented at index i with (i*2 + 3)\n\nFor example, for x = 10, we start with an array of x / 2 - 1 = 4\n[1, 1, 1, 1]\n 3  5  7  9\n\nFor x = 11:\n[1, 1, 1, 1, 1]\n 3  5  7  9  11  # 11 is odd, it's included in the list\n\nWith this, we have reduced the array size to a half,\nand complexity it's also a half now.", "short_description": "Return list of all primes less than n,", "full": "Return list of all primes less than n,\nUsing sieve of Eratosthenes.\n\nModification:\nWe don't need to check all even numbers, we can make the sieve excluding even\nnumbers and adding 2 to the primes list by default.\n\nWe are going to make an array of: x / 2 - 1 if number is even, else x / 2\n(The -1 with even number it's to exclude the number itself)\nBecause we just need numbers [from 3..x if x is odd]\n\n# We can get value represented at index i with (i*2 + 3)\n\nFor example, for x = 10, we start with an array of x / 2 - 1 = 4\n[1, 1, 1, 1]\n 3  5  7  9\n\nFor x = 11:\n[1, 1, 1, 1, 1]\n 3  5  7  9  11  # 11 is odd, it's included in the list\n\nWith this, we have reduced the array size to a half,\nand complexity it's also a half now."}}, "functions": {"get_primes": {"doc": {"long_description": "Using sieve of Eratosthenes.", "short_description": "Return list of all primes less than n,"}, "args": ["n"], "returns": ["primes"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 46}, "calls": ["range", "ValueError", "primes.append"], "source_code": "def get_primes(n):\n    \"\"\"Return list of all primes less than n,\n    Using sieve of Eratosthenes.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"'n' must be a positive integer.\")\n    sieve_size = n // 2 - 1 if n % 2 == 0 else n // 2\n    sieve = [True for _ in range(sieve_size)]\n    primes = []\n    if n >= 2:\n        primes.append(2)\n    for i in range(sieve_size):\n        if sieve[i]:\n            value_at_i = i * 2 + 3\n            primes.append(value_at_i)\n            for j in range(i, sieve_size, value_at_i):\n                sieve[j] = False\n    return primes"}}, "is_test": false}