{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/rabin_miller.py", "fileNameBase": "rabin_miller", "extension": "py", "doc": {"long_description": "returning False implies that n is guaranteed composite\nreturning True means that n is probably prime\nwith a 4 ** -k chance of being wrong", "short_description": "Rabin-Miller primality test", "full": "Rabin-Miller primality test\nreturning False implies that n is guaranteed composite\nreturning True means that n is probably prime\nwith a 4 ** -k chance of being wrong"}}, "dependencies": [{"import": "random", "type": "external", "type_element": "module"}], "functions": {"is_prime": {"args": ["n", "k"], "returns": ["True", ["power", "num"], "True", "n == 2 or n == 3", "False", "False", "True", "False"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 52}, "calls": ["rabin_miller.is_prime.pow2_factor"], "store_vars_calls": {"x": "pow"}, "functions": {"pow2_factor": {"doc": {"short_description": "factor n into a power of 2 times an odd number"}, "args": ["num"], "returns": [["power", "num"]], "min_max_lineno": {"min_lineno": 12, "max_lineno": 19}, "source_code": "def pow2_factor(num):\n    \"\"\"factor n into a power of 2 times an odd number\"\"\"\n    power = 0\n    while num % 2 == 0:\n        num /= 2\n        power += 1\n    return (power, num)"}, "valid_witness": {"doc": {"long_description": "a valid witness increases chances of n being prime\nan invalid witness guarantees n is composite", "short_description": "returns true if a is a valid 'witness' for n"}, "args": ["a"], "returns": ["True", "False", "True", "False"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 40}, "calls": ["pow", "range", "int"], "store_vars_calls": {"x": "pow"}, "source_code": "def valid_witness(a):\n    \"\"\"\n        returns true if a is a valid 'witness' for n\n        a valid witness increases chances of n being prime\n        an invalid witness guarantees n is composite\n        \"\"\"\n    x = pow(int(a), int(d), int(n))\n    if x == 1 or x == n - 1:\n        return False\n    for _ in range(r - 1):\n        x = pow(int(x), int(2), int(n))\n        if x == 1:\n            return True\n        if x == n - 1:\n            return False\n    return True"}}, "source_code": "def is_prime(n, k):\n\n    def pow2_factor(num):\n        \"\"\"factor n into a power of 2 times an odd number\"\"\"\n        power = 0\n        while num % 2 == 0:\n            num /= 2\n            power += 1\n        return (power, num)\n\n    def valid_witness(a):\n        \"\"\"\n        returns true if a is a valid 'witness' for n\n        a valid witness increases chances of n being prime\n        an invalid witness guarantees n is composite\n        \"\"\"\n        x = pow(int(a), int(d), int(n))\n        if x == 1 or x == n - 1:\n            return False\n        for _ in range(r - 1):\n            x = pow(int(x), int(2), int(n))\n            if x == 1:\n                return True\n            if x == n - 1:\n                return False\n        return True\n    if n < 5:\n        return n == 2 or n == 3\n    (r, d) = pow2_factor(n - 1)\n    for _ in range(k):\n        if valid_witness(random.randrange(2, n - 2)):\n            return False\n    return True"}}, "is_test": false}