{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/maths/summing_digits.py", "fileNameBase": "summing_digits", "extension": "py", "doc": {"long_description": "The number 89 is the first integer with more than one digit whose digits when raised up to\nconsecutive powers give the same number. For example, 89 = 8**1 + 9**2 gives the number 89.\n\nThe next number after 89 with this property is 135 = 1**1 + 3**2 + 5**3 = 135.\n\nWrite a function that returns a list of numbers with the above property. The function will\nreceive range as parameter.", "short_description": "Recently, I encountered an interview question whose description was as below:", "full": "Recently, I encountered an interview question whose description was as below:\n\nThe number 89 is the first integer with more than one digit whose digits when raised up to\nconsecutive powers give the same number. For example, 89 = 8**1 + 9**2 gives the number 89.\n\nThe next number after 89 with this property is 135 = 1**1 + 3**2 + 5**3 = 135.\n\nWrite a function that returns a list of numbers with the above property. The function will\nreceive range as parameter."}}, "functions": {"sum_dig_pow": {"args": ["low", "high"], "returns": ["result"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 30}, "calls": ["range", "str", "list", "map", "result.append"], "store_vars_calls": {"number_as_string": "str", "tokens": "list"}, "source_code": "def sum_dig_pow(low, high):\n    result = []\n    for number in range(low, high + 1):\n        exponent = 1\n        summation = 0\n        number_as_string = str(number)\n        tokens = list(map(int, number_as_string))\n        for k in tokens:\n            summation = summation + k ** exponent\n            exponent += 1\n        if summation == number:\n            result.append(number)\n    return result"}}, "body": {"calls": ["summing_digits.sum_dig_pow"], "source_code": ["sum_dig_pow(1, 10)", "sum_dig_pow(1, 100)"]}, "is_test": true}