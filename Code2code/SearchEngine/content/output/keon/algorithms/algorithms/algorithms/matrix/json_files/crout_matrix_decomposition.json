{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/matrix/crout_matrix_decomposition.py", "fileNameBase": "crout_matrix_decomposition", "extension": "py", "doc": {"long_description": "give our input matrix, so L * U = A.\nL stands for lower and L has non-zero elements only on diagonal and below.\nU stands for upper and U has non-zero elements only on diagonal and above.\n\nThis can for example be used to solve systems of linear equations.\nThe last if is used  if  to avoid dividing by zero.\n\nExample:\nWe input the A matrix:\n[[1,2,3],\n[3,4,5],\n[6,7,8]]\n\nWe get:\nL = [1.0,  0.0, 0.0]\n    [3.0, -2.0, 0.0]\n    [6.0, -5.0, 0.0]\nU = [1.0,  2.0, 3.0]\n    [0.0,  1.0, 2.0]\n    [0.0,  0.0, 1.0]\n\nWe can check that L * U = A.\n\nI think the complexity should be O(n^3).", "short_description": "Crout matrix decomposition is used to find two matrices that, when multiplied", "full": "Crout matrix decomposition is used to find two matrices that, when multiplied\ngive our input matrix, so L * U = A.\nL stands for lower and L has non-zero elements only on diagonal and below.\nU stands for upper and U has non-zero elements only on diagonal and above.\n\nThis can for example be used to solve systems of linear equations.\nThe last if is used  if  to avoid dividing by zero.\n\nExample:\nWe input the A matrix:\n[[1,2,3],\n[3,4,5],\n[6,7,8]]\n\nWe get:\nL = [1.0,  0.0, 0.0]\n    [3.0, -2.0, 0.0]\n    [6.0, -5.0, 0.0]\nU = [1.0,  2.0, 3.0]\n    [0.0,  1.0, 2.0]\n    [0.0,  0.0, 1.0]\n\nWe can check that L * U = A.\n\nI think the complexity should be O(n^3)."}}, "functions": {"crout_matrix_decomposition": {"args": ["A"], "returns": [["L", "U"]], "min_max_lineno": {"min_lineno": 30, "max_lineno": 49}, "calls": ["len", "range", "float", "int"], "store_vars_calls": {"n": "len", "alpha": "float", "tempU": "float"}, "source_code": "def crout_matrix_decomposition(A):\n    n = len(A)\n    L = [[0.0] * n for i in range(n)]\n    U = [[0.0] * n for i in range(n)]\n    for j in range(n):\n        U[j][j] = 1.0\n        for i in range(j, n):\n            alpha = float(A[i][j])\n            for k in range(j):\n                alpha -= L[i][k] * U[k][j]\n            L[i][j] = float(alpha)\n        for i in range(j + 1, n):\n            tempU = float(A[j][i])\n            for k in range(j):\n                tempU -= float(L[j][k] * U[k][i])\n            if int(L[j][j]) == 0:\n                L[j][j] = float(0.1 ** 40)\n            U[j][i] = float(tempU / L[j][j])\n    return (L, U)"}}, "is_test": false}