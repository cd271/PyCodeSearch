{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/matrix/matrix_exponentiation.py", "fileNameBase": "matrix_exponentiation", "extension": "py"}, "functions": {"multiply": {"doc": {"long_description": "Time Complexity: O(n^3)", "short_description": "Multiplies two square matrices matA and matB of size n x n"}, "args": ["matA", "matB"], "annotated_arg_types": {"matA": "list", "matB": "list"}, "annotated_return_type": "list", "returns": ["matC"], "min_max_lineno": {"min_lineno": 1, "max_lineno": 15}, "calls": ["len", "range"], "store_vars_calls": {"n": "len"}, "source_code": "def multiply(matA: list, matB: list) -> list:\n    \"\"\"\n    Multiplies two square matrices matA and matB of size n x n\n    Time Complexity: O(n^3)\n    \"\"\"\n    n = len(matA)\n    matC = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                matC[i][j] += matA[i][k] * matB[k][j]\n    return matC"}, "identity": {"doc": {"long_description": "Time Complexity: O(n^2)", "short_description": "Returns the Identity matrix of size n x n"}, "args": ["n"], "annotated_arg_types": {"n": "int"}, "annotated_return_type": "list", "returns": ["I"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 28}, "calls": ["range"], "source_code": "def identity(n: int) -> list:\n    \"\"\"\n    Returns the Identity matrix of size n x n\n    Time Complexity: O(n^2)\n    \"\"\"\n    I = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        I[i][i] = 1\n    return I"}, "matrix_exponentiation": {"doc": {"long_description": "Time Complexity: O(d^3 log(n))\n                 d: dimension of the square matrix mat\n                 n: power the matrix is raised to", "short_description": "Calculates mat^n by repeated squaring"}, "args": ["mat", "n"], "annotated_arg_types": {"mat": "list", "n": "int"}, "annotated_return_type": "list", "returns": ["identity(len(mat))", "multiply(matrix_exponentiation(mat, n - 1), mat)", "multiply(tmp, tmp)"], "min_max_lineno": {"min_lineno": 30, "max_lineno": 44}, "calls": ["matrix_exponentiation.identity", "len", "matrix_exponentiation.multiply", "matrix_exponentiation.matrix_exponentiation"], "store_vars_calls": {"tmp": "matrix_exponentiation"}, "source_code": "def matrix_exponentiation(mat: list, n: int) -> list:\n    \"\"\"\n    Calculates mat^n by repeated squaring\n    Time Complexity: O(d^3 log(n))\n                     d: dimension of the square matrix mat\n                     n: power the matrix is raised to\n    \"\"\"\n    if n == 0:\n        return identity(len(mat))\n    elif n % 2 == 1:\n        return multiply(matrix_exponentiation(mat, n - 1), mat)\n    else:\n        tmp = matrix_exponentiation(mat, n // 2)\n        return multiply(tmp, tmp)"}}, "is_test": false}