{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/matrix/sudoku_validator.py", "fileNameBase": "sudoku_validator", "extension": "py", "doc": {"long_description": "that accepts a 2D array representing a Sudoku board, and returns true\nif it is a valid solution, or false otherwise. The cells of the sudoku\nboard may also contain 0's, which will represent empty cells.\nBoards containing one or more zeroes are considered to be invalid solutions.\nThe board is always 9 cells by 9 cells, and every cell only contains integers\nfrom 0 to 9.\n\n(More info at: http://en.wikipedia.org/wiki/Sudoku)", "short_description": "Write a function validSolution/ValidateSolution/valid_solution()", "full": "Write a function validSolution/ValidateSolution/valid_solution()\nthat accepts a 2D array representing a Sudoku board, and returns true\nif it is a valid solution, or false otherwise. The cells of the sudoku\nboard may also contain 0's, which will represent empty cells.\nBoards containing one or more zeroes are considered to be invalid solutions.\nThe board is always 9 cells by 9 cells, and every cell only contains integers\nfrom 0 to 9.\n\n(More info at: http://en.wikipedia.org/wiki/Sudoku)"}}, "dependencies": [{"from_module": "collections", "import": "defaultdict", "type": "external", "type_element": "module"}], "functions": {"valid_solution_hashtable": {"args": ["board"], "returns": ["True", "False", "False", "False", "False"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 45}, "calls": ["range", "len", "collections.defaultdict"], "store_vars_calls": {"dict_row": "defaultdict", "dict_col": "defaultdict"}, "source_code": "def valid_solution_hashtable(board):\n    for i in range(len(board)):\n        dict_row = defaultdict(int)\n        dict_col = defaultdict(int)\n        for j in range(len(board[0])):\n            value_row = board[i][j]\n            value_col = board[j][i]\n            if not value_row or value_col == 0:\n                return False\n            if value_row in dict_row:\n                return False\n            else:\n                dict_row[value_row] += 1\n            if value_col in dict_col:\n                return False\n            else:\n                dict_col[value_col] += 1\n    for i in range(3):\n        for j in range(3):\n            grid_add = 0\n            for k in range(3):\n                for l in range(3):\n                    grid_add += board[i * 3 + k][j * 3 + l]\n            if grid_add != 45:\n                return False\n    return True"}, "valid_solution": {"args": ["board"], "returns": ["True", "False", "False", "False"], "min_max_lineno": {"min_lineno": 48, "max_lineno": 72}, "calls": ["zip", "range", "sorted"], "source_code": "def valid_solution(board):\n    correct = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for row in board:\n        if sorted(row) != correct:\n            return False\n    for column in zip(*board):\n        if sorted(column) != correct:\n            return False\n    for i in range(3):\n        for j in range(3):\n            region = []\n            for line in board[i * 3:(i + 1) * 3]:\n                region += line[j * 3:(j + 1) * 3]\n            if sorted(region) != correct:\n                return False\n    return True"}, "valid_solution_set": {"args": ["board"], "returns": ["True", "False", "False", "False"], "min_max_lineno": {"min_lineno": 75, "max_lineno": 92}, "calls": ["set", "range", "sum"], "store_vars_calls": {"valid": "set"}, "source_code": "def valid_solution_set(board):\n    valid = set(range(1, 10))\n    for row in board:\n        if set(row) != valid:\n            return False\n    for col in [[row[i] for row in board] for i in range(9)]:\n        if set(col) != valid:\n            return False\n    for x in range(3):\n        for y in range(3):\n            if set(sum([row[x * 3:(x + 1) * 3] for row in board[y * 3:(y + 1) * 3]], [])) != valid:\n                return False\n    return True"}}, "is_test": false}