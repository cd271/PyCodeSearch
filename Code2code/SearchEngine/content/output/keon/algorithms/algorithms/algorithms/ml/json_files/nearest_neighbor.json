{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/ml/nearest_neighbor.py", "fileNameBase": "nearest_neighbor", "extension": "py"}, "dependencies": [{"import": "math", "type": "external", "type_element": "module"}], "functions": {"distance": {"args": ["x", "y"], "returns": ["math.sqrt(sum)"], "min_max_lineno": {"min_lineno": 3, "max_lineno": 20}, "calls": ["range", "math.sqrt", "len"], "source_code": "def distance(x, y):\n    \"\"\"[summary]\n    HELPER-FUNCTION\n    calculates the (eulidean) distance between vector x and y.\n\n    Arguments:\n        x {[tuple]} -- [vector]\n        y {[tuple]} -- [vector]\n    \"\"\"\n    assert len(x) == len(y), 'The vector must have same length'\n    result = ()\n    sum = 0\n    for i in range(len(x)):\n        result += (x[i] - y[i],)\n    for component in result:\n        sum += component ** 2\n    return math.sqrt(sum)"}, "nearest_neighbor": {"args": ["x", "tSet"], "returns": ["tSet[current_key]"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 42}, "calls": ["float", "isinstance", "nearest_neighbor.distance"], "store_vars_calls": {"min_d": "float", "d": "distance"}, "source_code": "def nearest_neighbor(x, tSet):\n    \"\"\"[summary]\n    Implements the nearest neighbor algorithm\n\n    Arguments:\n        x {[tupel]} -- [vector]\n        tSet {[dict]} -- [training set]\n\n    Returns:\n        [type] -- [result of the AND-function]\n    \"\"\"\n    assert isinstance(x, tuple) and isinstance(tSet, dict)\n    current_key = ()\n    min_d = float('inf')\n    for key in tSet:\n        d = distance(x, key)\n        if d < min_d:\n            min_d = d\n            current_key = key\n    return tSet[current_key]"}}, "is_test": true}