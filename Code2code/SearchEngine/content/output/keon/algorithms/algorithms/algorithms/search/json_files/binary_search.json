{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/search/binary_search.py", "fileNameBase": "binary_search", "extension": "py", "doc": {"long_description": "Find an element in a sorted array (in ascending order).", "short_description": "Binary Search", "full": "Binary Search\n\nFind an element in a sorted array (in ascending order)."}}, "functions": {"binary_search": {"doc": {"long_description": "reference: https://en.wikipedia.org/wiki/Binary_search_algorithm", "short_description": "Worst-case Complexity: O(log(n))"}, "args": ["array", "query"], "returns": ["None", "mid"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 36}, "calls": ["len"], "source_code": "def binary_search(array, query):\n    \"\"\"\n    Worst-case Complexity: O(log(n))\n\n    reference: https://en.wikipedia.org/wiki/Binary_search_algorithm\n    \"\"\"\n    (low, high) = (0, len(array) - 1)\n    while low <= high:\n        mid = (high + low) // 2\n        val = array[mid]\n        if val == query:\n            return mid\n        if val < query:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None"}, "binary_search_recur": {"doc": {"long_description": "reference: https://en.wikipedia.org/wiki/Binary_search_algorithm", "short_description": "Worst-case Complexity: O(log(n))"}, "args": ["array", "low", "high", "val"], "returns": ["mid", "-1", "binary_search_recur(array, low, mid - 1, val)", "binary_search_recur(array, mid + 1, high, val)"], "min_max_lineno": {"min_lineno": 38, "max_lineno": 53}, "calls": ["binary_search.binary_search_recur"], "source_code": "def binary_search_recur(array, low, high, val):\n    \"\"\"\n    Worst-case Complexity: O(log(n))\n\n    reference: https://en.wikipedia.org/wiki/Binary_search_algorithm\n    \"\"\"\n    if low > high:\n        return -1\n    mid = low + (high - low) // 2\n    if val < array[mid]:\n        return binary_search_recur(array, low, mid - 1, val)\n    if val > array[mid]:\n        return binary_search_recur(array, mid + 1, high, val)\n    return mid"}}, "is_test": false}