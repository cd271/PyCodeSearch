{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/search/find_min_rotate.py", "fileNameBase": "find_min_rotate", "extension": "py", "doc": {"long_description": "to you beforehand. (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).\n\nFind the minimum element. The complexity must be O(logN)\n\nYou may assume no duplicate exists in the array.", "short_description": "Suppose an array sorted in ascending order is rotated at some pivot unknown", "full": "Suppose an array sorted in ascending order is rotated at some pivot unknown\nto you beforehand. (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).\n\nFind the minimum element. The complexity must be O(logN)\n\nYou may assume no duplicate exists in the array."}}, "functions": {"find_min_rotate": {"doc": {"short_description": "Finds the minimum element in a sorted array that has been rotated."}, "args": ["array"], "returns": ["array[low]"], "min_max_lineno": {"min_lineno": 9, "max_lineno": 23}, "calls": ["len"], "source_code": "def find_min_rotate(array):\n    \"\"\"\n    Finds the minimum element in a sorted array that has been rotated.\n    \"\"\"\n    low = 0\n    high = len(array) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if array[mid] > array[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return array[low]"}, "find_min_rotate_recur": {"doc": {"short_description": "Finds the minimum element in a sorted array that has been rotated."}, "args": ["array", "low", "high"], "returns": ["find_min_rotate_recur(array, low, mid)", "array[low]", "find_min_rotate_recur(array, mid + 1, high)"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 34}, "calls": ["find_min_rotate.find_min_rotate_recur"], "source_code": "def find_min_rotate_recur(array, low, high):\n    \"\"\"\n    Finds the minimum element in a sorted array that has been rotated.\n    \"\"\"\n    mid = (low + high) // 2\n    if mid == low:\n        return array[low]\n    if array[mid] > array[high]:\n        return find_min_rotate_recur(array, mid + 1, high)\n    return find_min_rotate_recur(array, low, mid)"}}, "is_test": false}