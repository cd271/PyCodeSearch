{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/search/jump_search.py", "fileNameBase": "jump_search", "extension": "py", "doc": {"long_description": "Find an element in a sorted array.", "short_description": "Jump Search", "full": "Jump Search\n\nFind an element in a sorted array."}}, "dependencies": [{"import": "math", "type": "external", "type_element": "module"}], "functions": {"jump_search": {"doc": {"long_description": "All items in list must be sorted like binary search\n\nFind block that contains target value and search it linearly in that block\nIt returns a first target value in array\n\nreference: https://en.wikipedia.org/wiki/Jump_search", "short_description": "Worst-case Complexity: O(\u221an) (root(n))"}, "args": ["arr", "target"], "returns": ["-1", "-1", "block_prev", "-1"], "min_max_lineno": {"min_lineno": 9, "max_lineno": 46}, "calls": ["len", "int", "math.sqrt", "min"], "store_vars_calls": {"length": "len", "block_size": "int"}, "source_code": "def jump_search(arr, target):\n    \"\"\"\n    Worst-case Complexity: O(\u221an) (root(n))\n    All items in list must be sorted like binary search\n\n    Find block that contains target value and search it linearly in that block\n    It returns a first target value in array\n\n    reference: https://en.wikipedia.org/wiki/Jump_search\n    \"\"\"\n    length = len(arr)\n    block_size = int(math.sqrt(length))\n    block_prev = 0\n    block = block_size\n    if arr[length - 1] < target:\n        return -1\n    while block <= length and arr[block - 1] < target:\n        block_prev = block\n        block += block_size\n    while arr[block_prev] < target:\n        block_prev += 1\n        if block_prev == min(block, length):\n            return -1\n    if arr[block_prev] == target:\n        return block_prev\n    return -1"}}, "is_test": false}