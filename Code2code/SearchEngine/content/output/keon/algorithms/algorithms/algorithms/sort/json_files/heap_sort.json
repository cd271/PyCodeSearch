{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/sort/heap_sort.py", "fileNameBase": "heap_sort", "extension": "py"}, "functions": {"max_heap_sort": {"doc": {"long_description": "Complexity: O(n log(n))", "short_description": "Heap Sort that uses a max heap to sort an array in ascending order"}, "args": ["arr", "simulation"], "returns": ["arr"], "min_max_lineno": {"min_lineno": 1, "max_lineno": 16}, "calls": ["range", "print", "heap_sort.max_heapify", "len"], "store_vars_calls": {"iteration": "max_heapify"}, "source_code": "def max_heap_sort(arr, simulation=False):\n    \"\"\" Heap Sort that uses a max heap to sort an array in ascending order\n        Complexity: O(n log(n))\n    \"\"\"\n    iteration = 0\n    if simulation:\n        print('iteration', iteration, ':', *arr)\n    for i in range(len(arr) - 1, 0, -1):\n        iteration = max_heapify(arr, i, simulation, iteration)\n    if simulation:\n        iteration = iteration + 1\n        print('iteration', iteration, ':', *arr)\n    return arr"}, "max_heapify": {"doc": {"short_description": "Max heapify helper for max_heap_sort"}, "args": ["arr", "end", "simulation", "iteration"], "returns": ["iteration"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 46}, "calls": ["range", "print"], "source_code": "def max_heapify(arr, end, simulation, iteration):\n    \"\"\" Max heapify helper for max_heap_sort\n    \"\"\"\n    last_parent = (end - 1) // 2\n    for parent in range(last_parent, -1, -1):\n        current_parent = parent\n        while current_parent <= last_parent:\n            child = 2 * current_parent + 1\n            if child + 1 <= end and arr[child] < arr[child + 1]:\n                child = child + 1\n            if arr[child] > arr[current_parent]:\n                (arr[current_parent], arr[child]) = (arr[child], arr[current_parent])\n                current_parent = child\n                if simulation:\n                    iteration = iteration + 1\n                    print('iteration', iteration, ':', *arr)\n            else:\n                break\n    (arr[0], arr[end]) = (arr[end], arr[0])\n    return iteration"}, "min_heap_sort": {"doc": {"long_description": "Complexity: O(n log(n))", "short_description": "Heap Sort that uses a min heap to sort an array in ascending order"}, "args": ["arr", "simulation"], "returns": ["arr"], "min_max_lineno": {"min_lineno": 47, "max_lineno": 59}, "calls": ["range", "print", "heap_sort.min_heapify", "len"], "store_vars_calls": {"iteration": "min_heapify"}, "source_code": "def min_heap_sort(arr, simulation=False):\n    \"\"\" Heap Sort that uses a min heap to sort an array in ascending order\n        Complexity: O(n log(n))\n    \"\"\"\n    iteration = 0\n    if simulation:\n        print('iteration', iteration, ':', *arr)\n    for i in range(0, len(arr) - 1):\n        iteration = min_heapify(arr, i, simulation, iteration)\n    return arr"}, "min_heapify": {"doc": {"short_description": "Min heapify helper for min_heap_sort"}, "args": ["arr", "start", "simulation", "iteration"], "returns": ["iteration"], "min_max_lineno": {"min_lineno": 61, "max_lineno": 93}, "calls": ["range", "len", "print"], "source_code": "def min_heapify(arr, start, simulation, iteration):\n    \"\"\" Min heapify helper for min_heap_sort\n    \"\"\"\n    end = len(arr) - 1\n    last_parent = (end - start - 1) // 2\n    for parent in range(last_parent, -1, -1):\n        current_parent = parent\n        while current_parent <= last_parent:\n            child = 2 * current_parent + 1\n            if child + 1 <= end - start and arr[child + start] > arr[child + 1 + start]:\n                child = child + 1\n            if arr[child + start] < arr[current_parent + start]:\n                (arr[current_parent + start], arr[child + start]) = (arr[child + start], arr[current_parent + start])\n                current_parent = child\n                if simulation:\n                    iteration = iteration + 1\n                    print('iteration', iteration, ':', *arr)\n            else:\n                break\n    return iteration"}}, "is_test": false}