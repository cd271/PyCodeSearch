{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/stack/ordered_stack.py", "fileNameBase": "ordered_stack", "extension": "py"}, "classes": {"OrderedStack": {"min_max_lineno": {"min_lineno": 5, "max_lineno": 37}, "methods": {"__init__": {"args": ["self"], "min_max_lineno": {"min_lineno": 6, "max_lineno": 8}, "source_code": "def __init__(self):\n    self.items = []"}, "is_empty": {"args": ["self"], "returns": ["self.items == []"], "min_max_lineno": {"min_lineno": 9, "max_lineno": 11}, "source_code": "def is_empty(self):\n    return self.items == []"}, "push_t": {"args": ["self", "item"], "min_max_lineno": {"min_lineno": 12, "max_lineno": 14}, "calls": ["ordered_stack.OrderedStack.items.append"], "source_code": "def push_t(self, item):\n    self.items.append(item)"}, "push": {"args": ["self", "item"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 26}, "calls": ["ordered_stack.OrderedStack.is_empty", "ordered_stack.OrderedStack.push_t", "ordered_stack.OrderedStack.peek", "ordered_stack.OrderedStack.push_t", "ordered_stack.OrderedStack.is_empty", "ordered_stack.OrderedStack.pop", "ordered_stack.OrderedStack.pop"], "store_vars_calls": {"temp_stack": "OrderedStack"}, "source_code": "def push(self, item):\n    temp_stack = OrderedStack()\n    if self.is_empty() or item > self.peek():\n        self.push_t(item)\n    else:\n        while item < self.peek() and (not self.is_empty()):\n            temp_stack.push_t(self.pop())\n        self.push_t(item)\n        while not temp_stack.is_empty():\n            self.push_t(temp_stack.pop())"}, "pop": {"args": ["self"], "returns": ["self.items.pop()"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 31}, "calls": ["ordered_stack.OrderedStack.is_empty", "ordered_stack.OrderedStack.items.pop", "IndexError"], "source_code": "def pop(self):\n    if self.is_empty():\n        raise IndexError('Stack is empty')\n    return self.items.pop()"}, "peek": {"args": ["self"], "returns": ["self.items[len(self.items) - 1]"], "min_max_lineno": {"min_lineno": 32, "max_lineno": 34}, "calls": ["len"], "source_code": "def peek(self):\n    return self.items[len(self.items) - 1]"}, "size": {"args": ["self"], "returns": ["len(self.items)"], "min_max_lineno": {"min_lineno": 35, "max_lineno": 37}, "calls": ["len"], "source_code": "def size(self):\n    return len(self.items)"}}}}, "is_test": false}