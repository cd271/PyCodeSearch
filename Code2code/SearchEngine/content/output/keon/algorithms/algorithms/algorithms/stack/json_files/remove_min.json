{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/stack/remove_min.py", "fileNameBase": "remove_min", "extension": "py", "doc": {"long_description": "and removes the smallest value from the stack.\n\nFor example:\nbottom [2, 8, 3, -6, 7, 3] top\nAfter remove_min(stack):\nbottom [2, 8, 3, 7, 3] top", "short_description": "Given a stack, a function remove_min accepts a stack as a parameter", "full": "Given a stack, a function remove_min accepts a stack as a parameter\nand removes the smallest value from the stack.\n\nFor example:\nbottom [2, 8, 3, -6, 7, 3] top\nAfter remove_min(stack):\nbottom [2, 8, 3, 7, 3] top"}}, "functions": {"remove_min": {"args": ["stack"], "returns": ["stack", "stack"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 31}, "calls": ["stack.pop", "stack.append", "range", "len", "storage_stack.append", "storage_stack.pop"], "store_vars_calls": {"min": "stack.pop", "val": "storage_stack.pop"}, "source_code": "def remove_min(stack):\n    storage_stack = []\n    if len(stack) == 0:\n        return stack\n    min = stack.pop()\n    stack.append(min)\n    for i in range(len(stack)):\n        val = stack.pop()\n        if val <= min:\n            min = val\n        storage_stack.append(val)\n    for i in range(len(storage_stack)):\n        val = storage_stack.pop()\n        if val != min:\n            stack.append(val)\n    return stack"}}, "is_test": false}