{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/stack/simplify_path.py", "fileNameBase": "simplify_path", "extension": "py", "doc": {"long_description": "For example,\npath = \"/home/\", => \"/home\"\npath = \"/a/./b/../../c/\", => \"/c\"\n\n* Did you consider the case where path = \"/../\"?\n    In this case, you should return \"/\".\n* Another corner case is the path might contain multiple slashes '/' together,\n    such as \"/home//foo/\". In this case, you should ignore redundant\n    slashes and return \"/home/foo\".", "short_description": "Given an absolute path for a file (Unix-style), simplify it.", "full": "Given an absolute path for a file (Unix-style), simplify it.\n\nFor example,\npath = \"/home/\", => \"/home\"\npath = \"/a/./b/../../c/\", => \"/c\"\n\n* Did you consider the case where path = \"/../\"?\n    In this case, you should return \"/\".\n* Another corner case is the path might contain multiple slashes '/' together,\n    such as \"/home//foo/\". In this case, you should ignore redundant\n    slashes and return \"/home/foo\"."}}, "functions": {"simplify_path": {"args": ["path"], "returns": ["'/' + '/'.join(stack)"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 29}, "calls": ["path.split", "stack.pop", "stack.append"], "store_vars_calls": {"paths": "path.split"}, "source_code": "def simplify_path(path):\n    \"\"\"\n    :type path: str\n    :rtype: str\n    \"\"\"\n    skip = {'..', '.', ''}\n    stack = []\n    paths = path.split('/')\n    for tok in paths:\n        if tok == '..':\n            if stack:\n                stack.pop()\n        elif tok not in skip:\n            stack.append(tok)\n    return '/' + '/'.join(stack)"}}, "is_test": false}