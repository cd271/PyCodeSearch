{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/stack/stutter.py", "fileNameBase": "stutter", "extension": "py", "doc": {"long_description": "in the stack with two occurrences of that value.\n\nFor example, suppose the stack stores these values:\nbottom [3, 7, 1, 14, 9] top\nThen the stack should store these values after the method terminates:\nbottom [3, 3, 7, 7, 1, 1, 14, 14, 9, 9] top\n\nNote: There are 2 solutions:\nfirst_stutter: it uses a single stack as auxiliary storage\nsecond_stutter: it uses a single queue as auxiliary storage", "short_description": "Given a stack, stutter takes a stack as a parameter and  replaces every value", "full": "Given a stack, stutter takes a stack as a parameter and  replaces every value\nin the stack with two occurrences of that value.\n\nFor example, suppose the stack stores these values:\nbottom [3, 7, 1, 14, 9] top\nThen the stack should store these values after the method terminates:\nbottom [3, 3, 7, 7, 1, 1, 14, 14, 9, 9] top\n\nNote: There are 2 solutions:\nfirst_stutter: it uses a single stack as auxiliary storage\nsecond_stutter: it uses a single queue as auxiliary storage"}}, "dependencies": [{"import": "collections", "type": "external", "type_element": "module"}], "functions": {"first_stutter": {"args": ["stack"], "returns": ["stack"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 27}, "calls": ["range", "len", "storage_stack.append", "storage_stack.pop", "stack.append", "stack.pop"], "store_vars_calls": {"val": "storage_stack.pop"}, "source_code": "def first_stutter(stack):\n    storage_stack = []\n    for i in range(len(stack)):\n        storage_stack.append(stack.pop())\n    for i in range(len(storage_stack)):\n        val = storage_stack.pop()\n        stack.append(val)\n        stack.append(val)\n    return stack"}, "second_stutter": {"args": ["stack"], "returns": ["stack"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 47}, "calls": ["collections.deque", "range", "len", "collections.deque.append", "stack.append", "collections.deque.pop", "stack.pop"], "store_vars_calls": {"q": "collections.deque", "val": "q.pop"}, "source_code": "def second_stutter(stack):\n    q = collections.deque()\n    for i in range(len(stack)):\n        q.append(stack.pop())\n    for i in range(len(q)):\n        stack.append(q.pop())\n    for i in range(len(stack)):\n        q.append(stack.pop())\n    for i in range(len(q)):\n        val = q.pop()\n        stack.append(val)\n        stack.append(val)\n    return stack"}}, "is_test": false}