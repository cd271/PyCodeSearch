{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/stack/valid_parenthesis.py", "fileNameBase": "valid_parenthesis", "extension": "py", "doc": {"long_description": "'(', ')', '{', '}', '[' and ']',\ndetermine if the input string is valid.\n\nThe brackets must close in the correct order,\n\"()\" and \"()[]{}\" are all valid but \"(]\" and \"([)]\" are not.", "short_description": "Given a string containing just the characters", "full": "Given a string containing just the characters\n'(', ')', '{', '}', '[' and ']',\ndetermine if the input string is valid.\n\nThe brackets must close in the correct order,\n\"()\" and \"()[]{}\" are all valid but \"(]\" and \"([)]\" are not."}}, "functions": {"is_valid": {"args": ["s"], "annotated_arg_types": {"s": "str"}, "annotated_return_type": "bool", "returns": ["not stack", "False"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 23}, "calls": ["dic.values", "stack.append", "stack.pop"], "source_code": "def is_valid(s: str) -> bool:\n    stack = []\n    dic = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in dic.values():\n            stack.append(char)\n        elif char in dic:\n            if not stack or dic[char] != stack.pop():\n                return False\n    return not stack"}}, "is_test": false}