{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/streaming/misra_gries.py", "fileNameBase": "misra_gries", "extension": "py", "doc": {"long_description": "Given a list of items and a value k, it returns the every item in the list\nthat appears at least n/k times, where n is the length of the array\n\nBy default, k is set to 2, solving the majority problem.\n\nFor the majority problem, this algorithm only guarantees that if there is\nan element that appears more than n/2 times, it will be outputed. If there\nis no such element, any arbitrary element is returned by the algorithm.\nTherefore, we need to iterate through again at the end. But since we have filtred\nout the suspects, the memory complexity is significantly lower than\nit would be to create counter for every element in the list.\n\nFor example:\nInput misras_gries([1,4,4,4,5,4,4])\nOutput {'4':5}\nInput misras_gries([0,0,0,1,1,1,1])\nOutput {'1':4}\nInput misras_gries([0,0,0,0,1,1,1,2,2],3)\nOutput {'0':4,'1':3}\nInput misras_gries([0,0,0,1,1,1]\nOutput None", "short_description": "Implementation of the Misra-Gries algorithm.", "full": "Implementation of the Misra-Gries algorithm.\nGiven a list of items and a value k, it returns the every item in the list\nthat appears at least n/k times, where n is the length of the array\n\nBy default, k is set to 2, solving the majority problem.\n\nFor the majority problem, this algorithm only guarantees that if there is\nan element that appears more than n/2 times, it will be outputed. If there\nis no such element, any arbitrary element is returned by the algorithm.\nTherefore, we need to iterate through again at the end. But since we have filtred\nout the suspects, the memory complexity is significantly lower than\nit would be to create counter for every element in the list.\n\nFor example:\nInput misras_gries([1,4,4,4,5,4,4])\nOutput {'4':5}\nInput misras_gries([0,0,0,1,1,1,1])\nOutput {'1':4}\nInput misras_gries([0,0,0,0,1,1,1,2,2],3)\nOutput {'0':4,'1':3}\nInput misras_gries([0,0,0,1,1,1]\nOutput None"}}, "functions": {"misras_gries": {"doc": {"long_description": "Keyword arguments:\narray -- list of integers\nk -- value of k (default 2)", "short_description": "Misra-Gries algorithm"}, "args": ["array", "k"], "returns": ["frequencies if len(frequencies) > 0 else None"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 57}, "calls": ["keys.keys", "str", "misra_gries._count_frequency", "int", "len", "list"], "store_vars_calls": {"suspects": "keys.keys", "val": "str", "freq": "_count_frequency"}, "source_code": "def misras_gries(array, k=2):\n    \"\"\"Misra-Gries algorithm\n\n    Keyword arguments:\n    array -- list of integers\n    k -- value of k (default 2)\n    \"\"\"\n    keys = {}\n    for i in array:\n        val = str(i)\n        if val in keys:\n            keys[val] = keys[val] + 1\n        elif len(keys) < k - 1:\n            keys[val] = 1\n        else:\n            for key in list(keys):\n                keys[key] = keys[key] - 1\n                if keys[key] == 0:\n                    del keys[key]\n    suspects = keys.keys()\n    frequencies = {}\n    for suspect in suspects:\n        freq = _count_frequency(array, int(suspect))\n        if freq >= len(array) / k:\n            frequencies[suspect] = freq\n    return frequencies if len(frequencies) > 0 else None"}, "_count_frequency": {"args": ["array", "element"], "returns": ["array.count(element)"], "min_max_lineno": {"min_lineno": 59, "max_lineno": 61}, "calls": ["array.count"], "source_code": "def _count_frequency(array, element):\n    return array.count(element)"}}, "is_test": false}