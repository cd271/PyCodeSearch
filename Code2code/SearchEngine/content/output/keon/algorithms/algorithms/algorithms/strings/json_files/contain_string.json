{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/strings/contain_string.py", "fileNameBase": "contain_string", "extension": "py", "doc": {"long_description": "Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n\nExample 1:\nInput: haystack = \"hello\", needle = \"ll\"\nOutput: 2\n\nExample 2:\nInput: haystack = \"aaaaa\", needle = \"bba\"\nOutput: -1\nReference: https://leetcode.com/problems/implement-strstr/description/", "short_description": "Implement strStr().", "full": "Implement strStr().\n\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n\nExample 1:\nInput: haystack = \"hello\", needle = \"ll\"\nOutput: 2\n\nExample 2:\nInput: haystack = \"aaaaa\", needle = \"bba\"\nOutput: -1\nReference: https://leetcode.com/problems/implement-strstr/description/"}}, "functions": {"contain_string": {"args": ["haystack", "needle"], "returns": ["-1", "0", "-1", "-1", "i"], "min_max_lineno": {"min_lineno": 15, "max_lineno": 26}, "calls": ["range", "len"], "source_code": "def contain_string(haystack, needle):\n    if len(needle) == 0:\n        return 0\n    if len(needle) > len(haystack):\n        return -1\n    for i in range(len(haystack)):\n        if len(haystack) - i < len(needle):\n            return -1\n        if haystack[i:i + len(needle)] == needle:\n            return i\n    return -1"}}, "is_test": false}