{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/strings/panagram.py", "fileNameBase": "panagram", "extension": "py", "doc": {"long_description": "A panagram is a sentence that uses every letter at least once.\n\nThe most famous example is: \"he quick brown fox jumps over the lazy dog.\n\nNote:\nA panagram in one language isn't necessarily a panagram in another. This\nmodule assumes the english language. Hence, the Finnish panagram\n'T\u00f6rkylempij\u00e4vongahdus' won't pass for a panagram despite being considered\na perfect panagram in its language. However, the Swedish panagram\n'Yxm\u00f6rdaren Julia Blomqvist p\u00e5 f\u00e4ktning i Schweiz' will pass despite\nincluding letters not used in the english alphabet. This is because the\nSwedish alphabet only extends the Latin one.", "short_description": "Given a string, check whether it is a panagram or not.", "full": "Given a string, check whether it is a panagram or not.\n\nA panagram is a sentence that uses every letter at least once.\n\nThe most famous example is: \"he quick brown fox jumps over the lazy dog.\n\nNote:\nA panagram in one language isn't necessarily a panagram in another. This\nmodule assumes the english language. Hence, the Finnish panagram\n'T\u00f6rkylempij\u00e4vongahdus' won't pass for a panagram despite being considered\na perfect panagram in its language. However, the Swedish panagram\n'Yxm\u00f6rdaren Julia Blomqvist p\u00e5 f\u00e4ktning i Schweiz' will pass despite\nincluding letters not used in the english alphabet. This is because the\nSwedish alphabet only extends the Latin one."}}, "dependencies": [{"from_module": "string", "import": "ascii_lowercase", "type": "external", "type_element": "module"}], "functions": {"panagram": {"doc": {"short_description": "Returns whether the input string is an English panagram or not.", "args": {"string": {"description": "A sentence in the form of a string.", "type_name": "str", "is_optional": false}}, "returns": {"description": "A boolean with the result.", "is_generator": false}}, "args": ["string"], "returns": ["len(letters) == 0"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 37}, "calls": ["set", "len", "set.remove", "c.lower"], "store_vars_calls": {"letters": "set"}, "source_code": "def panagram(string):\n    \"\"\"\n    Returns whether the input string is an English panagram or not.\n\n        Parameters:\n            string (str): A sentence in the form of a string.\n\n        Returns:\n            A boolean with the result.\n    \"\"\"\n    letters = set(ascii_lowercase)\n    for c in string:\n        try:\n            letters.remove(c.lower())\n        except:\n            pass\n    return len(letters) == 0"}}, "is_test": false}