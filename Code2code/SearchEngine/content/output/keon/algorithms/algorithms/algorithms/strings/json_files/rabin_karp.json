{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/strings/rabin_karp.py", "fileNameBase": "rabin_karp", "extension": "py"}, "classes": {"RollingHash": {"min_max_lineno": {"min_lineno": 4, "max_lineno": 31}, "methods": {"__init__": {"args": ["self", "text", "size_word"], "min_max_lineno": {"min_lineno": 5, "max_lineno": 19}, "calls": ["range", "ord"], "source_code": "def __init__(self, text, size_word):\n    self.text = text\n    self.hash = 0\n    self.size_word = size_word\n    for i in range(0, size_word):\n        self.hash += (ord(self.text[i]) - ord('a') + 1) * 26 ** (size_word - i - 1)\n    self.window_start = 0\n    self.window_end = size_word"}, "move_window": {"args": ["self"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 28}, "calls": ["len", "ord"], "source_code": "def move_window(self):\n    if self.window_end <= len(self.text) - 1:\n        self.hash -= (ord(self.text[self.window_start]) - ord('a') + 1) * 26 ** (self.size_word - 1)\n        self.hash *= 26\n        self.hash += ord(self.text[self.window_end]) - ord('a') + 1\n        self.window_start += 1\n        self.window_end += 1"}, "window_text": {"args": ["self"], "returns": ["self.text[self.window_start:self.window_end]"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 31}, "source_code": "def window_text(self):\n    return self.text[self.window_start:self.window_end]"}}}}, "functions": {"rabin_karp": {"args": ["word", "text"], "returns": ["None", "None", "None", "i"], "min_max_lineno": {"min_lineno": 32, "max_lineno": 48}, "calls": ["rabin_karp.RollingHash", "range", "len", "rabin_karp.RollingHash.move_window", "rabin_karp.RollingHash.window_text"], "store_vars_calls": {"rolling_hash": "RollingHash", "word_hash": "RollingHash"}, "source_code": "def rabin_karp(word, text):\n    if word == '' or text == '':\n        return None\n    if len(word) > len(text):\n        return None\n    rolling_hash = RollingHash(text, len(word))\n    word_hash = RollingHash(word, len(word))\n    for i in range(len(text) - len(word) + 1):\n        if rolling_hash.hash == word_hash.hash:\n            if rolling_hash.window_text() == word:\n                return i\n        rolling_hash.move_window()\n    return None"}}, "is_test": false}