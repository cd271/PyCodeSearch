{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/tree/bst/BSTIterator.py", "fileNameBase": "BSTIterator", "extension": "py"}, "classes": {"BSTIterator": {"min_max_lineno": {"min_lineno": 2, "max_lineno": 21}, "methods": {"__init__": {"args": ["self", "root"], "min_max_lineno": {"min_lineno": 3, "max_lineno": 8}, "calls": ["BSTIterator.BSTIterator.stack.append"], "source_code": "def __init__(self, root):\n    self.stack = []\n    while root:\n        self.stack.append(root)\n        root = root.left"}, "has_next": {"args": ["self"], "returns": ["bool(self.stack)"], "min_max_lineno": {"min_lineno": 9, "max_lineno": 11}, "calls": ["bool"], "source_code": "def has_next(self):\n    return bool(self.stack)"}, "next": {"args": ["self"], "returns": ["node.val"], "min_max_lineno": {"min_lineno": 12, "max_lineno": 21}, "calls": ["BSTIterator.BSTIterator.stack.pop", "BSTIterator.BSTIterator.stack.append"], "store_vars_calls": {"node": "self.stack.pop"}, "source_code": "def next(self):\n    node = self.stack.pop()\n    tmp = node\n    if tmp.right:\n        tmp = tmp.right\n        while tmp:\n            self.stack.append(tmp)\n            tmp = tmp.left\n    return node.val"}}}}, "is_test": false}