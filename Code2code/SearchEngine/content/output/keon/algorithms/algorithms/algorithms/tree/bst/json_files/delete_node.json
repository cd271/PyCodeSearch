{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/tree/bst/delete_node.py", "fileNameBase": "delete_node", "extension": "py", "doc": {"long_description": "Basically, the deletion can be divided into two stages:\n\nSearch for a node to remove.\nIf the node is found, delete the node.\nNote: Time complexity should be O(height of tree).\n\nExample:\n\nroot = [5,3,6,2,4,null,7]\nkey = 3\n\n    5\n   /   3   6\n / \\   2   4   7\n\nGiven key to delete is 3. So we find the node with value 3 and delete it.\n\nOne valid answer is [5,4,6,2,null,null,7], shown in the following BST.\n\n    5\n   /   4   6\n /     2       7\n\nAnother valid answer is [5,2,6,null,4,null,7].\n\n    5\n   /   2   6\n   \\       4   7", "short_description": "Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.", "full": "Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\n\nBasically, the deletion can be divided into two stages:\n\nSearch for a node to remove.\nIf the node is found, delete the node.\nNote: Time complexity should be O(height of tree).\n\nExample:\n\nroot = [5,3,6,2,4,null,7]\nkey = 3\n\n    5\n   /   3   6\n / \\   2   4   7\n\nGiven key to delete is 3. So we find the node with value 3 and delete it.\n\nOne valid answer is [5,4,6,2,null,null,7], shown in the following BST.\n\n    5\n   /   4   6\n /     2       7\n\nAnother valid answer is [5,2,6,null,4,null,7].\n\n    5\n   /   2   6\n   \\       4   7"}}, "classes": {"Solution": {"extend": ["object"], "min_max_lineno": {"min_lineno": 40, "max_lineno": 67}, "methods": {"delete_node": {"args": ["self", "root", "key"], "returns": ["root", "None", "root.left", "root.right"], "min_max_lineno": {"min_lineno": 41, "max_lineno": 67}, "calls": ["delete_node.Solution.deleteNode"], "store_vars_calls": {"root.left": "self.deleteNode", "root.right": "self.deleteNode"}, "source_code": "def delete_node(self, root, key):\n    \"\"\"\n        :type root: TreeNode\n        :type key: int\n        :rtype: TreeNode\n        \"\"\"\n    if not root:\n        return None\n    if root.val == key:\n        if root.left:\n            left_right_most = root.left\n            while left_right_most.right:\n                left_right_most = left_right_most.right\n            left_right_most.right = root.right\n            return root.left\n        else:\n            return root.right\n    elif root.val > key:\n        root.left = self.deleteNode(root.left, key)\n    else:\n        root.right = self.deleteNode(root.right, key)\n    return root"}}}}, "is_test": false}