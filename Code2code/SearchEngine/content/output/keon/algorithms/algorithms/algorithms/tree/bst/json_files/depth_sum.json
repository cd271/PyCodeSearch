{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/tree/bst/depth_sum.py", "fileNameBase": "depth_sum", "extension": "py", "doc": {"long_description": "in a binary search tree of integers weighted by the depth of each value.\n\nFor example:\n\n                    9\n                 /                     6         12\n              / \\       /               3     8   10      15\n                 /                              7                18\n\n    depth_sum = 1*9 + 2*(6+12) + 3*(3+8+10+15) + 4*(7+18)", "short_description": "Write a function depthSum returns the sum of the values stored", "full": "Write a function depthSum returns the sum of the values stored\nin a binary search tree of integers weighted by the depth of each value.\n\nFor example:\n\n                    9\n                 /                     6         12\n              / \\       /               3     8   10      15\n                 /                              7                18\n\n    depth_sum = 1*9 + 2*(6+12) + 3*(3+8+10+15) + 4*(7+18)"}}, "dependencies": [{"import": "unittest", "type": "external", "type_element": "module"}, {"from_module": "bst", "import": "Node", "type": "internal", "type_element": "module"}, {"from_module": "bst", "import": "bst", "type": "internal", "type_element": "module"}], "classes": {"TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 49, "max_lineno": 64}, "methods": {"setUp": {"args": ["self"], "min_max_lineno": {"min_lineno": 50, "max_lineno": 61}, "calls": ["bst.bst.bst", "depth_sum.TestSuite.tree.insert"], "store_vars_calls": {"self.tree": "bst"}, "source_code": "def setUp(self):\n    self.tree = bst()\n    self.tree.insert(9)\n    self.tree.insert(6)\n    self.tree.insert(12)\n    self.tree.insert(3)\n    self.tree.insert(8)\n    self.tree.insert(10)\n    self.tree.insert(15)\n    self.tree.insert(7)\n    self.tree.insert(18)"}, "test_depth_sum": {"args": ["self"], "min_max_lineno": {"min_lineno": 62, "max_lineno": 64}, "calls": ["depth_sum.TestSuite.assertEqual", "depth_sum.depth_sum"], "source_code": "def test_depth_sum(self):\n    self.assertEqual(253, depth_sum(self.tree.root, 4))"}}}}, "functions": {"depth_sum": {"args": ["root", "n"], "returns": ["recur_depth_sum(root, 1)"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 25}, "calls": ["depth_sum.recur_depth_sum"], "source_code": "def depth_sum(root, n):\n    if root:\n        return recur_depth_sum(root, 1)"}, "recur_depth_sum": {"args": ["root", "n"], "returns": ["0", "root.data * n", "n * root.data + recur_depth_sum(root.left, n + 1) + recur_depth_sum(root.right, n + 1)"], "min_max_lineno": {"min_lineno": 26, "max_lineno": 33}, "calls": ["depth_sum.recur_depth_sum"], "source_code": "def recur_depth_sum(root, n):\n    if root is None:\n        return 0\n    elif root.left is None and root.right is None:\n        return root.data * n\n    else:\n        return n * root.data + recur_depth_sum(root.left, n + 1) + recur_depth_sum(root.right, n + 1)"}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "depth_sum.unittest.main", "type": "script"}, "is_test": true}