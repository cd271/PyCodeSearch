{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/tree/bst/lowest_common_ancestor.py", "fileNameBase": "lowest_common_ancestor", "extension": "py", "doc": {"long_description": "find the lowest common ancestor (LCA) of two given nodes in the BST.\n\nAccording to the definition of LCA on Wikipedia:\n    \u201cThe lowest common ancestor is defined between two\n    nodes v and w as the lowest node in T that has both v and w\n    as descendants (where we allow a node to be a descendant of itself).\u201d\n\n        _______6______\n       /                  ___2__          ___8__\n   /      \\        /         0      _4       7       9\n         /           3   5\n\nFor example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6.\nAnother example is LCA of nodes 2 and 4 is 2,\nsince a node can be a descendant of itself according to the LCA definition.", "short_description": "Given a binary search tree (BST),", "full": "Given a binary search tree (BST),\nfind the lowest common ancestor (LCA) of two given nodes in the BST.\n\nAccording to the definition of LCA on Wikipedia:\n    \u201cThe lowest common ancestor is defined between two\n    nodes v and w as the lowest node in T that has both v and w\n    as descendants (where we allow a node to be a descendant of itself).\u201d\n\n        _______6______\n       /                  ___2__          ___8__\n   /      \\        /         0      _4       7       9\n         /           3   5\n\nFor example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6.\nAnother example is LCA of nodes 2 and 4 is 2,\nsince a node can be a descendant of itself according to the LCA definition."}}, "functions": {"lowest_common_ancestor": {"args": ["root", "p", "q"], "returns": ["root"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 38}, "source_code": "def lowest_common_ancestor(root, p, q):\n    \"\"\"\n    :type root: Node\n    :type p: Node\n    :type q: Node\n    :rtype: Node\n    \"\"\"\n    while root:\n        if p.val > root.val < q.val:\n            root = root.right\n        elif p.val < root.val > q.val:\n            root = root.left\n        else:\n            return root"}}, "is_test": false}