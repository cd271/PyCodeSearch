{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/tree/bst/serialize_deserialize.py", "fileNameBase": "serialize_deserialize", "extension": "py"}, "classes": {"TreeNode": {"extend": ["object"], "min_max_lineno": {"min_lineno": 3, "max_lineno": 8}, "methods": {"__init__": {"args": ["self", "x"], "min_max_lineno": {"min_lineno": 4, "max_lineno": 8}, "source_code": "def __init__(self, x):\n    self.val = x\n    self.left = None\n    self.right = None"}}}}, "functions": {"serialize": {"args": ["root"], "returns": ["' '.join(vals)"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 21}, "calls": ["serialize_deserialize.serialize.build_string"], "functions": {"build_string": {"args": ["node"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 18}, "calls": ["vals.append", "build_string", "str"], "source_code": "def build_string(node):\n    if node:\n        vals.append(str(node.val))\n        build_string(node.left)\n        build_string(node.right)\n    else:\n        vals.append('#')"}}, "source_code": "def serialize(root):\n\n    def build_string(node):\n        if node:\n            vals.append(str(node.val))\n            build_string(node.left)\n            build_string(node.right)\n        else:\n            vals.append('#')\n    vals = []\n    build_string(root)\n    return ' '.join(vals)"}, "deserialize": {"args": ["data"], "returns": ["build_tree()", "node", "None"], "min_max_lineno": {"min_lineno": 23, "max_lineno": 34}, "calls": ["iter", "serialize_deserialize.deserialize.build_tree"], "store_vars_calls": {"vals": "iter", "val": "next", "node": "TreeNode", "node.left": "build_tree", "node.right": "build_tree"}, "functions": {"build_tree": {"returns": ["node", "None"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 32}, "calls": ["next", "build_tree", "int"], "store_vars_calls": {"val": "next", "node": "TreeNode", "node.left": "build_tree", "node.right": "build_tree"}, "source_code": "def build_tree():\n    val = next(vals)\n    if val == '#':\n        return None\n    node = TreeNode(int(val))\n    node.left = build_tree()\n    node.right = build_tree()\n    return node"}}, "source_code": "def deserialize(data):\n\n    def build_tree():\n        val = next(vals)\n        if val == '#':\n            return None\n        node = TreeNode(int(val))\n        node.left = build_tree()\n        node.right = build_tree()\n        return node\n    vals = iter(data.split())\n    return build_tree()"}}, "is_test": false}