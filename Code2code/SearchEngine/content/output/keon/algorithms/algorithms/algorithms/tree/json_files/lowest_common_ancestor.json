{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/tree/lowest_common_ancestor.py", "fileNameBase": "lowest_common_ancestor", "extension": "py", "doc": {"long_description": "(LCA) of two given nodes in the tree.\n\nAccording to the definition of LCA on Wikipedia:\n    \u201cThe lowest common ancestor is defined between two nodes\n    v and w as the lowest node in T that has both v and w as\n    descendants\n    (where we allow a node to be a descendant of itself).\u201d\n\n        _______3______\n       /                  ___5__          ___1__\n   /      \\        /         6      _2       0       8\n         /           7   4\nFor example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3.\nAnother example is LCA of nodes 5 and 4 is 5,\nsince a node can be a descendant of itself according to the LCA definition.", "short_description": "Given a binary tree, find the lowest common ancestor", "full": "Given a binary tree, find the lowest common ancestor\n(LCA) of two given nodes in the tree.\n\nAccording to the definition of LCA on Wikipedia:\n    \u201cThe lowest common ancestor is defined between two nodes\n    v and w as the lowest node in T that has both v and w as\n    descendants\n    (where we allow a node to be a descendant of itself).\u201d\n\n        _______3______\n       /                  ___5__          ___1__\n   /      \\        /         6      _2       0       8\n         /           7   4\nFor example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3.\nAnother example is LCA of nodes 5 and 4 is 5,\nsince a node can be a descendant of itself according to the LCA definition."}}, "functions": {"lca": {"args": ["root", "p", "q"], "returns": ["left if left else right", "root", "root"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 38}, "calls": ["lowest_common_ancestor.lca"], "store_vars_calls": {"left": "lca", "right": "lca"}, "source_code": "def lca(root, p, q):\n    \"\"\"\n    :type root: TreeNode\n    :type p: TreeNode\n    :type q: TreeNode\n    :rtype: TreeNode\n    \"\"\"\n    if root is None or root is p or root is q:\n        return root\n    left = lca(root.left, p, q)\n    right = lca(root.right, p, q)\n    if left is not None and right is not None:\n        return root\n    return left if left else right"}}, "is_test": false}