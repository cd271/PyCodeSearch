{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/tree/path_sum.py", "fileNameBase": "path_sum", "extension": "py", "doc": {"long_description": "path such that adding up all the values along the path equals the given sum.\n\nFor example:\nGiven the below binary tree and sum = 22,\n              5\n             /             4   8\n           /   /           11  13  4\n         /  \\              7    2      1\nreturn true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.", "short_description": "Given a binary tree and a sum, determine if the tree has a root-to-leaf", "full": "Given a binary tree and a sum, determine if the tree has a root-to-leaf\npath such that adding up all the values along the path equals the given sum.\n\nFor example:\nGiven the below binary tree and sum = 22,\n              5\n             /             4   8\n           /   /           11  13  4\n         /  \\              7    2      1\nreturn true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22."}}, "functions": {"has_path_sum": {"args": ["root", "sum"], "returns": ["has_path_sum(root.left, sum) or has_path_sum(root.right, sum)", "False", "True"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 30}, "calls": ["path_sum.has_path_sum"], "source_code": "def has_path_sum(root, sum):\n    \"\"\"\n    :type root: TreeNode\n    :type sum: int\n    :rtype: bool\n    \"\"\"\n    if root is None:\n        return False\n    if root.left is None and root.right is None and (root.val == sum):\n        return True\n    sum -= root.val\n    return has_path_sum(root.left, sum) or has_path_sum(root.right, sum)"}, "has_path_sum2": {"args": ["root", "sum"], "returns": ["False", "False", "True"], "min_max_lineno": {"min_lineno": 33, "max_lineno": 47}, "calls": ["stack.pop", "stack.append"], "source_code": "def has_path_sum2(root, sum):\n    if root is None:\n        return False\n    stack = [(root, root.val)]\n    while stack:\n        (node, val) = stack.pop()\n        if node.left is None and node.right is None:\n            if val == sum:\n                return True\n        if node.left is not None:\n            stack.append((node.left, val + node.left.val))\n        if node.right is not None:\n            stack.append((node.right, val + node.right.val))\n    return False"}, "has_path_sum3": {"args": ["root", "sum"], "returns": ["False", "False", "True"], "min_max_lineno": {"min_lineno": 50, "max_lineno": 64}, "calls": ["queue.pop", "queue.append"], "source_code": "def has_path_sum3(root, sum):\n    if root is None:\n        return False\n    queue = [(root, sum - root.val)]\n    while queue:\n        (node, val) = queue.pop(0)\n        if node.left is None and node.right is None:\n            if val == 0:\n                return True\n        if node.left is not None:\n            queue.append((node.left, val - node.left.val))\n        if node.right is not None:\n            queue.append((node.right, val - node.right.val))\n    return False"}}, "is_test": false}