{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/tree/trie/add_and_search.py", "fileNameBase": "add_and_search", "extension": "py", "doc": {"long_description": "that allows us to add and search for words.\nThe search can be a literal word or regular expression\ncontaining \u201c.\u201d, where \u201c.\u201d can be any letter.\n\nExample:\naddWord(\u201cbad\u201d)\naddWord(\u201cdad\u201d)\naddWord(\u201cmad\u201d)\nsearch(\u201cpad\u201d) -> false\nsearch(\u201cbad\u201d) -> true\nsearch(\u201c.ad\u201d) -> true\nsearch(\u201cb..\u201d) -> true", "short_description": "We are asked to design an efficient data structure", "full": "We are asked to design an efficient data structure\nthat allows us to add and search for words.\nThe search can be a literal word or regular expression\ncontaining \u201c.\u201d, where \u201c.\u201d can be any letter.\n\nExample:\naddWord(\u201cbad\u201d)\naddWord(\u201cdad\u201d)\naddWord(\u201cmad\u201d)\nsearch(\u201cpad\u201d) -> false\nsearch(\u201cbad\u201d) -> true\nsearch(\u201c.ad\u201d) -> true\nsearch(\u201cb..\u201d) -> true"}}, "dependencies": [{"import": "collections", "type": "external", "type_element": "module"}], "classes": {"TrieNode": {"extend": ["object"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 23}, "methods": {"__init__": {"args": ["self", "letter", "is_terminal"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 23}, "calls": ["dict"], "store_vars_calls": {"self.children": "dict"}, "source_code": "def __init__(self, letter, is_terminal=False):\n    self.children = dict()\n    self.letter = letter\n    self.is_terminal = is_terminal"}}}, "WordDictionary": {"extend": ["object"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 57}, "methods": {"__init__": {"args": ["self"], "min_max_lineno": {"min_lineno": 25, "max_lineno": 27}, "store_vars_calls": {"self.root": "TrieNode"}, "source_code": "def __init__(self):\n    self.root = TrieNode('')"}, "add_word": {"args": ["self", "word"], "min_max_lineno": {"min_lineno": 28, "max_lineno": 35}, "source_code": "def add_word(self, word):\n    cur = self.root\n    for letter in word:\n        if letter not in cur.children:\n            cur.children[letter] = TrieNode(letter)\n        cur = cur.children[letter]\n    cur.is_terminal = True"}, "search": {"args": ["self", "word", "node"], "returns": ["cur.is_terminal", "False", "False", "False", "True", "True"], "min_max_lineno": {"min_lineno": 36, "max_lineno": 57}, "calls": ["enumerate", "cur.children.itervalues", "len", "add_and_search.WordDictionary.search"], "source_code": "def search(self, word, node=None):\n    cur = node\n    if not cur:\n        cur = self.root\n    for (i, letter) in enumerate(word):\n        if letter == '.':\n            if i == len(word) - 1:\n                for child in cur.children.itervalues():\n                    if child.is_terminal:\n                        return True\n                return False\n            for child in cur.children.itervalues():\n                if self.search(word[i + 1:], child) == True:\n                    return True\n            return False\n        if letter not in cur.children:\n            return False\n        cur = cur.children[letter]\n    return cur.is_terminal"}}}, "WordDictionary2": {"extend": ["object"], "min_max_lineno": {"min_lineno": 58, "max_lineno": 80}, "methods": {"__init__": {"args": ["self"], "min_max_lineno": {"min_lineno": 59, "max_lineno": 61}, "calls": ["collections.defaultdict"], "store_vars_calls": {"self.word_dict": "collections.defaultdict"}, "source_code": "def __init__(self):\n    self.word_dict = collections.defaultdict(list)"}, "add_word": {"args": ["self", "word"], "min_max_lineno": {"min_lineno": 63, "max_lineno": 66}, "calls": ["add_and_search.WordDictionary2.word_dict[].append", "len"], "source_code": "def add_word(self, word):\n    if word:\n        self.word_dict[len(word)].append(word)"}, "search": {"args": ["self", "word"], "returns": ["False", "False", "word in self.word_dict[len(word)]", "True"], "min_max_lineno": {"min_lineno": 67, "max_lineno": 80}, "calls": ["len", "enumerate"], "source_code": "def search(self, word):\n    if not word:\n        return False\n    if '.' not in word:\n        return word in self.word_dict[len(word)]\n    for v in self.word_dict[len(word)]:\n        for (i, ch) in enumerate(word):\n            if ch != v[i] and ch != '.':\n                break\n        else:\n            return True\n    return False"}}}}, "is_test": false}