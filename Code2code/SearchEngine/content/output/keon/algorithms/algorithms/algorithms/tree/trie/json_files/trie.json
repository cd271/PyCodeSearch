{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/tree/trie/trie.py", "fileNameBase": "trie", "extension": "py", "doc": {"long_description": "Note:\nYou may assume that all inputs are consist of lowercase letters a-z.", "short_description": "Implement a trie with insert, search, and startsWith methods.", "full": "Implement a trie with insert, search, and startsWith methods.\n\nNote:\nYou may assume that all inputs are consist of lowercase letters a-z."}}, "dependencies": [{"import": "collections", "type": "external", "type_element": "module"}], "classes": {"TrieNode": {"min_max_lineno": {"min_lineno": 10, "max_lineno": 14}, "methods": {"__init__": {"args": ["self"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 14}, "calls": ["collections.defaultdict"], "store_vars_calls": {"self.children": "collections.defaultdict"}, "source_code": "def __init__(self):\n    self.children = collections.defaultdict(TrieNode)\n    self.is_word = False"}}}, "Trie": {"min_max_lineno": {"min_lineno": 16, "max_lineno": 41}, "methods": {"__init__": {"args": ["self"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 19}, "store_vars_calls": {"self.root": "TrieNode"}, "source_code": "def __init__(self):\n    self.root = TrieNode()"}, "insert": {"args": ["self", "word"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 25}, "source_code": "def insert(self, word):\n    current = self.root\n    for letter in word:\n        current = current.children[letter]\n    current.is_word = True"}, "search": {"args": ["self", "word"], "returns": ["current.is_word", "False"], "min_max_lineno": {"min_lineno": 26, "max_lineno": 33}, "calls": ["current.children.get.children.get.children.get"], "store_vars_calls": {"current": "current.children.get"}, "source_code": "def search(self, word):\n    current = self.root\n    for letter in word:\n        current = current.children.get(letter)\n        if current is None:\n            return False\n    return current.is_word"}, "starts_with": {"args": ["self", "prefix"], "returns": ["True", "False"], "min_max_lineno": {"min_lineno": 34, "max_lineno": 41}, "calls": ["current.children.get.children.get.children.get"], "store_vars_calls": {"current": "current.children.get"}, "source_code": "def starts_with(self, prefix):\n    current = self.root\n    for letter in prefix:\n        current = current.children.get(letter)\n        if current is None:\n            return False\n    return True"}}}}, "is_test": false}