{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/algorithms/unix/path/simplify_path.py", "fileNameBase": "simplify_path", "extension": "py", "doc": {"long_description": "For example,\npath = \"/home/\", => \"/home\"\npath = \"/a/./b/../../c/\", => \"/c\"\n\nCorner Cases:\n\nDid you consider the case where path = \"/../\"?\nIn this case, you should return \"/\".\nAnother corner case is the path might contain multiple slashes '/' together, such as \"/home//foo/\".\nIn this case, you should ignore redundant slashes and return \"/home/foo\".\n\nReference: https://leetcode.com/problems/simplify-path/description/", "short_description": "Given an absolute path for a file (Unix-style), simplify it.", "full": "Given an absolute path for a file (Unix-style), simplify it.\n\nFor example,\npath = \"/home/\", => \"/home\"\npath = \"/a/./b/../../c/\", => \"/c\"\n\nCorner Cases:\n\nDid you consider the case where path = \"/../\"?\nIn this case, you should return \"/\".\nAnother corner case is the path might contain multiple slashes '/' together, such as \"/home//foo/\".\nIn this case, you should ignore redundant slashes and return \"/home/foo\".\n\nReference: https://leetcode.com/problems/simplify-path/description/"}}, "dependencies": [{"import": "os", "type": "external", "type_element": "module"}], "functions": {"simplify_path_v1": {"args": ["path"], "returns": ["os.path.abspath(path)"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 21}, "calls": ["os.path.abspath"], "source_code": "def simplify_path_v1(path):\n    return os.path.abspath(path)"}, "simplify_path_v2": {"args": ["path"], "returns": ["'/' + '/'.join(stack)"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 30}, "calls": ["path.split", "stack.pop", "stack.append"], "source_code": "def simplify_path_v2(path):\n    (stack, tokens) = ([], path.split('/'))\n    for token in tokens:\n        if token == '..' and stack:\n            stack.pop()\n        elif token != '..' and token != '.' and token:\n            stack.append(token)\n    return '/' + '/'.join(stack)"}}, "is_test": false}