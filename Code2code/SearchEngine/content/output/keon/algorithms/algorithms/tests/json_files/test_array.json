{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/tests/test_array.py", "fileNameBase": "test_array", "extension": "py"}, "dependencies": [{"from_module": "algorithms.arrays", "import": "delete_nth", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "delete_nth_naive", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "flatten_iter", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "flatten", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "garage", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "josephus", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "longest_non_repeat_v1", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "longest_non_repeat_v2", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "get_longest_non_repeat_v1", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "get_longest_non_repeat_v2", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "Interval", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "merge_intervals", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "missing_ranges", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "move_zeros", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "plus_one_v1", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "plus_one_v2", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "plus_one_v3", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "rotate_v1", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "rotate_v2", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "rotate_v3", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "summarize_ranges", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "three_sum", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "two_sum", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "max_ones_index", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "trimmean", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "top_1", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "limit", "type": "external", "type_element": "module"}, {"from_module": "algorithms.arrays", "import": "n_sum", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestJosephus": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 26, "max_lineno": 42}, "methods": {"test_josephus": {"args": ["self"], "min_max_lineno": {"min_lineno": 28, "max_lineno": 42}, "calls": ["algorithms.arrays.josephus", "test_array.TestJosephus.assertEqual", "test_array.TestJosephus.assertRaises", "next"], "store_vars_calls": {"josephus_generator": "josephus"}, "source_code": "def test_josephus(self):\n    a = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n    josephus_generator = josephus(a, 3)\n    self.assertEqual(next(josephus_generator), '3')\n    self.assertEqual(next(josephus_generator), '6')\n    self.assertEqual(next(josephus_generator), '9')\n    self.assertEqual(next(josephus_generator), '4')\n    self.assertEqual(next(josephus_generator), '8')\n    self.assertEqual(next(josephus_generator), '5')\n    self.assertEqual(next(josephus_generator), '2')\n    self.assertEqual(next(josephus_generator), '7')\n    self.assertEqual(next(josephus_generator), '1')\n    self.assertRaises(StopIteration, next, josephus_generator)"}}}, "TestDeleteNth": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 79}, "methods": {"test_delete_nth_naive": {"args": ["self"], "min_max_lineno": {"min_lineno": 46, "max_lineno": 64}, "calls": ["test_array.TestDeleteNth.assertListEqual", "algorithms.arrays.delete_nth_naive"], "source_code": "def test_delete_nth_naive(self):\n    self.assertListEqual(delete_nth_naive([20, 37, 20, 21, 37, 21, 21], n=1), [20, 37, 21])\n    self.assertListEqual(delete_nth_naive([1, 1, 3, 3, 7, 2, 2, 2, 2], n=3), [1, 1, 3, 3, 7, 2, 2, 2])\n    self.assertListEqual(delete_nth_naive([1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1], n=3), [1, 2, 3, 1, 1, 2, 2, 3, 3, 4, 5])\n    self.assertListEqual(delete_nth_naive([], n=5), [])\n    self.assertListEqual(delete_nth_naive([1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1], n=0), [])"}, "test_delete_nth": {"args": ["self"], "min_max_lineno": {"min_lineno": 65, "max_lineno": 79}, "calls": ["test_array.TestDeleteNth.assertListEqual", "algorithms.arrays.delete_nth"], "source_code": "def test_delete_nth(self):\n    self.assertListEqual(delete_nth([20, 37, 20, 21, 37, 21, 21], n=1), [20, 37, 21])\n    self.assertListEqual(delete_nth([1, 1, 3, 3, 7, 2, 2, 2, 2], n=3), [1, 1, 3, 3, 7, 2, 2, 2])\n    self.assertListEqual(delete_nth([1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1], n=3), [1, 2, 3, 1, 1, 2, 2, 3, 3, 4, 5])\n    self.assertListEqual(delete_nth([], n=5), [])\n    self.assertListEqual(delete_nth([1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1], n=0), [])"}}}, "TestFlatten": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 81, "max_lineno": 125}, "methods": {"test_flatten": {"args": ["self"], "min_max_lineno": {"min_lineno": 83, "max_lineno": 96}, "calls": ["algorithms.arrays.flatten", "test_array.TestFlatten.assertEqual"], "store_vars_calls": {"flattened": "flatten"}, "source_code": "def test_flatten(self):\n    nested_list = [2, 1, [3, [4, 5], 6], 7, [8]]\n    flattened = flatten(nested_list)\n    self.assertEqual(flattened, [2, 1, 3, 4, 5, 6, 7, 8])\n    nested_list = [[3, [4, 5], 6], 7, [8]]\n    flattened = flatten(nested_list)\n    self.assertEqual(flattened, [3, 4, 5, 6, 7, 8])\n    nested_list = [[], [8]]\n    flattened = flatten(nested_list)\n    self.assertEqual(flattened, [8])"}, "test_flatten_iter": {"args": ["self"], "min_max_lineno": {"min_lineno": 97, "max_lineno": 125}, "calls": ["algorithms.arrays.flatten_iter", "test_array.TestFlatten.assertEqual", "test_array.TestFlatten.assertRaises", "next"], "store_vars_calls": {"flattened": "flatten_iter"}, "source_code": "def test_flatten_iter(self):\n    nested_list = [2, 1, [3, [4, 5], 6], 7, [8]]\n    flattened = flatten_iter(nested_list)\n    self.assertEqual(next(flattened), 2)\n    self.assertEqual(next(flattened), 1)\n    self.assertEqual(next(flattened), 3)\n    self.assertEqual(next(flattened), 4)\n    self.assertEqual(next(flattened), 5)\n    self.assertEqual(next(flattened), 6)\n    self.assertEqual(next(flattened), 7)\n    self.assertEqual(next(flattened), 8)\n    self.assertRaises(StopIteration, next, flattened)\n    nested_list = [[3, [4, 5], 6], 7, [8]]\n    flattened = flatten_iter(nested_list)\n    self.assertEqual(next(flattened), 3)\n    self.assertEqual(next(flattened), 4)\n    self.assertEqual(next(flattened), 5)\n    self.assertEqual(next(flattened), 6)\n    self.assertEqual(next(flattened), 7)\n    self.assertEqual(next(flattened), 8)\n    self.assertRaises(StopIteration, next, flattened)\n    nested_list = [[], [8]]\n    flattened = flatten_iter(nested_list)\n    self.assertEqual(next(flattened), 8)\n    self.assertRaises(StopIteration, next, flattened)"}}}, "TestGarage": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 127, "max_lineno": 140}, "methods": {"test_garage": {"args": ["self"], "min_max_lineno": {"min_lineno": 129, "max_lineno": 140}, "calls": ["algorithms.arrays.garage", "test_array.TestGarage.assertEqual", "test_array.TestGarage.assertListEqual"], "source_code": "def test_garage(self):\n    initial = [1, 2, 3, 0, 4]\n    final = [0, 3, 2, 1, 4]\n    (steps, seq) = garage(initial, final)\n    self.assertEqual(steps, 4)\n    self.assertListEqual(seq, [[0, 2, 3, 1, 4], [2, 0, 3, 1, 4], [2, 3, 0, 1, 4], [0, 3, 2, 1, 4]])"}}}, "TestLongestNonRepeat": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 142, "max_lineno": 209}, "methods": {"test_longest_non_repeat_v1": {"args": ["self"], "min_max_lineno": {"min_lineno": 144, "max_lineno": 160}, "calls": ["test_array.TestLongestNonRepeat.assertEqual", "algorithms.arrays.longest_non_repeat_v1"], "source_code": "def test_longest_non_repeat_v1(self):\n    string = 'abcabcbb'\n    self.assertEqual(longest_non_repeat_v1(string), 3)\n    string = 'bbbbb'\n    self.assertEqual(longest_non_repeat_v1(string), 1)\n    string = 'pwwkew'\n    self.assertEqual(longest_non_repeat_v1(string), 3)\n    string = 'dvdf'\n    self.assertEqual(longest_non_repeat_v1(string), 3)\n    string = 'asjrgapa'\n    self.assertEqual(longest_non_repeat_v1(string), 6)"}, "test_longest_non_repeat_v2": {"args": ["self"], "min_max_lineno": {"min_lineno": 161, "max_lineno": 177}, "calls": ["test_array.TestLongestNonRepeat.assertEqual", "algorithms.arrays.longest_non_repeat_v2"], "source_code": "def test_longest_non_repeat_v2(self):\n    string = 'abcabcbb'\n    self.assertEqual(longest_non_repeat_v2(string), 3)\n    string = 'bbbbb'\n    self.assertEqual(longest_non_repeat_v2(string), 1)\n    string = 'pwwkew'\n    self.assertEqual(longest_non_repeat_v2(string), 3)\n    string = 'dvdf'\n    self.assertEqual(longest_non_repeat_v2(string), 3)\n    string = 'asjrgapa'\n    self.assertEqual(longest_non_repeat_v2(string), 6)"}, "test_get_longest_non_repeat_v1": {"args": ["self"], "min_max_lineno": {"min_lineno": 178, "max_lineno": 193}, "calls": ["test_array.TestLongestNonRepeat.assertEqual", "algorithms.arrays.get_longest_non_repeat_v1"], "source_code": "def test_get_longest_non_repeat_v1(self):\n    string = 'abcabcbb'\n    self.assertEqual(get_longest_non_repeat_v1(string), (3, 'abc'))\n    string = 'bbbbb'\n    self.assertEqual(get_longest_non_repeat_v1(string), (1, 'b'))\n    string = 'pwwkew'\n    self.assertEqual(get_longest_non_repeat_v1(string), (3, 'wke'))\n    string = 'dvdf'\n    self.assertEqual(get_longest_non_repeat_v1(string), (3, 'vdf'))\n    string = 'asjrgapa'\n    self.assertEqual(get_longest_non_repeat_v1(string), (6, 'sjrgap'))"}, "test_get_longest_non_repeat_v2": {"args": ["self"], "min_max_lineno": {"min_lineno": 194, "max_lineno": 209}, "calls": ["test_array.TestLongestNonRepeat.assertEqual", "algorithms.arrays.get_longest_non_repeat_v2"], "source_code": "def test_get_longest_non_repeat_v2(self):\n    string = 'abcabcbb'\n    self.assertEqual(get_longest_non_repeat_v2(string), (3, 'abc'))\n    string = 'bbbbb'\n    self.assertEqual(get_longest_non_repeat_v2(string), (1, 'b'))\n    string = 'pwwkew'\n    self.assertEqual(get_longest_non_repeat_v2(string), (3, 'wke'))\n    string = 'dvdf'\n    self.assertEqual(get_longest_non_repeat_v2(string), (3, 'vdf'))\n    string = 'asjrgapa'\n    self.assertEqual(get_longest_non_repeat_v2(string), (6, 'sjrgap'))"}}}, "TestMaxOnesIndex": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 211, "max_lineno": 221}, "methods": {"test_max_ones_index": {"args": ["self"], "min_max_lineno": {"min_lineno": 213, "max_lineno": 221}, "calls": ["test_array.TestMaxOnesIndex.assertEqual", "algorithms.arrays.max_ones_index"], "source_code": "def test_max_ones_index(self):\n    self.assertEqual(9, max_ones_index([1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1]))\n    self.assertEqual(3, max_ones_index([1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1]))\n    self.assertEqual(-1, max_ones_index([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))"}}}, "TestMergeInterval": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 223, "max_lineno": 240}, "methods": {"test_merge": {"args": ["self"], "min_max_lineno": {"min_lineno": 225, "max_lineno": 232}, "calls": ["algorithms.arrays.Interval.merge", "test_array.TestMergeInterval.assertEqual", "algorithms.arrays.Interval"], "store_vars_calls": {"merged_intervals": "Interval.merge"}, "source_code": "def test_merge(self):\n    interval_list = [[1, 3], [2, 6], [8, 10], [15, 18]]\n    intervals = [Interval(i[0], i[1]) for i in interval_list]\n    merged_intervals = Interval.merge(intervals)\n    self.assertEqual(merged_intervals, [Interval(1, 6), Interval(8, 10), Interval(15, 18)])"}, "test_merge_intervals": {"args": ["self"], "min_max_lineno": {"min_lineno": 234, "max_lineno": 240}, "calls": ["algorithms.arrays.merge_intervals", "test_array.TestMergeInterval.assertEqual"], "store_vars_calls": {"merged_intervals": "merge_intervals"}, "source_code": "def test_merge_intervals(self):\n    interval_list = [[1, 3], [2, 6], [8, 10], [15, 18]]\n    merged_intervals = merge_intervals(interval_list)\n    self.assertEqual(merged_intervals, [[1, 6], [8, 10], [15, 18]])"}}}, "TestMissingRanges": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 243, "max_lineno": 255}, "methods": {"test_missing_ranges": {"args": ["self"], "min_max_lineno": {"min_lineno": 245, "max_lineno": 255}, "calls": ["test_array.TestMissingRanges.assertListEqual", "algorithms.arrays.missing_ranges"], "source_code": "def test_missing_ranges(self):\n    arr = [3, 5, 10, 11, 12, 15, 19]\n    self.assertListEqual(missing_ranges(arr, 0, 20), [(0, 2), (4, 4), (6, 9), (13, 14), (16, 18), (20, 20)])\n    self.assertListEqual(missing_ranges(arr, 6, 100), [(6, 9), (13, 14), (16, 18), (20, 100)])"}}}, "TestMoveZeros": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 257, "max_lineno": 267}, "methods": {"test_move_zeros": {"args": ["self"], "min_max_lineno": {"min_lineno": 259, "max_lineno": 267}, "calls": ["test_array.TestMoveZeros.assertListEqual", "algorithms.arrays.move_zeros"], "source_code": "def test_move_zeros(self):\n    self.assertListEqual(move_zeros([False, 1, 0, 1, 2, 0, 1, 3, 'a']), [False, 1, 1, 2, 1, 3, 'a', 0, 0])\n    self.assertListEqual(move_zeros([0, 34, 'rahul', [], None, 0, True, 0]), [34, 'rahul', [], None, True, 0, 0, 0])"}}}, "TestPlusOne": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 269, "max_lineno": 300}, "methods": {"test_plus_one_v1": {"args": ["self"], "min_max_lineno": {"min_lineno": 271, "max_lineno": 280}, "calls": ["test_array.TestPlusOne.assertListEqual", "algorithms.arrays.plus_one_v1"], "source_code": "def test_plus_one_v1(self):\n    self.assertListEqual(plus_one_v1([0]), [1])\n    self.assertListEqual(plus_one_v1([9]), [1, 0])\n    self.assertListEqual(plus_one_v1([1, 0, 9]), [1, 1, 0])\n    self.assertListEqual(plus_one_v1([9, 9, 8, 0, 0, 9]), [9, 9, 8, 0, 1, 0])\n    self.assertListEqual(plus_one_v1([9, 9, 9, 9]), [1, 0, 0, 0, 0])"}, "test_plus_one_v2": {"args": ["self"], "min_max_lineno": {"min_lineno": 281, "max_lineno": 290}, "calls": ["test_array.TestPlusOne.assertListEqual", "algorithms.arrays.plus_one_v2"], "source_code": "def test_plus_one_v2(self):\n    self.assertListEqual(plus_one_v2([0]), [1])\n    self.assertListEqual(plus_one_v2([9]), [1, 0])\n    self.assertListEqual(plus_one_v2([1, 0, 9]), [1, 1, 0])\n    self.assertListEqual(plus_one_v2([9, 9, 8, 0, 0, 9]), [9, 9, 8, 0, 1, 0])\n    self.assertListEqual(plus_one_v2([9, 9, 9, 9]), [1, 0, 0, 0, 0])"}, "test_plus_one_v3": {"args": ["self"], "min_max_lineno": {"min_lineno": 291, "max_lineno": 300}, "calls": ["test_array.TestPlusOne.assertListEqual", "algorithms.arrays.plus_one_v3"], "source_code": "def test_plus_one_v3(self):\n    self.assertListEqual(plus_one_v3([0]), [1])\n    self.assertListEqual(plus_one_v3([9]), [1, 0])\n    self.assertListEqual(plus_one_v3([1, 0, 9]), [1, 1, 0])\n    self.assertListEqual(plus_one_v3([9, 9, 8, 0, 0, 9]), [9, 9, 8, 0, 1, 0])\n    self.assertListEqual(plus_one_v3([9, 9, 9, 9]), [1, 0, 0, 0, 0])"}}}, "TestRotateArray": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 302, "max_lineno": 333}, "methods": {"test_rotate_v1": {"args": ["self"], "min_max_lineno": {"min_lineno": 304, "max_lineno": 313}, "calls": ["test_array.TestRotateArray.assertListEqual", "algorithms.arrays.rotate_v1"], "source_code": "def test_rotate_v1(self):\n    self.assertListEqual(rotate_v1([1, 2, 3, 4, 5, 6, 7], k=3), [5, 6, 7, 1, 2, 3, 4])\n    self.assertListEqual(rotate_v1([1, 2, 3, 4, 5, 6, 7], k=1), [7, 1, 2, 3, 4, 5, 6])\n    self.assertListEqual(rotate_v1([1, 2, 3, 4, 5, 6, 7], k=7), [1, 2, 3, 4, 5, 6, 7])\n    self.assertListEqual(rotate_v1([1, 2], k=111), [2, 1])"}, "test_rotate_v2": {"args": ["self"], "min_max_lineno": {"min_lineno": 314, "max_lineno": 323}, "calls": ["test_array.TestRotateArray.assertListEqual", "algorithms.arrays.rotate_v2"], "source_code": "def test_rotate_v2(self):\n    self.assertListEqual(rotate_v2([1, 2, 3, 4, 5, 6, 7], k=3), [5, 6, 7, 1, 2, 3, 4])\n    self.assertListEqual(rotate_v2([1, 2, 3, 4, 5, 6, 7], k=1), [7, 1, 2, 3, 4, 5, 6])\n    self.assertListEqual(rotate_v2([1, 2, 3, 4, 5, 6, 7], k=7), [1, 2, 3, 4, 5, 6, 7])\n    self.assertListEqual(rotate_v2([1, 2], k=111), [2, 1])"}, "test_rotate_v3": {"args": ["self"], "min_max_lineno": {"min_lineno": 324, "max_lineno": 333}, "calls": ["test_array.TestRotateArray.assertListEqual", "algorithms.arrays.rotate_v3"], "source_code": "def test_rotate_v3(self):\n    self.assertListEqual(rotate_v3([1, 2, 3, 4, 5, 6, 7], k=3), [5, 6, 7, 1, 2, 3, 4])\n    self.assertListEqual(rotate_v3([1, 2, 3, 4, 5, 6, 7], k=1), [7, 1, 2, 3, 4, 5, 6])\n    self.assertListEqual(rotate_v3([1, 2, 3, 4, 5, 6, 7], k=7), [1, 2, 3, 4, 5, 6, 7])\n    self.assertListEqual(rotate_v3([1, 2], k=111), [2, 1])"}}}, "TestSummaryRanges": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 335, "max_lineno": 345}, "methods": {"test_summarize_ranges": {"args": ["self"], "min_max_lineno": {"min_lineno": 337, "max_lineno": 345}, "calls": ["test_array.TestSummaryRanges.assertListEqual", "algorithms.arrays.summarize_ranges"], "source_code": "def test_summarize_ranges(self):\n    self.assertListEqual(summarize_ranges([0, 1, 2, 4, 5, 7]), [(0, 2), (4, 5), (7, 7)])\n    self.assertListEqual(summarize_ranges([-5, -4, -3, 1, 2, 4, 5, 6]), [(-5, -3), (1, 2), (4, 6)])\n    self.assertListEqual(summarize_ranges([-2, -1, 0, 1, 2]), [(-2, 2)])"}}}, "TestThreeSum": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 347, "max_lineno": 356}, "methods": {"test_three_sum": {"args": ["self"], "min_max_lineno": {"min_lineno": 349, "max_lineno": 356}, "calls": ["test_array.TestThreeSum.assertSetEqual", "algorithms.arrays.three_sum"], "source_code": "def test_three_sum(self):\n    self.assertSetEqual(three_sum([-1, 0, 1, 2, -1, -4]), {(-1, 0, 1), (-1, -1, 2)})\n    self.assertSetEqual(three_sum([-1, 3, 1, 2, -1, -4, -2]), {(-4, 1, 3), (-2, -1, 3), (-1, -1, 2)})"}}}, "TestTwoSum": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 358, "max_lineno": 366}, "methods": {"test_two_sum": {"args": ["self"], "min_max_lineno": {"min_lineno": 360, "max_lineno": 366}, "calls": ["test_array.TestTwoSum.assertTupleEqual", "test_array.TestTwoSum.assertIsNone", "algorithms.arrays.two_sum"], "source_code": "def test_two_sum(self):\n    self.assertTupleEqual((0, 2), two_sum([2, 11, 7, 9], target=9))\n    self.assertTupleEqual((0, 3), two_sum([-3, 5, 2, 3, 8, -9], target=0))\n    self.assertIsNone(two_sum([-3, 5, 2, 3, 8, -9], target=6))"}}}, "TestTrimmean": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 368, "max_lineno": 375}, "methods": {"test_trimmean": {"args": ["self"], "min_max_lineno": {"min_lineno": 370, "max_lineno": 375}, "calls": ["test_array.TestTrimmean.assertEqual", "algorithms.arrays.trimmean"], "source_code": "def test_trimmean(self):\n    self.assertEqual(trimmean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20), 5.5)\n    self.assertEqual(trimmean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 20), 6.0)"}}}, "TestTop1": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 377, "max_lineno": 383}, "methods": {"test_top_1": {"args": ["self"], "min_max_lineno": {"min_lineno": 379, "max_lineno": 383}, "calls": ["test_array.TestTop1.assertListEqual", "algorithms.arrays.top_1"], "source_code": "def test_top_1(self):\n    self.assertListEqual(top_1([1, 1, 2, 2, 3]), [1, 2])\n    self.assertListEqual(top_1([1, 2, 3, 324, 234, 23, 23, 1, 23, 23]), [23])"}}}, "TestLimit": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 385, "max_lineno": 392}, "methods": {"test_limit": {"args": ["self"], "min_max_lineno": {"min_lineno": 387, "max_lineno": 392}, "calls": ["test_array.TestLimit.assertListEqual", "algorithms.arrays.limit"], "source_code": "def test_limit(self):\n    self.assertListEqual(limit([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n    self.assertListEqual(limit([1, 2, 3, 4, 5], 2, 4), [2, 3, 4])\n    self.assertListEqual(limit([1, 2, 3, 4, 5], 2), [2, 3, 4, 5])\n    self.assertListEqual(limit([1, 2, 3, 4, 5], None, 4), [1, 2, 3, 4])"}}}, "TestNSum": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 394, "max_lineno": 427}, "methods": {"test_n_sum": {"args": ["self"], "min_max_lineno": {"min_lineno": 396, "max_lineno": 427}, "calls": ["test_array.TestNSum.assertEqual", "algorithms.arrays.n_sum", "sorted"], "source_code": "def test_n_sum(self):\n    self.assertEqual(n_sum(2, [-3, 5, 2, 3, 8, -9], 6), [])\n    self.assertEqual(n_sum(3, [-5, -4, -3, -2, -1, 0, 1, 2, 3], 0), sorted([[-5, 2, 3], [-2, 0, 2], [-4, 1, 3], [-3, 1, 2], [-1, 0, 1], [-2, -1, 3], [-3, 0, 3]]))\n    self.assertEqual(n_sum(3, [-1, 0, 1, 2, -1, -4], 0), sorted([[-1, -1, 2], [-1, 0, 1]]))\n    self.assertEqual(n_sum(4, [1, 0, -1, 0, -2, 2], 0), sorted([[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]))\n    self.assertEqual(n_sum(4, [7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 4, -3, -2], 10), sorted([[-6, 2, 7, 7], [-6, 3, 6, 7], [-6, 4, 5, 7], [-6, 4, 6, 6], [-5, 1, 7, 7], [-5, 2, 6, 7], [-5, 3, 5, 7], [-5, 3, 6, 6], [-5, 4, 4, 7], [-5, 4, 5, 6], [-4, 0, 7, 7], [-4, 1, 6, 7], [-4, 2, 5, 7], [-4, 2, 6, 6], [-4, 3, 4, 7], [-4, 3, 5, 6], [-4, 4, 4, 6], [-3, -1, 7, 7], [-3, 0, 6, 7], [-3, 1, 5, 7], [-3, 1, 6, 6], [-3, 2, 4, 7], [-3, 2, 5, 6], [-3, 3, 4, 6], [-3, 4, 4, 5], [-2, -2, 7, 7], [-2, -1, 6, 7], [-2, 0, 5, 7], [-2, 0, 6, 6], [-2, 1, 4, 7], [-2, 1, 5, 6], [-2, 2, 3, 7], [-2, 2, 4, 6], [-2, 3, 4, 5], [-1, 0, 4, 7], [-1, 0, 5, 6], [-1, 1, 3, 7], [-1, 1, 4, 6], [-1, 2, 3, 6], [-1, 2, 4, 5], [-1, 3, 4, 4], [0, 1, 2, 7], [0, 1, 3, 6], [0, 1, 4, 5], [0, 2, 3, 5], [0, 2, 4, 4], [1, 2, 3, 4]]))\n    self.assertEqual(n_sum(2, [[-3, 0], [-2, 1], [2, 2], [3, 3], [8, 4], [-9, 5]], 0, sum_closure=lambda a, b: a[0] + b[0]), [[[-3, 0], [3, 3]], [[-2, 1], [2, 2]]])\n    self.assertEqual(n_sum(2, [[-3, 0], [-2, 1], [2, 2], [3, 3], [8, 4], [-9, 5]], [0, 3], sum_closure=lambda a, b: [a[0] + b[0], a[1] + b[1]], same_closure=lambda a, b: a[0] == b[0] and a[1] == b[1]), [[[-3, 0], [3, 3]], [[-2, 1], [2, 2]]])\n    self.assertEqual(n_sum(2, [[-3, 0], [-2, 1], [2, 2], [3, 3], [8, 4], [-9, 5]], -5, sum_closure=lambda a, b: [a[0] + b[1], a[1] + b[0]], compare_closure=lambda a, b: -1 if a[0] < b else 1 if a[0] > b else 0), [[[-9, 5], [8, 4]]])"}}}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_array.unittest.main", "type": "script"}, "is_test": true}