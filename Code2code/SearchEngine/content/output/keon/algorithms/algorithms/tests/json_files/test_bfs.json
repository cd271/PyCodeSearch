{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/tests/test_bfs.py", "fileNameBase": "test_bfs", "extension": "py"}, "dependencies": [{"from_module": "algorithms.bfs", "import": "count_islands", "type": "external", "type_element": "module"}, {"from_module": "algorithms.bfs", "import": "maze_search", "type": "external", "type_element": "module"}, {"from_module": "algorithms.bfs", "import": "ladder_length", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestCountIslands": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 25}, "methods": {"test_count_islands": {"args": ["self"], "min_max_lineno": {"min_lineno": 12, "max_lineno": 25}, "calls": ["test_bfs.TestCountIslands.assertEqual", "algorithms.bfs.count_islands"], "source_code": "def test_count_islands(self):\n    grid_1 = [[1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0]]\n    self.assertEqual(1, count_islands(grid_1))\n    grid_2 = [[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]]\n    self.assertEqual(3, count_islands(grid_2))\n    grid_3 = [[1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0]]\n    self.assertEqual(3, count_islands(grid_3))\n    grid_4 = [[1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0]]\n    self.assertEqual(5, count_islands(grid_4))"}}}, "TestMazeSearch": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 35}, "methods": {"test_maze_search": {"args": ["self"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 35}, "calls": ["test_bfs.TestMazeSearch.assertEqual", "algorithms.bfs.maze_search"], "source_code": "def test_maze_search(self):\n    grid_1 = [[1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1]]\n    self.assertEqual(14, maze_search(grid_1))\n    grid_2 = [[1, 0, 0], [0, 1, 1], [0, 1, 1]]\n    self.assertEqual(-1, maze_search(grid_2))"}}}, "TestWordLadder": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 37, "max_lineno": 59}, "methods": {"test_ladder_length": {"args": ["self"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 59}, "calls": ["test_bfs.TestWordLadder.assertEqual", "algorithms.bfs.ladder_length"], "source_code": "def test_ladder_length(self):\n    self.assertEqual(5, ladder_length('hit', 'cog', ['hot', 'dot', 'dog', 'lot', 'log']))\n    self.assertEqual(5, ladder_length('pick', 'tank', ['tock', 'tick', 'sank', 'sink', 'sick']))\n    self.assertEqual(1, ladder_length('live', 'life', ['hoho', 'luck']))\n    self.assertEqual(0, ladder_length('ate', 'ate', []))\n    self.assertEqual(-1, ladder_length('rahul', 'coder', ['blahh', 'blhah']))"}}}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_bfs.unittest.main", "type": "script"}, "is_test": true}