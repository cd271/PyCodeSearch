{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/tests/test_graph.py", "fileNameBase": "test_graph", "extension": "py"}, "dependencies": [{"from_module": "algorithms.graph", "import": "Tarjan", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "check_bipartite", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph.dijkstra", "import": "Dijkstra", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "ford_fulkerson", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "edmonds_karp", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "dinic", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "maximum_flow_bfs", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "maximum_flow_dfs", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "all_pairs_shortest_path", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "bellman_ford", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "count_connected_number_of_component", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "prims_minimum_spanning", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "check_digraph_strongly_connected", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "cycle_detection", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "find_path", "type": "external", "type_element": "module"}, {"from_module": "algorithms.graph", "import": "path_between_two_vertices_in_digraph", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestTarjan": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 62}, "methods": {"test_tarjan_example_1": {"args": ["self"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 45}, "calls": ["algorithms.graph.Tarjan", "test_graph.TestTarjan.assertEqual"], "store_vars_calls": {"g": "Tarjan"}, "source_code": "def test_tarjan_example_1(self):\n    example = {'A': ['B'], 'B': ['C', 'E', 'F'], 'C': ['D', 'G'], 'D': ['C', 'H'], 'E': ['A', 'F'], 'F': ['G'], 'G': ['F'], 'H': ['D', 'G']}\n    g = Tarjan(example)\n    self.assertEqual(g.sccs, [['F', 'G'], ['C', 'D', 'H'], ['A', 'B', 'E']])"}, "test_tarjan_example_2": {"args": ["self"], "min_max_lineno": {"min_lineno": 46, "max_lineno": 62}, "calls": ["algorithms.graph.Tarjan", "test_graph.TestTarjan.assertEqual"], "store_vars_calls": {"g": "Tarjan"}, "source_code": "def test_tarjan_example_2(self):\n    example = {'A': ['E'], 'B': ['A'], 'C': ['B', 'D'], 'D': ['C'], 'E': ['B'], 'F': ['B', 'E', 'G'], 'G': ['F', 'C'], 'H': ['G', 'H', 'D']}\n    g = Tarjan(example)\n    self.assertEqual(g.sccs, [['A', 'B', 'E'], ['C', 'D'], ['F', 'G'], ['H']])"}}}, "TestCheckBipartite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 64, "max_lineno": 72}, "methods": {"test_check_bipartite": {"args": ["self"], "min_max_lineno": {"min_lineno": 65, "max_lineno": 72}, "calls": ["test_graph.TestCheckBipartite.assertEqual", "algorithms.graph.check_bipartite"], "source_code": "def test_check_bipartite(self):\n    adj_list_1 = [[0, 0, 1], [0, 0, 1], [1, 1, 0]]\n    self.assertEqual(True, check_bipartite(adj_list_1))\n    adj_list_2 = [[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0]]\n    self.assertEqual(True, check_bipartite(adj_list_2))\n    adj_list_3 = [[0, 1, 0, 0], [1, 0, 1, 1], [0, 1, 0, 1], [0, 1, 1, 0]]\n    self.assertEqual(False, check_bipartite(adj_list_3))"}}}, "TestDijkstra": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 74, "max_lineno": 88}, "methods": {"test_dijkstra": {"args": ["self"], "min_max_lineno": {"min_lineno": 75, "max_lineno": 88}, "calls": ["algorithms.graph.dijkstra.Dijkstra", "test_graph.TestDijkstra.assertEqual", "algorithms.graph.dijkstra.Dijkstra.dijkstra"], "store_vars_calls": {"g": "Dijkstra"}, "source_code": "def test_dijkstra(self):\n    g = Dijkstra(9)\n    g.graph = [[0, 4, 0, 0, 0, 0, 0, 8, 0], [4, 0, 8, 0, 0, 0, 0, 11, 0], [0, 8, 0, 7, 0, 4, 0, 0, 2], [0, 0, 7, 0, 9, 14, 0, 0, 0], [0, 0, 0, 9, 0, 10, 0, 0, 0], [0, 0, 4, 14, 10, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 0, 1, 6], [8, 11, 0, 0, 0, 0, 1, 0, 7], [0, 0, 2, 0, 0, 0, 6, 7, 0]]\n    self.assertEqual(g.dijkstra(0), [0, 4, 12, 19, 21, 11, 9, 8, 14])"}}}, "TestMaximumFlow": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 90, "max_lineno": 132}, "methods": {"test_ford_fulkerson": {"args": ["self"], "min_max_lineno": {"min_lineno": 97, "max_lineno": 108}, "calls": ["test_graph.TestMaximumFlow.assertEqual", "algorithms.graph.ford_fulkerson"], "source_code": "def test_ford_fulkerson(self):\n    capacity = [[0, 10, 10, 0, 0, 0, 0], [0, 0, 2, 0, 4, 8, 0], [0, 0, 0, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 10], [0, 0, 0, 0, 6, 0, 10], [0, 0, 0, 0, 0, 0, 0]]\n    self.assertEqual(19, ford_fulkerson(capacity, 0, 6))"}, "test_edmonds_karp": {"args": ["self"], "min_max_lineno": {"min_lineno": 109, "max_lineno": 120}, "calls": ["test_graph.TestMaximumFlow.assertEqual", "algorithms.graph.edmonds_karp"], "source_code": "def test_edmonds_karp(self):\n    capacity = [[0, 10, 10, 0, 0, 0, 0], [0, 0, 2, 0, 4, 8, 0], [0, 0, 0, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 10], [0, 0, 0, 0, 6, 0, 10], [0, 0, 0, 0, 0, 0, 0]]\n    self.assertEqual(19, edmonds_karp(capacity, 0, 6))"}, "dinic": {"args": ["self"], "min_max_lineno": {"min_lineno": 121, "max_lineno": 132}, "calls": ["test_graph.TestMaximumFlow.assertEqual", "algorithms.graph.dinic"], "source_code": "def dinic(self):\n    capacity = [[0, 10, 10, 0, 0, 0, 0], [0, 0, 2, 0, 4, 8, 0], [0, 0, 0, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 10], [0, 0, 0, 0, 6, 0, 10], [0, 0, 0, 0, 0, 0, 0]]\n    self.assertEqual(19, dinic(capacity, 0, 6))"}}}, "TestMaximum_Flow_Bfs": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 134, "max_lineno": 153}, "methods": {"test_maximum_flow_bfs": {"args": ["self"], "min_max_lineno": {"min_lineno": 141, "max_lineno": 153}, "calls": ["algorithms.graph.maximum_flow_bfs", "test_graph.TestMaximum_Flow_Bfs.assertEqual"], "store_vars_calls": {"maximum_flow": "maximum_flow_bfs"}, "source_code": "def test_maximum_flow_bfs(self):\n    graph = [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]]\n    maximum_flow = maximum_flow_bfs(graph)\n    self.assertEqual(maximum_flow, 23)"}}}, "TestMaximum_Flow_Dfs": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 155, "max_lineno": 174}, "methods": {"test_maximum_flow_dfs": {"args": ["self"], "min_max_lineno": {"min_lineno": 162, "max_lineno": 174}, "calls": ["algorithms.graph.maximum_flow_dfs", "test_graph.TestMaximum_Flow_Dfs.assertEqual"], "store_vars_calls": {"maximum_flow": "maximum_flow_dfs"}, "source_code": "def test_maximum_flow_dfs(self):\n    graph = [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]]\n    maximum_flow = maximum_flow_dfs(graph)\n    self.assertEqual(maximum_flow, 23)"}}}, "TestAll_Pairs_Shortest_Path": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 176, "max_lineno": 194}, "methods": {"test_all_pairs_shortest_path": {"args": ["self"], "min_max_lineno": {"min_lineno": 177, "max_lineno": 194}, "calls": ["algorithms.graph.all_pairs_shortest_path", "test_graph.TestAll_Pairs_Shortest_Path.assertEqual"], "store_vars_calls": {"result": "all_pairs_shortest_path"}, "source_code": "def test_all_pairs_shortest_path(self):\n    graph = [[0, 0.1, 0.101, 0.142, 0.277], [0.465, 0, 0.191, 0.192, 0.587], [0.245, 0.554, 0, 0.333, 0.931], [1.032, 0.668, 0.656, 0, 0.151], [0.867, 0.119, 0.352, 0.398, 0]]\n    result = all_pairs_shortest_path(graph)\n    self.assertEqual(result, [[0, 0.1, 0.101, 0.142, 0.277], [0.436, 0, 0.191, 0.192, 0.34299999999999997], [0.245, 0.345, 0, 0.333, 0.484], [0.706, 0.27, 0.46099999999999997, 0, 0.151], [0.5549999999999999, 0.119, 0.31, 0.311, 0]])"}}}, "TestBellmanFord": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 197, "max_lineno": 215}, "methods": {"test_bellman_ford": {"args": ["self"], "min_max_lineno": {"min_lineno": 198, "max_lineno": 215}, "calls": ["test_graph.TestBellmanFord.assertEqual", "algorithms.graph.bellman_ford"], "source_code": "def test_bellman_ford(self):\n    graph1 = {'a': {'b': 6, 'e': 7}, 'b': {'c': 5, 'd': -4, 'e': 8}, 'c': {'b': -2}, 'd': {'a': 2, 'c': 7}, 'e': {'b': -3}}\n    self.assertEqual(True, bellman_ford(graph1, 'a'))\n    graph2 = {'a': {'d': 3, 'e': 4}, 'b': {'a': 7, 'e': 2}, 'c': {'a': 12, 'd': 9, 'e': 11}, 'd': {'c': 5, 'e': 11}, 'e': {'a': 7, 'b': 5, 'd': 1}}\n    self.assertEqual(True, bellman_ford(graph2, 'a'))"}}}, "TestConnectedComponentInGraph": {"doc": {"short_description": "Class for testing different cases for connected components in graph", "full": "Class for testing different cases for connected components in graph"}, "extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 217, "max_lineno": 266}, "methods": {"test_count_connected_components": {"doc": {"long_description": "components\n 2----------0    1--------5      3\n |\n |\n 4\n     output = 3", "short_description": "Test Function that test the different cases of count connected"}, "args": ["self"], "min_max_lineno": {"min_lineno": 221, "max_lineno": 243}, "calls": ["algorithms.graph.count_connected_number_of_component.count_components", "test_graph.TestConnectedComponentInGraph.assertEqual"], "store_vars_calls": {"result": "count_connected_number_of_component.count_components"}, "source_code": "def test_count_connected_components(self):\n    \"\"\"\n           Test Function that test the different cases of count connected\n           components\n            2----------0    1--------5      3\n            |\n            |\n            4\n                output = 3\n        \"\"\"\n    expected_result = 3\n    l = [[2], [5], [0, 4], [], [2], [1]]\n    size = 5\n    result = count_connected_number_of_component.count_components(l, size)\n    self.assertEqual(result, expected_result)"}, "test_connected_components_with_empty_graph": {"doc": {"long_description": "output : 0", "short_description": "input :"}, "args": ["self"], "min_max_lineno": {"min_lineno": 244, "max_lineno": 255}, "calls": ["algorithms.graph.count_connected_number_of_component.count_components", "test_graph.TestConnectedComponentInGraph.assertEqual"], "store_vars_calls": {"result": "count_connected_number_of_component.count_components"}, "source_code": "def test_connected_components_with_empty_graph(self):\n    \"\"\"\n            input :\n            output : 0\n        \"\"\"\n    l = [[]]\n    expected_result = 0\n    size = 0\n    result = count_connected_number_of_component.count_components(l, size)\n    self.assertEqual(result, expected_result)"}, "test_connected_components_without_edges_graph": {"doc": {"long_description": "output : 4", "short_description": "input : 0          2             3          4"}, "args": ["self"], "min_max_lineno": {"min_lineno": 256, "max_lineno": 266}, "calls": ["algorithms.graph.count_connected_number_of_component.count_components", "test_graph.TestConnectedComponentInGraph.assertEqual"], "store_vars_calls": {"result": "count_connected_number_of_component.count_components"}, "source_code": "def test_connected_components_without_edges_graph(self):\n    \"\"\"\n          input : 0          2             3          4\n          output : 4\n        \"\"\"\n    l = [[0], [], [2], [3], [4]]\n    size = 4\n    expected_result = 4\n    result = count_connected_number_of_component.count_components(l, size)\n    self.assertEqual(result, expected_result)"}}}, "PrimsMinimumSpanning": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 268, "max_lineno": 285}, "methods": {"test_prim_spanning": {"args": ["self"], "min_max_lineno": {"min_lineno": 269, "max_lineno": 285}, "calls": ["test_graph.PrimsMinimumSpanning.assertEqual", "algorithms.graph.prims_minimum_spanning"], "source_code": "def test_prim_spanning(self):\n    graph1 = {1: [[3, 2], [8, 3]], 2: [[3, 1], [5, 4]], 3: [[8, 1], [2, 4], [4, 5]], 4: [[5, 2], [2, 3], [6, 5]], 5: [[4, 3], [6, 4]]}\n    self.assertEqual(14, prims_minimum_spanning(graph1))\n    graph2 = {1: [[7, 2], [6, 4]], 2: [[7, 1], [9, 4], [6, 3]], 3: [[8, 4], [6, 2]], 4: [[6, 1], [9, 2], [8, 3]]}\n    self.assertEqual(19, prims_minimum_spanning(graph2))"}}}, "TestDigraphStronglyConnected": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 286, "max_lineno": 302}, "methods": {"test_digraph_strongly_connected": {"args": ["self"], "min_max_lineno": {"min_lineno": 287, "max_lineno": 302}, "calls": ["algorithms.graph.check_digraph_strongly_connected.Graph", "algorithms.graph.check_digraph_strongly_connected.Graph.add_edge", "test_graph.TestDigraphStronglyConnected.assertTrue", "algorithms.graph.check_digraph_strongly_connected.Graph.add_edge", "test_graph.TestDigraphStronglyConnected.assertFalse", "algorithms.graph.check_digraph_strongly_connected.Graph.is_strongly_connected", "algorithms.graph.check_digraph_strongly_connected.Graph.is_strongly_connected"], "store_vars_calls": {"g1": "check_digraph_strongly_connected.Graph", "g2": "check_digraph_strongly_connected.Graph"}, "source_code": "def test_digraph_strongly_connected(self):\n    g1 = check_digraph_strongly_connected.Graph(5)\n    g1.add_edge(0, 1)\n    g1.add_edge(1, 2)\n    g1.add_edge(2, 3)\n    g1.add_edge(3, 0)\n    g1.add_edge(2, 4)\n    g1.add_edge(4, 2)\n    self.assertTrue(g1.is_strongly_connected())\n    g2 = check_digraph_strongly_connected.Graph(4)\n    g2.add_edge(0, 1)\n    g2.add_edge(1, 2)\n    g2.add_edge(2, 3)\n    self.assertFalse(g2.is_strongly_connected())"}}}, "TestCycleDetection": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 303, "max_lineno": 321}, "methods": {"test_cycle_detection_with_cycle": {"args": ["self"], "min_max_lineno": {"min_lineno": 304, "max_lineno": 312}, "calls": ["test_graph.TestCycleDetection.assertTrue", "algorithms.graph.cycle_detection.contains_cycle"], "source_code": "def test_cycle_detection_with_cycle(self):\n    graph = {'A': ['B', 'C'], 'B': ['D'], 'C': ['F'], 'D': ['E', 'F'], 'E': ['B'], 'F': []}\n    self.assertTrue(cycle_detection.contains_cycle(graph))"}, "test_cycle_detection_with_no_cycle": {"args": ["self"], "min_max_lineno": {"min_lineno": 313, "max_lineno": 321}, "calls": ["test_graph.TestCycleDetection.assertFalse", "algorithms.graph.cycle_detection.contains_cycle"], "source_code": "def test_cycle_detection_with_no_cycle(self):\n    graph = {'A': ['B', 'C'], 'B': ['D', 'E'], 'C': ['F'], 'D': ['E'], 'E': [], 'F': []}\n    self.assertFalse(cycle_detection.contains_cycle(graph))"}}}, "TestFindPath": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 322, "max_lineno": 337}, "methods": {"test_find_all_paths": {"args": ["self"], "min_max_lineno": {"min_lineno": 323, "max_lineno": 337}, "calls": ["algorithms.graph.find_path.find_all_path", "print", "test_graph.TestFindPath.assertEqual", "sorted"], "store_vars_calls": {"paths": "find_path.find_all_path"}, "source_code": "def test_find_all_paths(self):\n    graph = {'A': ['B', 'C'], 'B': ['C', 'D'], 'C': ['D', 'F'], 'D': ['C'], 'E': ['F'], 'F': ['C']}\n    paths = find_path.find_all_path(graph, 'A', 'F')\n    print(paths)\n    self.assertEqual(sorted(paths), sorted([['A', 'C', 'F'], ['A', 'B', 'C', 'F'], ['A', 'B', 'D', 'C', 'F']]))"}}}, "TestPathBetweenTwoVertices": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 339, "max_lineno": 351}, "methods": {"test_node_is_reachable": {"args": ["self"], "min_max_lineno": {"min_lineno": 340, "max_lineno": 351}, "calls": ["algorithms.graph.path_between_two_vertices_in_digraph.Graph", "algorithms.graph.path_between_two_vertices_in_digraph.Graph.add_edge", "test_graph.TestPathBetweenTwoVertices.assertTrue", "test_graph.TestPathBetweenTwoVertices.assertFalse", "algorithms.graph.path_between_two_vertices_in_digraph.Graph.is_reachable"], "store_vars_calls": {"g": "path_between_two_vertices_in_digraph.Graph"}, "source_code": "def test_node_is_reachable(self):\n    g = path_between_two_vertices_in_digraph.Graph(4)\n    g.add_edge(0, 1)\n    g.add_edge(0, 2)\n    g.add_edge(1, 2)\n    g.add_edge(2, 0)\n    g.add_edge(2, 3)\n    g.add_edge(3, 3)\n    self.assertTrue(g.is_reachable(1, 3))\n    self.assertFalse(g.is_reachable(3, 1))"}}}}, "is_test": true}