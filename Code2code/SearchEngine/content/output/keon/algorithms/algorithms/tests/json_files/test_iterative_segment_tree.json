{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/tests/test_iterative_segment_tree.py", "fileNameBase": "test_iterative_segment_tree", "extension": "py"}, "dependencies": [{"from_module": "algorithms.tree.segment_tree.iterative_segment_tree", "import": "SegmentTree", "type": "external", "type_element": "module"}, {"from_module": "functools", "import": "reduce", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestSegmentTree": {"doc": {"short_description": "Test for the Iterative Segment Tree data structure", "full": "Test for the Iterative Segment Tree data structure"}, "extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 100}, "methods": {"test_segment_tree_creation": {"args": ["self"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 32}, "calls": ["algorithms.tree.segment_tree.iterative_segment_tree.SegmentTree", "test_iterative_segment_tree.TestSegmentTree.assertEqual"], "store_vars_calls": {"max_segment_tree": "SegmentTree", "min_segment_tree": "SegmentTree", "sum_segment_tree": "SegmentTree", "gcd_segment_tree": "SegmentTree"}, "source_code": "def test_segment_tree_creation(self):\n    arr = [2, 4, 3, 6, 8, 9, 3]\n    max_segment_tree = SegmentTree(arr, max)\n    min_segment_tree = SegmentTree(arr, min)\n    sum_segment_tree = SegmentTree(arr, lambda a, b: a + b)\n    gcd_segment_tree = SegmentTree(arr, gcd)\n    self.assertEqual(max_segment_tree.tree, [None, 9, 8, 9, 4, 8, 9, 2, 4, 3, 6, 8, 9, 3])\n    self.assertEqual(min_segment_tree.tree, [None, 2, 3, 2, 3, 6, 3, 2, 4, 3, 6, 8, 9, 3])\n    self.assertEqual(sum_segment_tree.tree, [None, 35, 21, 14, 7, 14, 12, 2, 4, 3, 6, 8, 9, 3])\n    self.assertEqual(gcd_segment_tree.tree, [None, 1, 1, 1, 1, 2, 3, 2, 4, 3, 6, 8, 9, 3])"}, "test_max_segment_tree": {"args": ["self"], "min_max_lineno": {"min_lineno": 33, "max_lineno": 36}, "calls": ["test_iterative_segment_tree.TestSegmentTree.__test_all_segments"], "source_code": "def test_max_segment_tree(self):\n    arr = [-1, 1, 10, 2, 9, -3, 8, 4, 7, 5, 6, 0]\n    self.__test_all_segments(arr, max)"}, "test_min_segment_tree": {"args": ["self"], "min_max_lineno": {"min_lineno": 37, "max_lineno": 40}, "calls": ["test_iterative_segment_tree.TestSegmentTree.__test_all_segments"], "source_code": "def test_min_segment_tree(self):\n    arr = [1, 10, -2, 9, -3, 8, 4, -7, 5, 6, 11, -12]\n    self.__test_all_segments(arr, min)"}, "test_sum_segment_tree": {"args": ["self"], "min_max_lineno": {"min_lineno": 41, "max_lineno": 44}, "calls": ["test_iterative_segment_tree.TestSegmentTree.__test_all_segments"], "source_code": "def test_sum_segment_tree(self):\n    arr = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, -11, -12]\n    self.__test_all_segments(arr, lambda a, b: a + b)"}, "test_gcd_segment_tree": {"args": ["self"], "min_max_lineno": {"min_lineno": 45, "max_lineno": 48}, "calls": ["test_iterative_segment_tree.TestSegmentTree.__test_all_segments"], "source_code": "def test_gcd_segment_tree(self):\n    arr = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 11, 12, 14]\n    self.__test_all_segments(arr, gcd)"}, "test_max_segment_tree_with_updates": {"args": ["self"], "min_max_lineno": {"min_lineno": 49, "max_lineno": 54}, "calls": ["test_iterative_segment_tree.TestSegmentTree.__test_all_segments_with_updates"], "source_code": "def test_max_segment_tree_with_updates(self):\n    arr = [-1, 1, 10, 2, 9, -3, 8, 4, 7, 5, 6, 0]\n    updates = {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10, 10: 11, 11: 12}\n    self.__test_all_segments_with_updates(arr, max, updates)"}, "test_min_segment_tree_with_updates": {"args": ["self"], "min_max_lineno": {"min_lineno": 55, "max_lineno": 60}, "calls": ["test_iterative_segment_tree.TestSegmentTree.__test_all_segments_with_updates"], "source_code": "def test_min_segment_tree_with_updates(self):\n    arr = [1, 10, -2, 9, -3, 8, 4, -7, 5, 6, 11, -12]\n    updates = {0: 7, 1: 2, 2: 6, 3: -14, 4: 5, 5: 4, 6: 7, 7: -10, 8: 9, 9: 10, 10: 12, 11: 1}\n    self.__test_all_segments_with_updates(arr, min, updates)"}, "test_sum_segment_tree_with_updates": {"args": ["self"], "min_max_lineno": {"min_lineno": 61, "max_lineno": 66}, "calls": ["test_iterative_segment_tree.TestSegmentTree.__test_all_segments_with_updates"], "source_code": "def test_sum_segment_tree_with_updates(self):\n    arr = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, -11, -12]\n    updates = {0: 12, 1: 11, 2: 10, 3: 9, 4: 8, 5: 7, 6: 6, 7: 5, 8: 4, 9: 3, 10: 2, 11: 1}\n    self.__test_all_segments_with_updates(arr, lambda a, b: a + b, updates)"}, "test_gcd_segment_tree_with_updates": {"args": ["self"], "min_max_lineno": {"min_lineno": 67, "max_lineno": 72}, "calls": ["test_iterative_segment_tree.TestSegmentTree.__test_all_segments_with_updates"], "source_code": "def test_gcd_segment_tree_with_updates(self):\n    arr = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 11, 12, 14]\n    updates = {0: 4, 1: 2, 2: 3, 3: 9, 4: 21, 5: 7, 6: 4, 7: 4, 8: 2, 9: 5, 10: 17, 11: 12, 12: 3}\n    self.__test_all_segments_with_updates(arr, gcd, updates)"}, "__test_all_segments": {"doc": {"short_description": "Test all possible segments in the tree", "args": {"arr": {"description": "array to test"}, "fnc": {"description": "function of the segment tpree"}}}, "args": ["self", "arr", "fnc"], "min_max_lineno": {"min_lineno": 73, "max_lineno": 81}, "calls": ["algorithms.tree.segment_tree.iterative_segment_tree.SegmentTree", "test_iterative_segment_tree.TestSegmentTree.__test_segments_helper"], "store_vars_calls": {"segment_tree": "SegmentTree"}, "source_code": "def __test_all_segments(self, arr, fnc):\n    \"\"\"\n        Test all possible segments in the tree\n        :param arr: array to test\n        :param fnc: function of the segment tpree\n        \"\"\"\n    segment_tree = SegmentTree(arr, fnc)\n    self.__test_segments_helper(segment_tree, fnc, arr)"}, "__test_all_segments_with_updates": {"doc": {"short_description": "Test all possible segments in the tree with updates", "args": {"arr": {"description": "array to test"}, "fnc": {"description": "function of the segment tree"}, "upd": {"description": "updates to test"}}}, "args": ["self", "arr", "fnc", "upd"], "min_max_lineno": {"min_lineno": 82, "max_lineno": 94}, "calls": ["algorithms.tree.segment_tree.iterative_segment_tree.SegmentTree", "upd.items", "algorithms.tree.segment_tree.iterative_segment_tree.SegmentTree.update", "test_iterative_segment_tree.TestSegmentTree.__test_segments_helper"], "store_vars_calls": {"segment_tree": "SegmentTree"}, "source_code": "def __test_all_segments_with_updates(self, arr, fnc, upd):\n    \"\"\"\n        Test all possible segments in the tree with updates\n        :param arr: array to test\n        :param fnc: function of the segment tree\n        :param upd: updates to test\n        \"\"\"\n    segment_tree = SegmentTree(arr, fnc)\n    for (index, value) in upd.items():\n        arr[index] = value\n        segment_tree.update(index, value)\n        self.__test_segments_helper(segment_tree, fnc, arr)"}, "__test_segments_helper": {"args": ["self", "seg_tree", "fnc", "arr"], "min_max_lineno": {"min_lineno": 95, "max_lineno": 100}, "calls": ["range", "len", "functools.reduce", "test_iterative_segment_tree.TestSegmentTree.assertEqual", "seg_tree.query"], "store_vars_calls": {"range_value": "reduce"}, "source_code": "def __test_segments_helper(self, seg_tree, fnc, arr):\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            range_value = reduce(fnc, arr[i:j + 1])\n            self.assertEqual(seg_tree.query(i, j), range_value)"}}}}, "functions": {"gcd": {"args": ["a", "b"], "returns": ["gcd(b, a % b)", "a"], "min_max_lineno": {"min_lineno": 7, "max_lineno": 11}, "calls": ["test_iterative_segment_tree.gcd"], "source_code": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)"}}, "is_test": true}