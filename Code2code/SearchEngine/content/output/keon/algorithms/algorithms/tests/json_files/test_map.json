{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/tests/test_map.py", "fileNameBase": "test_map", "extension": "py"}, "dependencies": [{"from_module": "algorithms.map", "import": "HashTable", "type": "external", "type_element": "module"}, {"from_module": "algorithms.map", "import": "ResizableHashTable", "type": "external", "type_element": "module"}, {"from_module": "algorithms.map", "import": "SeparateChainingHashTable", "type": "external", "type_element": "module"}, {"from_module": "algorithms.map", "import": "word_pattern", "type": "external", "type_element": "module"}, {"from_module": "algorithms.map", "import": "is_isomorphic", "type": "external", "type_element": "module"}, {"from_module": "algorithms.map", "import": "is_anagram", "type": "external", "type_element": "module"}, {"from_module": "algorithms.map", "import": "longest_palindromic_subsequence", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestHashTable": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 98}, "methods": {"test_one_entry": {"args": ["self"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 18}, "calls": ["algorithms.map.HashTable", "algorithms.map.HashTable.put", "test_map.TestHashTable.assertEqual", "algorithms.map.HashTable.get"], "store_vars_calls": {"m": "HashTable"}, "source_code": "def test_one_entry(self):\n    m = HashTable(10)\n    m.put(1, '1')\n    self.assertEqual('1', m.get(1))"}, "test_add_entry_bigger_than_table_size": {"args": ["self"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 23}, "calls": ["algorithms.map.HashTable", "algorithms.map.HashTable.put", "test_map.TestHashTable.assertEqual", "algorithms.map.HashTable.get"], "store_vars_calls": {"m": "HashTable"}, "source_code": "def test_add_entry_bigger_than_table_size(self):\n    m = HashTable(10)\n    m.put(11, '1')\n    self.assertEqual('1', m.get(11))"}, "test_get_none_if_key_missing_and_hash_collision": {"args": ["self"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 28}, "calls": ["algorithms.map.HashTable", "algorithms.map.HashTable.put", "test_map.TestHashTable.assertEqual", "algorithms.map.HashTable.get"], "store_vars_calls": {"m": "HashTable"}, "source_code": "def test_get_none_if_key_missing_and_hash_collision(self):\n    m = HashTable(10)\n    m.put(1, '1')\n    self.assertEqual(None, m.get(11))"}, "test_two_entries_with_same_hash": {"args": ["self"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 35}, "calls": ["algorithms.map.HashTable", "algorithms.map.HashTable.put", "test_map.TestHashTable.assertEqual", "algorithms.map.HashTable.get"], "store_vars_calls": {"m": "HashTable"}, "source_code": "def test_two_entries_with_same_hash(self):\n    m = HashTable(10)\n    m.put(1, '1')\n    m.put(11, '11')\n    self.assertEqual('1', m.get(1))\n    self.assertEqual('11', m.get(11))"}, "test_get_on_full_table_does_halts": {"args": ["self"], "min_max_lineno": {"min_lineno": 36, "max_lineno": 42}, "calls": ["algorithms.map.HashTable", "range", "test_map.TestHashTable.assertEqual", "algorithms.map.HashTable.put", "algorithms.map.HashTable.get"], "store_vars_calls": {"m": "HashTable"}, "source_code": "def test_get_on_full_table_does_halts(self):\n    m = HashTable(10)\n    for i in range(10, 20):\n        m.put(i, i)\n    self.assertEqual(None, m.get(1))"}, "test_delete_key": {"args": ["self"], "min_max_lineno": {"min_lineno": 43, "max_lineno": 50}, "calls": ["algorithms.map.HashTable", "range", "algorithms.map.HashTable.del_", "test_map.TestHashTable.assertEqual", "algorithms.map.HashTable.put", "algorithms.map.HashTable.get"], "store_vars_calls": {"m": "HashTable"}, "source_code": "def test_delete_key(self):\n    m = HashTable(10)\n    for i in range(5):\n        m.put(i, i ** 2)\n    m.del_(1)\n    self.assertEqual(None, m.get(1))\n    self.assertEqual(4, m.get(2))"}, "test_delete_key_and_reassign": {"args": ["self"], "min_max_lineno": {"min_lineno": 51, "max_lineno": 57}, "calls": ["algorithms.map.HashTable", "algorithms.map.HashTable.put", "test_map.TestHashTable.assertEqual", "algorithms.map.HashTable.get"], "store_vars_calls": {"m": "HashTable"}, "source_code": "def test_delete_key_and_reassign(self):\n    m = HashTable(10)\n    m.put(1, 1)\n    del m[1]\n    m.put(1, 2)\n    self.assertEqual(2, m.get(1))"}, "test_assigning_to_full_table_throws_error": {"args": ["self"], "min_max_lineno": {"min_lineno": 58, "max_lineno": 65}, "calls": ["algorithms.map.HashTable", "algorithms.map.HashTable.put", "test_map.TestHashTable.assertRaises"], "store_vars_calls": {"m": "HashTable"}, "source_code": "def test_assigning_to_full_table_throws_error(self):\n    m = HashTable(3)\n    m.put(1, 1)\n    m.put(2, 2)\n    m.put(3, 3)\n    with self.assertRaises(ValueError):\n        m.put(4, 4)"}, "test_len_trivial": {"args": ["self"], "min_max_lineno": {"min_lineno": 66, "max_lineno": 72}, "calls": ["algorithms.map.HashTable", "test_map.TestHashTable.assertEqual", "range", "len", "algorithms.map.HashTable.put"], "store_vars_calls": {"m": "HashTable"}, "source_code": "def test_len_trivial(self):\n    m = HashTable(10)\n    self.assertEqual(0, len(m))\n    for i in range(10):\n        m.put(i, i)\n        self.assertEqual(i + 1, len(m))"}, "test_len_after_deletions": {"args": ["self"], "min_max_lineno": {"min_lineno": 73, "max_lineno": 81}, "calls": ["algorithms.map.HashTable", "algorithms.map.HashTable.put", "test_map.TestHashTable.assertEqual", "algorithms.map.HashTable.del_", "len"], "store_vars_calls": {"m": "HashTable"}, "source_code": "def test_len_after_deletions(self):\n    m = HashTable(10)\n    m.put(1, 1)\n    self.assertEqual(1, len(m))\n    m.del_(1)\n    self.assertEqual(0, len(m))\n    m.put(11, 42)\n    self.assertEqual(1, len(m))"}, "test_resizable_hash_table": {"args": ["self"], "min_max_lineno": {"min_lineno": 82, "max_lineno": 91}, "calls": ["algorithms.map.ResizableHashTable", "test_map.TestHashTable.assertEqual", "range", "algorithms.map.ResizableHashTable.put", "algorithms.map.ResizableHashTable.get"], "store_vars_calls": {"m": "ResizableHashTable"}, "source_code": "def test_resizable_hash_table(self):\n    m = ResizableHashTable()\n    self.assertEqual(ResizableHashTable.MIN_SIZE, m.size)\n    for i in range(ResizableHashTable.MIN_SIZE):\n        m.put(i, 'foo')\n    self.assertEqual(ResizableHashTable.MIN_SIZE * 2, m.size)\n    self.assertEqual('foo', m.get(1))\n    self.assertEqual('foo', m.get(3))\n    self.assertEqual('foo', m.get(ResizableHashTable.MIN_SIZE - 1))"}, "test_fill_up_the_limit": {"args": ["self"], "min_max_lineno": {"min_lineno": 92, "max_lineno": 98}, "calls": ["algorithms.map.HashTable", "range", "algorithms.map.HashTable.put", "test_map.TestHashTable.assertEqual", "algorithms.map.HashTable.get"], "store_vars_calls": {"m": "HashTable"}, "source_code": "def test_fill_up_the_limit(self):\n    m = HashTable(10)\n    for i in range(10):\n        m.put(i, i ** 2)\n    for i in range(10):\n        self.assertEqual(i ** 2, m.get(i))"}}}, "TestSeparateChainingHashTable": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 100, "max_lineno": 153}, "methods": {"test_one_entry": {"args": ["self"], "min_max_lineno": {"min_lineno": 101, "max_lineno": 105}, "calls": ["algorithms.map.SeparateChainingHashTable", "algorithms.map.SeparateChainingHashTable.put", "test_map.TestSeparateChainingHashTable.assertEqual", "algorithms.map.SeparateChainingHashTable.get"], "store_vars_calls": {"m": "SeparateChainingHashTable"}, "source_code": "def test_one_entry(self):\n    m = SeparateChainingHashTable(10)\n    m.put(1, '1')\n    self.assertEqual('1', m.get(1))"}, "test_two_entries_with_same_hash": {"args": ["self"], "min_max_lineno": {"min_lineno": 106, "max_lineno": 112}, "calls": ["algorithms.map.SeparateChainingHashTable", "algorithms.map.SeparateChainingHashTable.put", "test_map.TestSeparateChainingHashTable.assertEqual", "algorithms.map.SeparateChainingHashTable.get"], "store_vars_calls": {"m": "SeparateChainingHashTable"}, "source_code": "def test_two_entries_with_same_hash(self):\n    m = SeparateChainingHashTable(10)\n    m.put(1, '1')\n    m.put(11, '11')\n    self.assertEqual('1', m.get(1))\n    self.assertEqual('11', m.get(11))"}, "test_len_trivial": {"args": ["self"], "min_max_lineno": {"min_lineno": 113, "max_lineno": 119}, "calls": ["algorithms.map.SeparateChainingHashTable", "test_map.TestSeparateChainingHashTable.assertEqual", "range", "len", "algorithms.map.SeparateChainingHashTable.put"], "store_vars_calls": {"m": "SeparateChainingHashTable"}, "source_code": "def test_len_trivial(self):\n    m = SeparateChainingHashTable(10)\n    self.assertEqual(0, len(m))\n    for i in range(10):\n        m.put(i, i)\n        self.assertEqual(i + 1, len(m))"}, "test_len_after_deletions": {"args": ["self"], "min_max_lineno": {"min_lineno": 120, "max_lineno": 128}, "calls": ["algorithms.map.SeparateChainingHashTable", "algorithms.map.SeparateChainingHashTable.put", "test_map.TestSeparateChainingHashTable.assertEqual", "algorithms.map.SeparateChainingHashTable.del_", "len"], "store_vars_calls": {"m": "SeparateChainingHashTable"}, "source_code": "def test_len_after_deletions(self):\n    m = SeparateChainingHashTable(10)\n    m.put(1, 1)\n    self.assertEqual(1, len(m))\n    m.del_(1)\n    self.assertEqual(0, len(m))\n    m.put(11, 42)\n    self.assertEqual(1, len(m))"}, "test_delete_key": {"args": ["self"], "min_max_lineno": {"min_lineno": 129, "max_lineno": 136}, "calls": ["algorithms.map.SeparateChainingHashTable", "range", "algorithms.map.SeparateChainingHashTable.del_", "test_map.TestSeparateChainingHashTable.assertEqual", "algorithms.map.SeparateChainingHashTable.put", "algorithms.map.SeparateChainingHashTable.get"], "store_vars_calls": {"m": "SeparateChainingHashTable"}, "source_code": "def test_delete_key(self):\n    m = SeparateChainingHashTable(10)\n    for i in range(5):\n        m.put(i, i ** 2)\n    m.del_(1)\n    self.assertEqual(None, m.get(1))\n    self.assertEqual(4, m.get(2))"}, "test_delete_key_and_reassign": {"args": ["self"], "min_max_lineno": {"min_lineno": 137, "max_lineno": 143}, "calls": ["algorithms.map.SeparateChainingHashTable", "algorithms.map.SeparateChainingHashTable.put", "test_map.TestSeparateChainingHashTable.assertEqual", "algorithms.map.SeparateChainingHashTable.get"], "store_vars_calls": {"m": "SeparateChainingHashTable"}, "source_code": "def test_delete_key_and_reassign(self):\n    m = SeparateChainingHashTable(10)\n    m.put(1, 1)\n    del m[1]\n    m.put(1, 2)\n    self.assertEqual(2, m.get(1))"}, "test_add_entry_bigger_than_table_size": {"args": ["self"], "min_max_lineno": {"min_lineno": 144, "max_lineno": 148}, "calls": ["algorithms.map.SeparateChainingHashTable", "algorithms.map.SeparateChainingHashTable.put", "test_map.TestSeparateChainingHashTable.assertEqual", "algorithms.map.SeparateChainingHashTable.get"], "store_vars_calls": {"m": "SeparateChainingHashTable"}, "source_code": "def test_add_entry_bigger_than_table_size(self):\n    m = SeparateChainingHashTable(10)\n    m.put(11, '1')\n    self.assertEqual('1', m.get(11))"}, "test_get_none_if_key_missing_and_hash_collision": {"args": ["self"], "min_max_lineno": {"min_lineno": 149, "max_lineno": 153}, "calls": ["algorithms.map.SeparateChainingHashTable", "algorithms.map.SeparateChainingHashTable.put", "test_map.TestSeparateChainingHashTable.assertEqual", "algorithms.map.SeparateChainingHashTable.get"], "store_vars_calls": {"m": "SeparateChainingHashTable"}, "source_code": "def test_get_none_if_key_missing_and_hash_collision(self):\n    m = SeparateChainingHashTable(10)\n    m.put(1, '1')\n    self.assertEqual(None, m.get(11))"}}}, "TestWordPattern": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 155, "max_lineno": 161}, "methods": {"test_word_pattern": {"args": ["self"], "min_max_lineno": {"min_lineno": 156, "max_lineno": 161}, "calls": ["test_map.TestWordPattern.assertTrue", "test_map.TestWordPattern.assertFalse", "algorithms.map.word_pattern"], "source_code": "def test_word_pattern(self):\n    self.assertTrue(word_pattern('abba', 'dog cat cat dog'))\n    self.assertFalse(word_pattern('abba', 'dog cat cat fish'))\n    self.assertFalse(word_pattern('abba', 'dog dog dog dog'))\n    self.assertFalse(word_pattern('aaaa', 'dog cat cat dog'))"}}}, "TestIsSomorphic": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 163, "max_lineno": 168}, "methods": {"test_is_isomorphic": {"args": ["self"], "min_max_lineno": {"min_lineno": 164, "max_lineno": 168}, "calls": ["test_map.TestIsSomorphic.assertTrue", "test_map.TestIsSomorphic.assertFalse", "algorithms.map.is_isomorphic"], "source_code": "def test_is_isomorphic(self):\n    self.assertTrue(is_isomorphic('egg', 'add'))\n    self.assertFalse(is_isomorphic('foo', 'bar'))\n    self.assertTrue(is_isomorphic('paper', 'title'))"}}}, "TestLongestPalindromicSubsequence": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 170, "max_lineno": 182}, "methods": {"test_longest_palindromic_subsequence_is_correct": {"args": ["self"], "min_max_lineno": {"min_lineno": 171, "max_lineno": 176}, "calls": ["test_map.TestLongestPalindromicSubsequence.assertEqual", "algorithms.map.longest_palindromic_subsequence"], "source_code": "def test_longest_palindromic_subsequence_is_correct(self):\n    self.assertEqual(3, longest_palindromic_subsequence('BBABCBCAB'))\n    self.assertEqual(4, longest_palindromic_subsequence('abbaeae'))\n    self.assertEqual(7, longest_palindromic_subsequence('babbbababaa'))\n    self.assertEqual(4, longest_palindromic_subsequence('daccandeeja'))"}, "test_longest_palindromic_subsequence_is_incorrect": {"args": ["self"], "min_max_lineno": {"min_lineno": 177, "max_lineno": 182}, "calls": ["test_map.TestLongestPalindromicSubsequence.assertNotEqual", "algorithms.map.longest_palindromic_subsequence"], "source_code": "def test_longest_palindromic_subsequence_is_incorrect(self):\n    self.assertNotEqual(4, longest_palindromic_subsequence('BBABCBCAB'))\n    self.assertNotEqual(5, longest_palindromic_subsequence('abbaeae'))\n    self.assertNotEqual(2, longest_palindromic_subsequence('babbbababaa'))\n    self.assertNotEqual(1, longest_palindromic_subsequence('daccandeeja'))"}}}, "TestIsAnagram": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 184, "max_lineno": 188}, "methods": {"test_is_anagram": {"args": ["self"], "min_max_lineno": {"min_lineno": 185, "max_lineno": 188}, "calls": ["test_map.TestIsAnagram.assertTrue", "test_map.TestIsAnagram.assertFalse", "algorithms.map.is_anagram"], "source_code": "def test_is_anagram(self):\n    self.assertTrue(is_anagram('anagram', 'nagaram'))\n    self.assertFalse(is_anagram('rat', 'car'))"}}}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_map.unittest.main", "type": "script"}, "is_test": true}