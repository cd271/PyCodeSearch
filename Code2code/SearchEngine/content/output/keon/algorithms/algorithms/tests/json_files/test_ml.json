{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/tests/test_ml.py", "fileNameBase": "test_ml", "extension": "py"}, "dependencies": [{"from_module": "algorithms.ml.nearest_neighbor", "import": "distance", "type": "external", "type_element": "module"}, {"from_module": "algorithms.ml.nearest_neighbor", "import": "nearest_neighbor", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestML": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 9, "max_lineno": 37}, "methods": {"setUp": {"args": ["self"], "min_max_lineno": {"min_lineno": 10, "max_lineno": 21}, "source_code": "def setUp(self):\n    self.trainSetAND = {(0, 0): 0, (0, 1): 0, (1, 0): 0, (1, 1): 1}\n    self.trainSetLight = {(11, 98, 237): 'L', (3, 39, 96): 'D', (242, 226, 12): 'L', (99, 93, 4): 'D', (232, 62, 32): 'L', (119, 28, 11): 'D', (25, 214, 47): 'L', (89, 136, 247): 'L', (21, 34, 63): 'D', (237, 99, 120): 'L', (73, 33, 39): 'D'}"}, "test_nearest_neighbor": {"args": ["self"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 34}, "calls": ["test_ml.TestML.assertEqual", "algorithms.ml.nearest_neighbor.nearest_neighbor"], "source_code": "def test_nearest_neighbor(self):\n    self.assertEqual(nearest_neighbor((1, 1), self.trainSetAND), 1)\n    self.assertEqual(nearest_neighbor((0, 1), self.trainSetAND), 0)\n    self.assertEqual(nearest_neighbor((31, 242, 164), self.trainSetLight), 'L')\n    self.assertEqual(nearest_neighbor((13, 94, 64), self.trainSetLight), 'D')\n    self.assertEqual(nearest_neighbor((230, 52, 239), self.trainSetLight), 'L')"}, "test_distance": {"args": ["self"], "min_max_lineno": {"min_lineno": 35, "max_lineno": 37}, "calls": ["test_ml.TestML.assertAlmostEqual", "algorithms.ml.nearest_neighbor.distance"], "source_code": "def test_distance(self):\n    self.assertAlmostEqual(distance((1, 2, 3), (1, 0, -1)), 4.47, 2)"}}}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_ml.unittest.main", "type": "script"}, "is_test": true}