{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/tests/test_queues.py", "fileNameBase": "test_queues", "extension": "py"}, "dependencies": [{"import": "unittest", "type": "external", "type_element": "module"}, {"from_module": "algorithms.queues", "import": "ArrayQueue", "type": "external", "type_element": "module"}, {"from_module": "algorithms.queues", "import": "LinkedListQueue", "type": "external", "type_element": "module"}, {"from_module": "algorithms.queues", "import": "max_sliding_window", "type": "external", "type_element": "module"}, {"from_module": "algorithms.queues", "import": "reconstruct_queue", "type": "external", "type_element": "module"}, {"from_module": "algorithms.queues", "import": "PriorityQueue", "type": "external", "type_element": "module"}], "classes": {"TestQueue": {"doc": {"short_description": "Test suite for the Queue data structures.", "full": "Test suite for the Queue data structures."}, "extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 73}, "methods": {"test_ArrayQueue": {"args": ["self"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 44}, "calls": ["algorithms.queues.ArrayQueue", "algorithms.queues.ArrayQueue.enqueue", "iter", "test_queues.TestQueue.assertEqual", "test_queues.TestQueue.assertRaises", "test_queues.TestQueue.assertFalse", "test_queues.TestQueue.assertTrue", "next", "len", "algorithms.queues.ArrayQueue.is_empty", "algorithms.queues.ArrayQueue.peek", "algorithms.queues.ArrayQueue.dequeue"], "store_vars_calls": {"queue": "ArrayQueue", "it": "iter"}, "source_code": "def test_ArrayQueue(self):\n    queue = ArrayQueue()\n    queue.enqueue(1)\n    queue.enqueue(2)\n    queue.enqueue(3)\n    it = iter(queue)\n    self.assertEqual(1, next(it))\n    self.assertEqual(2, next(it))\n    self.assertEqual(3, next(it))\n    self.assertRaises(StopIteration, next, it)\n    self.assertEqual(3, len(queue))\n    self.assertFalse(queue.is_empty())\n    self.assertEqual(1, queue.peek())\n    self.assertEqual(1, queue.dequeue())\n    self.assertEqual(2, queue.dequeue())\n    self.assertEqual(3, queue.dequeue())\n    self.assertTrue(queue.is_empty())"}, "test_LinkedListQueue": {"args": ["self"], "min_max_lineno": {"min_lineno": 45, "max_lineno": 73}, "calls": ["algorithms.queues.LinkedListQueue", "algorithms.queues.LinkedListQueue.enqueue", "iter", "test_queues.TestQueue.assertEqual", "test_queues.TestQueue.assertRaises", "test_queues.TestQueue.assertFalse", "test_queues.TestQueue.assertTrue", "next", "len", "algorithms.queues.LinkedListQueue.is_empty", "algorithms.queues.LinkedListQueue.peek", "algorithms.queues.LinkedListQueue.dequeue"], "store_vars_calls": {"queue": "LinkedListQueue", "it": "iter"}, "source_code": "def test_LinkedListQueue(self):\n    queue = LinkedListQueue()\n    queue.enqueue(1)\n    queue.enqueue(2)\n    queue.enqueue(3)\n    it = iter(queue)\n    self.assertEqual(1, next(it))\n    self.assertEqual(2, next(it))\n    self.assertEqual(3, next(it))\n    self.assertRaises(StopIteration, next, it)\n    self.assertEqual(3, len(queue))\n    self.assertFalse(queue.is_empty())\n    self.assertEqual(1, queue.peek())\n    self.assertEqual(1, queue.dequeue())\n    self.assertEqual(2, queue.dequeue())\n    self.assertEqual(3, queue.dequeue())\n    self.assertTrue(queue.is_empty())"}}}, "TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 75, "max_lineno": 93}, "methods": {"test_max_sliding_window": {"args": ["self"], "min_max_lineno": {"min_lineno": 76, "max_lineno": 88}, "calls": ["test_queues.TestSuite.assertEqual", "algorithms.queues.max_sliding_window"], "source_code": "def test_max_sliding_window(self):\n    array = [1, 3, -1, -3, 5, 3, 6, 7]\n    self.assertEqual(max_sliding_window(array, k=5), [5, 5, 6, 7])\n    self.assertEqual(max_sliding_window(array, k=3), [3, 3, 5, 5, 6, 7])\n    self.assertEqual(max_sliding_window(array, k=7), [6, 7])\n    array = [8, 5, 10, 7, 9, 4, 15, 12, 90, 13]\n    self.assertEqual(max_sliding_window(array, k=4), [10, 10, 10, 15, 15, 90, 90])\n    self.assertEqual(max_sliding_window(array, k=7), [15, 15, 90, 90])\n    self.assertEqual(max_sliding_window(array, k=2), [8, 10, 10, 9, 9, 15, 15, 90, 90])"}, "test_reconstruct_queue": {"args": ["self"], "min_max_lineno": {"min_lineno": 89, "max_lineno": 93}, "calls": ["test_queues.TestSuite.assertEqual", "algorithms.queues.reconstruct_queue"], "source_code": "def test_reconstruct_queue(self):\n    self.assertEqual([[5, 0], [7, 0], [5, 2], [6, 1], [4, 4], [7, 1]], reconstruct_queue([[7, 0], [4, 4], [7, 1], [5, 0], [6, 1], [5, 2]]))"}}}, "TestPriorityQueue": {"doc": {"short_description": "Test suite for the PriorityQueue data structures.", "full": "Test suite for the PriorityQueue data structures.\n    "}, "extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 95, "max_lineno": 107}, "methods": {"test_PriorityQueue": {"args": ["self"], "min_max_lineno": {"min_lineno": 99, "max_lineno": 107}, "calls": ["algorithms.queues.PriorityQueue", "test_queues.TestPriorityQueue.assertEqual", "algorithms.queues.PriorityQueue.push", "algorithms.queues.PriorityQueue.size", "algorithms.queues.PriorityQueue.pop"], "store_vars_calls": {"queue": "PriorityQueue"}, "source_code": "def test_PriorityQueue(self):\n    queue = PriorityQueue([3, 4, 1, 6])\n    self.assertEqual(4, queue.size())\n    self.assertEqual(1, queue.pop())\n    self.assertEqual(3, queue.size())\n    queue.push(2)\n    self.assertEqual(4, queue.size())\n    self.assertEqual(2, queue.pop())"}}}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_queues.unittest.main", "type": "script"}, "is_test": true}