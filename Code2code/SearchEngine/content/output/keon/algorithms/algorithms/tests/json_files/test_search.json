{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/tests/test_search.py", "fileNameBase": "test_search", "extension": "py"}, "dependencies": [{"from_module": "algorithms.search", "import": "binary_search", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "binary_search_recur", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "ternary_search", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "first_occurrence", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "last_occurrence", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "linear_search", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "search_insert", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "two_sum", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "two_sum1", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "two_sum2", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "search_range", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "find_min_rotate", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "find_min_rotate_recur", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "search_rotate", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "search_rotate_recur", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "jump_search", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "next_greatest_letter", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "next_greatest_letter_v1", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "next_greatest_letter_v2", "type": "external", "type_element": "module"}, {"from_module": "algorithms.search", "import": "interpolation_search", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 149}, "methods": {"test_first_occurrence": {"args": ["self"], "returns": ["idx"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 33}, "calls": ["test_search.TestSuite.assertEqual", "algorithms.search.first_occurrence", "test_search.TestSuite.test_first_occurrence.helper"], "functions": {"helper": {"args": ["array", "query"], "returns": ["idx"], "min_max_lineno": {"min_lineno": 23, "max_lineno": 26}, "calls": ["array.index"], "source_code": "def helper(array, query):\n    idx = array.index(query) if query in array else None\n    return idx"}}, "source_code": "def test_first_occurrence(self):\n\n    def helper(array, query):\n        idx = array.index(query) if query in array else None\n        return idx\n    array = [1, 1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6]\n    self.assertEqual(first_occurrence(array, 1), helper(array, 1))\n    self.assertEqual(first_occurrence(array, 3), helper(array, 3))\n    self.assertEqual(first_occurrence(array, 5), helper(array, 5))\n    self.assertEqual(first_occurrence(array, 6), helper(array, 6))\n    self.assertEqual(first_occurrence(array, 7), helper(array, 7))\n    self.assertEqual(first_occurrence(array, -1), helper(array, -1))"}, "test_binary_search": {"args": ["self"], "min_max_lineno": {"min_lineno": 34, "max_lineno": 45}, "calls": ["test_search.TestSuite.assertEqual", "algorithms.search.binary_search", "algorithms.search.binary_search_recur"], "source_code": "def test_binary_search(self):\n    array = [1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6]\n    self.assertEqual(10, binary_search(array, 5))\n    self.assertEqual(11, binary_search(array, 6))\n    self.assertEqual(None, binary_search(array, 7))\n    self.assertEqual(None, binary_search(array, -1))\n    self.assertEqual(10, binary_search_recur(array, 0, 11, 5))\n    self.assertEqual(11, binary_search_recur(array, 0, 11, 6))\n    self.assertEqual(-1, binary_search_recur(array, 0, 11, 7))\n    self.assertEqual(-1, binary_search_recur(array, 0, 11, -1))"}, "test_ternary_search": {"args": ["self"], "min_max_lineno": {"min_lineno": 46, "max_lineno": 53}, "calls": ["test_search.TestSuite.assertEqual", "algorithms.search.ternary_search"], "source_code": "def test_ternary_search(self):\n    array = [1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6]\n    self.assertEqual(10, ternary_search(0, 11, 5, array))\n    self.assertEqual(3, ternary_search(0, 10, 3, array))\n    self.assertEqual(-1, ternary_search(0, 10, 5, array))\n    self.assertEqual(-1, ternary_search(0, 11, 7, array))\n    self.assertEqual(-1, ternary_search(0, 11, -1, array))"}, "test_last_occurrence": {"args": ["self"], "min_max_lineno": {"min_lineno": 54, "max_lineno": 61}, "calls": ["test_search.TestSuite.assertEqual", "algorithms.search.last_occurrence"], "source_code": "def test_last_occurrence(self):\n    array = [1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6]\n    self.assertEqual(5, last_occurrence(array, 3))\n    self.assertEqual(10, last_occurrence(array, 5))\n    self.assertEqual(None, last_occurrence(array, 7))\n    self.assertEqual(0, last_occurrence(array, 1))\n    self.assertEqual(13, last_occurrence(array, 6))"}, "test_linear_search": {"args": ["self"], "min_max_lineno": {"min_lineno": 62, "max_lineno": 68}, "calls": ["test_search.TestSuite.assertEqual", "algorithms.search.linear_search"], "source_code": "def test_linear_search(self):\n    array = [1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6]\n    self.assertEqual(6, linear_search(array, 4))\n    self.assertEqual(10, linear_search(array, 5))\n    self.assertEqual(-1, linear_search(array, 7))\n    self.assertEqual(-1, linear_search(array, -1))"}, "test_search_insert": {"args": ["self"], "min_max_lineno": {"min_lineno": 69, "max_lineno": 75}, "calls": ["test_search.TestSuite.assertEqual", "algorithms.search.search_insert"], "source_code": "def test_search_insert(self):\n    array = [1, 3, 5, 6]\n    self.assertEqual(2, search_insert(array, 5))\n    self.assertEqual(1, search_insert(array, 2))\n    self.assertEqual(4, search_insert(array, 7))\n    self.assertEqual(0, search_insert(array, 0))"}, "test_two_sum": {"args": ["self"], "min_max_lineno": {"min_lineno": 76, "max_lineno": 87}, "calls": ["test_search.TestSuite.assertEqual", "algorithms.search.two_sum", "algorithms.search.two_sum1", "algorithms.search.two_sum2"], "source_code": "def test_two_sum(self):\n    array = [2, 7, 11, 15]\n    self.assertEqual([1, 2], two_sum(array, 9))\n    self.assertEqual([2, 4], two_sum(array, 22))\n    self.assertEqual([1, 2], two_sum1(array, 9))\n    self.assertEqual([2, 4], two_sum1(array, 22))\n    self.assertEqual([1, 2], two_sum2(array, 9))\n    self.assertEqual([2, 4], two_sum2(array, 22))"}, "test_search_range": {"args": ["self"], "min_max_lineno": {"min_lineno": 88, "max_lineno": 98}, "calls": ["test_search.TestSuite.assertEqual", "algorithms.search.search_range"], "source_code": "def test_search_range(self):\n    array = [5, 7, 7, 8, 8, 8, 10]\n    self.assertEqual([3, 5], search_range(array, 8))\n    self.assertEqual([1, 2], search_range(array, 7))\n    self.assertEqual([-1, -1], search_range(array, 11))\n    array = [5, 7, 7, 7, 7, 8, 8, 8, 8, 10]\n    self.assertEqual([5, 8], search_range(array, 8))\n    self.assertEqual([1, 4], search_range(array, 7))\n    self.assertEqual([-1, -1], search_range(array, 11))"}, "test_find_min_rotate": {"args": ["self"], "min_max_lineno": {"min_lineno": 99, "max_lineno": 109}, "calls": ["test_search.TestSuite.assertEqual", "algorithms.search.find_min_rotate", "algorithms.search.find_min_rotate_recur"], "source_code": "def test_find_min_rotate(self):\n    array = [4, 5, 6, 7, 0, 1, 2]\n    self.assertEqual(0, find_min_rotate(array))\n    array = [10, 20, -1, 0, 1, 2, 3, 4, 5]\n    self.assertEqual(-1, find_min_rotate(array))\n    array = [4, 5, 6, 7, 0, 1, 2]\n    self.assertEqual(0, find_min_rotate_recur(array, 0, 6))\n    array = [10, 20, -1, 0, 1, 2, 3, 4, 5]\n    self.assertEqual(-1, find_min_rotate_recur(array, 0, 8))"}, "test_search_rotate": {"args": ["self"], "min_max_lineno": {"min_lineno": 110, "max_lineno": 116}, "calls": ["test_search.TestSuite.assertEqual", "algorithms.search.search_rotate", "algorithms.search.search_rotate_recur"], "source_code": "def test_search_rotate(self):\n    array = [15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14]\n    self.assertEqual(8, search_rotate(array, 5))\n    self.assertEqual(-1, search_rotate(array, 9))\n    self.assertEqual(8, search_rotate_recur(array, 0, 11, 5))\n    self.assertEqual(-1, search_rotate_recur(array, 0, 11, 9))"}, "test_jump_search": {"args": ["self"], "min_max_lineno": {"min_lineno": 117, "max_lineno": 123}, "calls": ["test_search.TestSuite.assertEqual", "algorithms.search.jump_search"], "source_code": "def test_jump_search(self):\n    array = [1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6]\n    self.assertEqual(10, jump_search(array, 5))\n    self.assertEqual(2, jump_search(array, 3))\n    self.assertEqual(-1, jump_search(array, 7))\n    self.assertEqual(-1, jump_search(array, -1))"}, "test_next_greatest_letter": {"args": ["self"], "min_max_lineno": {"min_lineno": 124, "max_lineno": 140}, "calls": ["test_search.TestSuite.assertEqual", "algorithms.search.next_greatest_letter", "algorithms.search.next_greatest_letter_v1", "algorithms.search.next_greatest_letter_v2"], "source_code": "def test_next_greatest_letter(self):\n    letters = ['c', 'f', 'j']\n    target = 'a'\n    self.assertEqual('c', next_greatest_letter(letters, target))\n    self.assertEqual('c', next_greatest_letter_v1(letters, target))\n    self.assertEqual('c', next_greatest_letter_v2(letters, target))\n    letters = ['c', 'f', 'j']\n    target = 'd'\n    self.assertEqual('f', next_greatest_letter(letters, target))\n    self.assertEqual('f', next_greatest_letter_v1(letters, target))\n    self.assertEqual('f', next_greatest_letter_v2(letters, target))\n    letters = ['c', 'f', 'j']\n    target = 'j'\n    self.assertEqual('c', next_greatest_letter(letters, target))\n    self.assertEqual('c', next_greatest_letter_v1(letters, target))\n    self.assertEqual('c', next_greatest_letter_v2(letters, target))"}, "test_interpolation_search": {"args": ["self"], "min_max_lineno": {"min_lineno": 141, "max_lineno": 149}, "calls": ["test_search.TestSuite.assertEqual", "algorithms.search.interpolation_search"], "source_code": "def test_interpolation_search(self):\n    array = [0, 3, 5, 5, 9, 12, 12, 15, 16, 19, 20]\n    self.assertEqual(1, interpolation_search(array, 3))\n    self.assertEqual(2, interpolation_search(array, 5))\n    self.assertEqual(6, interpolation_search(array, 12))\n    self.assertEqual(-1, interpolation_search(array, 22))\n    self.assertEqual(-1, interpolation_search(array, -10))\n    self.assertEqual(10, interpolation_search(array, 20))"}}}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_search.unittest.main", "type": "script"}, "is_test": true}