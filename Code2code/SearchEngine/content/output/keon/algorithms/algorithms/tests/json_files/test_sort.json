{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/tests/test_sort.py", "fileNameBase": "test_sort", "extension": "py"}, "dependencies": [{"from_module": "algorithms.sort", "import": "bitonic_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "bogo_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "bubble_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "comb_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "counting_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "cycle_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "exchange_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "max_heap_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "min_heap_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "merge_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "pancake_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "pigeonhole_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "quick_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "selection_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "bucket_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "shell_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "radix_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "gnome_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "cocktail_shaker_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "top_sort", "type": "external", "type_element": "module"}, {"from_module": "algorithms.sort", "import": "top_sort_recursive", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestSuite": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 107}, "methods": {"test_bogo_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 40, "max_lineno": 42}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.bogo_sort"], "source_code": "def test_bogo_sort(self):\n    self.assertTrue(is_sorted(bogo_sort([1, 23, 5])))"}, "test_bitonic_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 43, "max_lineno": 46}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.bitonic_sort"], "source_code": "def test_bitonic_sort(self):\n    self.assertTrue(is_sorted(bitonic_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_bubble_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 47, "max_lineno": 49}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.bubble_sort"], "source_code": "def test_bubble_sort(self):\n    self.assertTrue(is_sorted(bubble_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_comb_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 50, "max_lineno": 52}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.comb_sort"], "source_code": "def test_comb_sort(self):\n    self.assertTrue(is_sorted(comb_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_counting_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 53, "max_lineno": 56}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.counting_sort"], "source_code": "def test_counting_sort(self):\n    self.assertTrue(is_sorted(counting_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_cycle_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 57, "max_lineno": 59}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.cycle_sort"], "source_code": "def test_cycle_sort(self):\n    self.assertTrue(is_sorted(cycle_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_exchange_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 60, "max_lineno": 63}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.exchange_sort"], "source_code": "def test_exchange_sort(self):\n    self.assertTrue(is_sorted(exchange_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_heap_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 64, "max_lineno": 70}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.max_heap_sort", "algorithms.sort.min_heap_sort"], "source_code": "def test_heap_sort(self):\n    self.assertTrue(is_sorted(max_heap_sort([1, 3, 2, 5, 65, 23, 57, 1232])))\n    self.assertTrue(is_sorted(min_heap_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_insertion_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 71, "max_lineno": 74}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.bitonic_sort"], "source_code": "def test_insertion_sort(self):\n    self.assertTrue(is_sorted(bitonic_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_merge_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 75, "max_lineno": 77}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.merge_sort"], "source_code": "def test_merge_sort(self):\n    self.assertTrue(is_sorted(merge_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_pancake_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 78, "max_lineno": 81}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.pancake_sort"], "source_code": "def test_pancake_sort(self):\n    self.assertTrue(is_sorted(pancake_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_pigeonhole_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 82, "max_lineno": 84}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.pigeonhole_sort"], "source_code": "def test_pigeonhole_sort(self):\n    self.assertTrue(is_sorted(pigeonhole_sort([1, 5, 65, 23, 57, 1232])))"}, "test_quick_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 85, "max_lineno": 87}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.quick_sort"], "source_code": "def test_quick_sort(self):\n    self.assertTrue(is_sorted(quick_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_selection_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 88, "max_lineno": 91}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.selection_sort"], "source_code": "def test_selection_sort(self):\n    self.assertTrue(is_sorted(selection_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_bucket_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 92, "max_lineno": 94}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.bucket_sort"], "source_code": "def test_bucket_sort(self):\n    self.assertTrue(is_sorted(bucket_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_shell_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 95, "max_lineno": 97}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.shell_sort"], "source_code": "def test_shell_sort(self):\n    self.assertTrue(is_sorted(shell_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_radix_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 98, "max_lineno": 100}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.radix_sort"], "source_code": "def test_radix_sort(self):\n    self.assertTrue(is_sorted(radix_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_gnome_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 101, "max_lineno": 103}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.gnome_sort"], "source_code": "def test_gnome_sort(self):\n    self.assertTrue(is_sorted(gnome_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}, "test_cocktail_shaker_sort": {"args": ["self"], "min_max_lineno": {"min_lineno": 104, "max_lineno": 107}, "calls": ["test_sort.TestSuite.assertTrue", "test_sort.is_sorted", "algorithms.sort.cocktail_shaker_sort"], "source_code": "def test_cocktail_shaker_sort(self):\n    self.assertTrue(is_sorted(cocktail_shaker_sort([1, 3, 2, 5, 65, 23, 57, 1232])))"}}}, "TestTopSort": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 109, "max_lineno": 127}, "methods": {"setUp": {"args": ["self"], "min_max_lineno": {"min_lineno": 110, "max_lineno": 119}, "source_code": "def setUp(self):\n    self.depGraph = {'a': ['b'], 'b': ['c'], 'c': ['e'], 'e': ['g'], 'd': [], 'f': ['e', 'd'], 'g': []}"}, "test_topsort": {"args": ["self"], "min_max_lineno": {"min_lineno": 121, "max_lineno": 127}, "calls": ["algorithms.sort.top_sort_recursive", "test_sort.TestTopSort.assertTrue", "algorithms.sort.top_sort", "algorithms.sort.top_sort.index"], "store_vars_calls": {"res": "top_sort"}, "source_code": "def test_topsort(self):\n    res = top_sort_recursive(self.depGraph)\n    self.assertTrue(res.index('g') < res.index('e'))\n    res = top_sort(self.depGraph)\n    self.assertTrue(res.index('g') < res.index('e'))"}}}}, "functions": {"is_sorted": {"doc": {"short_description": "Helper function to check if the given array is sorted.", "args": {"array": {"description": "Array to check if sorted"}}, "returns": {"description": "True if sorted in ascending order, else False", "is_generator": false}}, "args": ["array"], "returns": ["True", "False"], "min_max_lineno": {"min_lineno": 26, "max_lineno": 37}, "calls": ["range", "len"], "source_code": "def is_sorted(array):\n    \"\"\"\n    Helper function to check if the given array is sorted.\n    :param array: Array to check if sorted\n    :return: True if sorted in ascending order, else False\n    \"\"\"\n    for i in range(len(array) - 1):\n        if array[i] > array[i + 1]:\n            return False\n    return True"}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_sort.unittest.main", "type": "script"}, "is_test": true}