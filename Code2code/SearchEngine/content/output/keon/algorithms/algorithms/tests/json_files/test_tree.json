{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/tests/test_tree.py", "fileNameBase": "test_tree", "extension": "py"}, "dependencies": [{"from_module": "algorithms.tree.traversal", "import": "preorder", "type": "external", "type_element": "module"}, {"from_module": "algorithms.tree.traversal", "import": "preorder_rec", "type": "external", "type_element": "module"}, {"from_module": "algorithms.tree.traversal", "import": "postorder", "type": "external", "type_element": "module"}, {"from_module": "algorithms.tree.traversal", "import": "postorder_rec", "type": "external", "type_element": "module"}, {"from_module": "algorithms.tree.traversal", "import": "inorder", "type": "external", "type_element": "module"}, {"from_module": "algorithms.tree.traversal", "import": "inorder_rec", "type": "external", "type_element": "module"}, {"from_module": "algorithms.tree.b_tree", "import": "BTree", "type": "external", "type_element": "module"}, {"from_module": "algorithms.tree", "import": "construct_tree_postorder_preorder", "alias": "ctpp", "type": "external", "type_element": "module"}, {"from_module": "algorithms.tree.fenwick_tree.fenwick_tree", "import": "Fenwick_Tree", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"Node": {"min_max_lineno": {"min_lineno": 18, "max_lineno": 24}, "methods": {"__init__": {"args": ["self", "val", "left", "right"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 24}, "source_code": "def __init__(self, val, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right"}}}, "TestTraversal": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 26, "max_lineno": 42}, "methods": {"test_preorder": {"args": ["self"], "min_max_lineno": {"min_lineno": 28, "max_lineno": 32}, "calls": ["test_tree.create_tree", "test_tree.TestTraversal.assertEqual", "algorithms.tree.traversal.preorder", "algorithms.tree.traversal.preorder_rec"], "store_vars_calls": {"tree": "create_tree"}, "source_code": "def test_preorder(self):\n    tree = create_tree()\n    self.assertEqual([100, 50, 25, 75, 150, 125, 175], preorder(tree))\n    self.assertEqual([100, 50, 25, 75, 150, 125, 175], preorder_rec(tree))"}, "test_postorder": {"args": ["self"], "min_max_lineno": {"min_lineno": 33, "max_lineno": 37}, "calls": ["test_tree.create_tree", "test_tree.TestTraversal.assertEqual", "algorithms.tree.traversal.postorder", "algorithms.tree.traversal.postorder_rec"], "store_vars_calls": {"tree": "create_tree"}, "source_code": "def test_postorder(self):\n    tree = create_tree()\n    self.assertEqual([25, 75, 50, 125, 175, 150, 100], postorder(tree))\n    self.assertEqual([25, 75, 50, 125, 175, 150, 100], postorder_rec(tree))"}, "test_inorder": {"args": ["self"], "min_max_lineno": {"min_lineno": 38, "max_lineno": 42}, "calls": ["test_tree.create_tree", "test_tree.TestTraversal.assertEqual", "algorithms.tree.traversal.inorder", "algorithms.tree.traversal.inorder_rec"], "store_vars_calls": {"tree": "create_tree"}, "source_code": "def test_inorder(self):\n    tree = create_tree()\n    self.assertEqual([25, 50, 75, 100, 125, 150, 175], inorder(tree))\n    self.assertEqual([25, 50, 75, 100, 125, 150, 175], inorder_rec(tree))"}}}, "TestBTree": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 58, "max_lineno": 114}, "methods": {"setUpClass": {"args": ["cls"], "min_max_lineno": {"min_lineno": 60, "max_lineno": 66}, "calls": ["random.seed"], "source_code": "@classmethod\ndef setUpClass(cls):\n    import random\n    random.seed(18719)\n    cls.random = random\n    cls.range = 10000"}, "setUp": {"args": ["self"], "min_max_lineno": {"min_lineno": 67, "max_lineno": 70}, "calls": ["test_tree.TestBTree.random.randrange", "range"], "source_code": "def setUp(self):\n    self.keys_to_insert = [self.random.randrange(-self.range, self.range) for i in range(self.range)]"}, "test_insertion_and_find_even_degree": {"args": ["self"], "min_max_lineno": {"min_lineno": 71, "max_lineno": 79}, "calls": ["algorithms.tree.b_tree.BTree", "range", "algorithms.tree.b_tree.BTree.insert_key", "test_tree.TestBTree.random.choice", "test_tree.TestBTree.assertTrue", "algorithms.tree.b_tree.BTree.find"], "store_vars_calls": {"btree": "BTree", "key": "self.random.choice"}, "source_code": "def test_insertion_and_find_even_degree(self):\n    btree = BTree(4)\n    for i in self.keys_to_insert:\n        btree.insert_key(i)\n    for i in range(100):\n        key = self.random.choice(self.keys_to_insert)\n        self.assertTrue(btree.find(key))"}, "test_insertion_and_find_odd_degree": {"args": ["self"], "min_max_lineno": {"min_lineno": 80, "max_lineno": 88}, "calls": ["algorithms.tree.b_tree.BTree", "range", "algorithms.tree.b_tree.BTree.insert_key", "test_tree.TestBTree.random.choice", "test_tree.TestBTree.assertTrue", "algorithms.tree.b_tree.BTree.find"], "store_vars_calls": {"btree": "BTree", "key": "self.random.choice"}, "source_code": "def test_insertion_and_find_odd_degree(self):\n    btree = BTree(3)\n    for i in self.keys_to_insert:\n        btree.insert_key(i)\n    for i in range(100):\n        key = self.random.choice(self.keys_to_insert)\n        self.assertTrue(btree.find(key))"}, "test_deletion_even_degree": {"args": ["self"], "min_max_lineno": {"min_lineno": 89, "max_lineno": 101}, "calls": ["algorithms.tree.b_tree.BTree", "set", "test_tree.TestBTree.assertEqual", "algorithms.tree.b_tree.BTree.insert_key", "algorithms.tree.b_tree.BTree.remove_key", "test_tree.TestBTree.assertFalse", "algorithms.tree.b_tree.BTree.find"], "store_vars_calls": {"btree": "BTree", "key_list": "set"}, "source_code": "def test_deletion_even_degree(self):\n    btree = BTree(4)\n    key_list = set(self.keys_to_insert)\n    for i in key_list:\n        btree.insert_key(i)\n    for key in key_list:\n        btree.remove_key(key)\n        self.assertFalse(btree.find(key))\n    self.assertEqual(btree.root.keys, [])\n    self.assertEqual(btree.root.children, [])"}, "test_deletion_odd_degree": {"args": ["self"], "min_max_lineno": {"min_lineno": 102, "max_lineno": 114}, "calls": ["algorithms.tree.b_tree.BTree", "set", "test_tree.TestBTree.assertEqual", "algorithms.tree.b_tree.BTree.insert_key", "algorithms.tree.b_tree.BTree.remove_key", "test_tree.TestBTree.assertFalse", "algorithms.tree.b_tree.BTree.find"], "store_vars_calls": {"btree": "BTree", "key_list": "set"}, "source_code": "def test_deletion_odd_degree(self):\n    btree = BTree(3)\n    key_list = set(self.keys_to_insert)\n    for i in key_list:\n        btree.insert_key(i)\n    for key in key_list:\n        btree.remove_key(key)\n        self.assertFalse(btree.find(key))\n    self.assertEqual(btree.root.keys, [])\n    self.assertEqual(btree.root.children, [])"}}}, "TestConstructTreePreorderPostorder": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 116, "max_lineno": 145}, "methods": {"test_construct_tree": {"args": ["self"], "min_max_lineno": {"min_lineno": 117, "max_lineno": 145}, "calls": ["len", "test_tree.TestConstructTreePreorderPostorder.assertEqual", "algorithms.tree.construct_tree_postorder_preorder.construct_tree"], "store_vars_calls": {"size1": "len", "size2": "len", "size3": "len"}, "source_code": "def test_construct_tree(self):\n    ctpp.pre_index = 0\n    pre1 = [1, 2, 4, 8, 9, 5, 3, 6, 7]\n    post1 = [8, 9, 4, 5, 2, 6, 7, 3, 1]\n    size1 = len(pre1)\n    self.assertEqual(ctpp.construct_tree(pre1, post1, size1), [8, 4, 9, 2, 5, 1, 6, 3, 7])\n    ctpp.pre_index = 0\n    pre2 = [1, 2, 4, 5, 3, 6, 7]\n    post2 = [4, 5, 2, 6, 7, 3, 1]\n    size2 = len(pre2)\n    self.assertEqual(ctpp.construct_tree(pre2, post2, size2), [4, 2, 5, 1, 6, 3, 7])\n    ctpp.pre_index = 0\n    pre3 = [12, 7, 16, 21, 5, 1, 9]\n    post3 = [16, 21, 7, 1, 9, 5, 12]\n    size3 = len(pre3)\n    self.assertEqual(ctpp.construct_tree(pre3, post3, size3), [16, 7, 21, 12, 1, 5, 9])"}}}, "TestFenwickTree": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 147, "max_lineno": 177}, "methods": {"test_construct_tree_with_update_1": {"args": ["self"], "min_max_lineno": {"min_lineno": 148, "max_lineno": 157}, "calls": ["algorithms.tree.fenwick_tree.fenwick_tree.Fenwick_Tree", "algorithms.tree.fenwick_tree.fenwick_tree.Fenwick_Tree.construct", "test_tree.TestFenwickTree.assertEqual", "algorithms.tree.fenwick_tree.fenwick_tree.Fenwick_Tree.update_bit", "algorithms.tree.fenwick_tree.fenwick_tree.Fenwick_Tree.get_sum"], "store_vars_calls": {"ft": "Fenwick_Tree", "bit_tree": "ft.construct"}, "source_code": "def test_construct_tree_with_update_1(self):\n    freq = [2, 1, 1, 3, 2, 3, 4, 5, 6, 7, 8, 9]\n    ft = Fenwick_Tree(freq)\n    bit_tree = ft.construct()\n    self.assertEqual(12, ft.get_sum(bit_tree, 5))\n    freq[3] += 6\n    ft.update_bit(bit_tree, 3, 6)\n    self.assertEqual(18, ft.get_sum(bit_tree, 5))"}, "test_construct_tree_with_update_2": {"args": ["self"], "min_max_lineno": {"min_lineno": 158, "max_lineno": 167}, "calls": ["algorithms.tree.fenwick_tree.fenwick_tree.Fenwick_Tree", "algorithms.tree.fenwick_tree.fenwick_tree.Fenwick_Tree.construct", "test_tree.TestFenwickTree.assertEqual", "algorithms.tree.fenwick_tree.fenwick_tree.Fenwick_Tree.update_bit", "algorithms.tree.fenwick_tree.fenwick_tree.Fenwick_Tree.get_sum"], "store_vars_calls": {"ft": "Fenwick_Tree", "bit_tree": "ft.construct"}, "source_code": "def test_construct_tree_with_update_2(self):\n    freq = [1, 2, 3, 4, 5]\n    ft = Fenwick_Tree(freq)\n    bit_tree = ft.construct()\n    self.assertEqual(10, ft.get_sum(bit_tree, 3))\n    freq[3] -= 5\n    ft.update_bit(bit_tree, 3, -5)\n    self.assertEqual(5, ft.get_sum(bit_tree, 3))"}, "test_construct_tree_with_update_3": {"args": ["self"], "min_max_lineno": {"min_lineno": 168, "max_lineno": 177}, "calls": ["algorithms.tree.fenwick_tree.fenwick_tree.Fenwick_Tree", "algorithms.tree.fenwick_tree.fenwick_tree.Fenwick_Tree.construct", "test_tree.TestFenwickTree.assertEqual", "algorithms.tree.fenwick_tree.fenwick_tree.Fenwick_Tree.update_bit", "algorithms.tree.fenwick_tree.fenwick_tree.Fenwick_Tree.get_sum"], "store_vars_calls": {"ft": "Fenwick_Tree", "bit_tree": "ft.construct"}, "source_code": "def test_construct_tree_with_update_3(self):\n    freq = [2, 1, 4, 6, -1, 5, -32, 0, 1]\n    ft = Fenwick_Tree(freq)\n    bit_tree = ft.construct()\n    self.assertEqual(12, ft.get_sum(bit_tree, 4))\n    freq[2] += 11\n    ft.update_bit(bit_tree, 2, 11)\n    self.assertEqual(23, ft.get_sum(bit_tree, 4))"}}}}, "functions": {"create_tree": {"returns": ["n1"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 56}, "calls": ["test_tree.Node"], "store_vars_calls": {"n1": "Node", "n2": "Node", "n3": "Node", "n4": "Node", "n5": "Node", "n6": "Node", "n7": "Node"}, "source_code": "def create_tree():\n    n1 = Node(100)\n    n2 = Node(50)\n    n3 = Node(150)\n    n4 = Node(25)\n    n5 = Node(75)\n    n6 = Node(125)\n    n7 = Node(175)\n    (n1.left, n1.right) = (n2, n3)\n    (n2.left, n2.right) = (n4, n5)\n    (n3.left, n3.right) = (n6, n7)\n    return n1"}}, "body": {"calls": ["unittest.main"], "source_code": ["unittest.main()"]}, "main_info": {"main_flag": 1, "main_function": "test_tree.unittest.main", "type": "script"}, "is_test": true}