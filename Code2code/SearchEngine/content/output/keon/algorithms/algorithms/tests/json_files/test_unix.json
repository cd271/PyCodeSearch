{"file": {"path": "/cs/home/cd271/Documents/Project/Examples/SemanticCodeSearch/Code2code/SearchEngine/content/keon/algorithms/tests/test_unix.py", "fileNameBase": "test_unix", "extension": "py"}, "dependencies": [{"from_module": "algorithms.unix", "import": "join_with_slash", "type": "external", "type_element": "module"}, {"from_module": "algorithms.unix", "import": "full_path", "type": "external", "type_element": "module"}, {"from_module": "algorithms.unix", "import": "split", "type": "external", "type_element": "module"}, {"from_module": "algorithms.unix", "import": "simplify_path_v1", "type": "external", "type_element": "module"}, {"from_module": "algorithms.unix", "import": "simplify_path_v2", "type": "external", "type_element": "module"}, {"import": "os", "type": "external", "type_element": "module"}, {"import": "unittest", "type": "external", "type_element": "module"}], "classes": {"TestUnixPath": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 49}, "methods": {"test_join_with_slash": {"args": ["self"], "min_max_lineno": {"min_lineno": 12, "max_lineno": 21}, "calls": ["test_unix.TestUnixPath.assertEqual", "algorithms.unix.join_with_slash"], "source_code": "def test_join_with_slash(self):\n    self.assertEqual('path/to/dir/file', join_with_slash('path/to/dir/', 'file'))\n    self.assertEqual('path/to/dir/file', join_with_slash('path/to/dir', 'file'))\n    self.assertEqual('http://algorithms/part', join_with_slash('http://algorithms', 'part'))\n    self.assertEqual('http://algorithms/part', join_with_slash('http://algorithms/', 'part'))"}, "test_full_path": {"args": ["self"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 31}, "calls": ["test_unix.TestUnixPath.assertEqual", "os.getcwd", "algorithms.unix.full_path", "os.path.expanduser"], "source_code": "def test_full_path(self):\n    file_name = 'file_name'\n    expect_path = '{}/{}'.format(os.getcwd(), file_name)\n    self.assertEqual(expect_path, full_path(file_name))\n    expect_path = '{}/{}'.format(os.path.expanduser('~'), file_name)\n    self.assertEqual(expect_path, full_path('~/{}'.format(file_name)))"}, "test_split": {"args": ["self"], "min_max_lineno": {"min_lineno": 32, "max_lineno": 43}, "calls": ["algorithms.unix.split", "test_unix.TestUnixPath.assertEqual"], "store_vars_calls": {"expect_result": "split"}, "source_code": "def test_split(self):\n    path = 'https://algorithms/unix/test.py'\n    expect_result = split(path)\n    self.assertEqual('https://algorithms/unix', expect_result[0])\n    self.assertEqual('test.py', expect_result[1])\n    path = 'algorithms/unix/test.py'\n    expect_result = split(path)\n    self.assertEqual('algorithms/unix', expect_result[0])\n    self.assertEqual('test.py', expect_result[1])"}, "test_simplify_path": {"args": ["self"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 49}, "calls": ["test_unix.TestUnixPath.assertEqual", "algorithms.unix.simplify_path_v1", "algorithms.unix.simplify_path_v2"], "source_code": "def test_simplify_path(self):\n    self.assertEqual('/', simplify_path_v1('/../'))\n    self.assertEqual('/home/foo', simplify_path_v1('/home//foo/'))\n    self.assertEqual('/', simplify_path_v2('/../'))\n    self.assertEqual('/home/foo', simplify_path_v2('/home//foo/'))"}}}}, "is_test": true}